
URS_KTM_projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fc0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08009190  08009190  0000a190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009590  08009590  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009590  08009590  0000a590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009598  08009598  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009598  08009598  0000a598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800959c  0800959c  0000a59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080095a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  200001d4  08009774  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08009774  0000b54c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137a8  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d70  00000000  00000000  0001e9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00021720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dbe  00000000  00000000  000228b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253f6  00000000  00000000  0002366e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a5c  00000000  00000000  00048a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2390  00000000  00000000  000604c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142850  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aec  00000000  00000000  00142894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00148380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009178 	.word	0x08009178

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08009178 	.word	0x08009178

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <read_calliberation_data>:
long Temp = 0;



void read_calliberation_data (void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0}; // polje za pohranu kalibracijskih podataka
 8000f7e:	2300      	movs	r3, #0
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;  // početna adresa kalibracijskih podataka
 8000f90:	23aa      	movs	r3, #170	@ 0xaa
 8000f92:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000f94:	8afa      	ldrh	r2, [r7, #22]
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	9302      	str	r3, [sp, #8]
 8000f9c:	2316      	movs	r3, #22
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	21ee      	movs	r1, #238	@ 0xee
 8000fa8:	4836      	ldr	r0, [pc, #216]	@ (8001084 <read_calliberation_data+0x10c>)
 8000faa:	f002 fd1f 	bl	80039ec <HAL_I2C_Mem_Read>

	// spajanje podataka u 16-bitne vrijednosti

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000fae:	783b      	ldrb	r3, [r7, #0]
 8000fb0:	021b      	lsls	r3, r3, #8
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	787b      	ldrb	r3, [r7, #1]
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	4b32      	ldr	r3, [pc, #200]	@ (8001088 <read_calliberation_data+0x110>)
 8000fbe:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000fc0:	78bb      	ldrb	r3, [r7, #2]
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	78fb      	ldrb	r3, [r7, #3]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <read_calliberation_data+0x114>)
 8000fd0:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000fd2:	793b      	ldrb	r3, [r7, #4]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	797b      	ldrb	r3, [r7, #5]
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b21a      	sxth	r2, r3
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8001090 <read_calliberation_data+0x118>)
 8000fe2:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	4b27      	ldr	r3, [pc, #156]	@ (8001094 <read_calliberation_data+0x11c>)
 8000ff6:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8000ff8:	7a3b      	ldrb	r3, [r7, #8]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	7a7b      	ldrb	r3, [r7, #9]
 8001000:	b21b      	sxth	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b21b      	sxth	r3, r3
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b23      	ldr	r3, [pc, #140]	@ (8001098 <read_calliberation_data+0x120>)
 800100a:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 800100c:	7abb      	ldrb	r3, [r7, #10]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	7afb      	ldrb	r3, [r7, #11]
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21b      	sxth	r3, r3
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <read_calliberation_data+0x124>)
 800101e:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8001020:	7b3b      	ldrb	r3, [r7, #12]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b21a      	sxth	r2, r3
 8001026:	7b7b      	ldrb	r3, [r7, #13]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21a      	sxth	r2, r3
 800102e:	4b1c      	ldr	r3, [pc, #112]	@ (80010a0 <read_calliberation_data+0x128>)
 8001030:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8001032:	7bbb      	ldrb	r3, [r7, #14]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b21a      	sxth	r2, r3
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	b21b      	sxth	r3, r3
 800103c:	4313      	orrs	r3, r2
 800103e:	b21a      	sxth	r2, r3
 8001040:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <read_calliberation_data+0x12c>)
 8001042:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8001044:	7c3b      	ldrb	r3, [r7, #16]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	b21a      	sxth	r2, r3
 800104a:	7c7b      	ldrb	r3, [r7, #17]
 800104c:	b21b      	sxth	r3, r3
 800104e:	4313      	orrs	r3, r2
 8001050:	b21a      	sxth	r2, r3
 8001052:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <read_calliberation_data+0x130>)
 8001054:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8001056:	7cbb      	ldrb	r3, [r7, #18]
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21a      	sxth	r2, r3
 800105c:	7cfb      	ldrb	r3, [r7, #19]
 800105e:	b21b      	sxth	r3, r3
 8001060:	4313      	orrs	r3, r2
 8001062:	b21a      	sxth	r2, r3
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <read_calliberation_data+0x134>)
 8001066:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001068:	7d3b      	ldrb	r3, [r7, #20]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	7d7b      	ldrb	r3, [r7, #21]
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21a      	sxth	r2, r3
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <read_calliberation_data+0x138>)
 8001078:	801a      	strh	r2, [r3, #0]

}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200002b8 	.word	0x200002b8
 8001088:	200001f0 	.word	0x200001f0
 800108c:	200001f2 	.word	0x200001f2
 8001090:	200001f4 	.word	0x200001f4
 8001094:	200001f6 	.word	0x200001f6
 8001098:	200001f8 	.word	0x200001f8
 800109c:	200001fa 	.word	0x200001fa
 80010a0:	200001fc 	.word	0x200001fc
 80010a4:	200001fe 	.word	0x200001fe
 80010a8:	20000200 	.word	0x20000200
 80010ac:	20000202 	.word	0x20000202
 80010b0:	20000204 	.word	0x20000204

080010b4 <Get_UTemp>:


uint16_t Get_UTemp (void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;    // naredba za mjerenje temperature
 80010ba:	232e      	movs	r3, #46	@ 0x2e
 80010bc:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 80010be:	2300      	movs	r3, #0
 80010c0:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80010c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c6:	9302      	str	r3, [sp, #8]
 80010c8:	2301      	movs	r3, #1
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	22f4      	movs	r2, #244	@ 0xf4
 80010d4:	21ee      	movs	r1, #238	@ 0xee
 80010d6:	480e      	ldr	r0, [pc, #56]	@ (8001110 <Get_UTemp+0x5c>)
 80010d8:	f002 fb8e 	bl	80037f8 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // pričekati 4.5 ms za mjerenje
 80010dc:	2005      	movs	r0, #5
 80010de:	f001 fa73 	bl	80025c8 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 80010e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2302      	movs	r3, #2
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	22f6      	movs	r2, #246	@ 0xf6
 80010f4:	21ee      	movs	r1, #238	@ 0xee
 80010f6:	4806      	ldr	r0, [pc, #24]	@ (8001110 <Get_UTemp+0x5c>)
 80010f8:	f002 fc78 	bl	80039ec <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);  // spajanje podataka u 16-bitne vrijednosti
 80010fc:	793b      	ldrb	r3, [r7, #4]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b29b      	uxth	r3, r3
 8001102:	797a      	ldrb	r2, [r7, #5]
 8001104:	4413      	add	r3, r2
 8001106:	b29b      	uxth	r3, r3
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200002b8 	.word	0x200002b8

08001114 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	af00      	add	r7, sp, #0
	UT = Get_UTemp();  // dohvaćanje neobrađenih podataka o temperaturi
 8001118:	f7ff ffcc 	bl	80010b4 <Get_UTemp>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	4b3e      	ldr	r3, [pc, #248]	@ (800121c <BMP180_GetTemp+0x108>)
 8001122:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));  // obrada tih podataka
 8001124:	4b3d      	ldr	r3, [pc, #244]	@ (800121c <BMP180_GetTemp+0x108>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a3d      	ldr	r2, [pc, #244]	@ (8001220 <BMP180_GetTemp+0x10c>)
 800112a:	8812      	ldrh	r2, [r2, #0]
 800112c:	1a9b      	subs	r3, r3, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fa18 	bl	8000564 <__aeabi_i2d>
 8001134:	4604      	mov	r4, r0
 8001136:	460d      	mov	r5, r1
 8001138:	4b3a      	ldr	r3, [pc, #232]	@ (8001224 <BMP180_GetTemp+0x110>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fa11 	bl	8000564 <__aeabi_i2d>
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	4b38      	ldr	r3, [pc, #224]	@ (8001228 <BMP180_GetTemp+0x114>)
 8001148:	f7ff fba0 	bl	800088c <__aeabi_ddiv>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4620      	mov	r0, r4
 8001152:	4629      	mov	r1, r5
 8001154:	f7ff fa70 	bl	8000638 <__aeabi_dmul>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd1a 	bl	8000b98 <__aeabi_d2iz>
 8001164:	4603      	mov	r3, r0
 8001166:	4a31      	ldr	r2, [pc, #196]	@ (800122c <BMP180_GetTemp+0x118>)
 8001168:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 800116a:	4b31      	ldr	r3, [pc, #196]	@ (8001230 <BMP180_GetTemp+0x11c>)
 800116c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f9f7 	bl	8000564 <__aeabi_i2d>
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	4b2e      	ldr	r3, [pc, #184]	@ (8001234 <BMP180_GetTemp+0x120>)
 800117c:	f7ff fa5c 	bl	8000638 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4614      	mov	r4, r2
 8001186:	461d      	mov	r5, r3
 8001188:	4b2b      	ldr	r3, [pc, #172]	@ (8001238 <BMP180_GetTemp+0x124>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	461a      	mov	r2, r3
 8001190:	4b26      	ldr	r3, [pc, #152]	@ (800122c <BMP180_GetTemp+0x118>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4413      	add	r3, r2
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9e4 	bl	8000564 <__aeabi_i2d>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4620      	mov	r0, r4
 80011a2:	4629      	mov	r1, r5
 80011a4:	f7ff fb72 	bl	800088c <__aeabi_ddiv>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fcf2 	bl	8000b98 <__aeabi_d2iz>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a21      	ldr	r2, [pc, #132]	@ (800123c <BMP180_GetTemp+0x128>)
 80011b8:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <BMP180_GetTemp+0x118>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <BMP180_GetTemp+0x128>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001240 <BMP180_GetTemp+0x12c>)
 80011c6:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 80011c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <BMP180_GetTemp+0x12c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	3308      	adds	r3, #8
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f9c8 	bl	8000564 <__aeabi_i2d>
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <BMP180_GetTemp+0x130>)
 80011da:	f7ff fb57 	bl	800088c <__aeabi_ddiv>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fcd7 	bl	8000b98 <__aeabi_d2iz>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a16      	ldr	r2, [pc, #88]	@ (8001248 <BMP180_GetTemp+0x134>)
 80011ee:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 80011f0:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <BMP180_GetTemp+0x134>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f9b5 	bl	8000564 <__aeabi_i2d>
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b13      	ldr	r3, [pc, #76]	@ (800124c <BMP180_GetTemp+0x138>)
 8001200:	f7ff fb44 	bl	800088c <__aeabi_ddiv>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fcec 	bl	8000be8 <__aeabi_d2f>
 8001210:	4603      	mov	r3, r0
 8001212:	ee07 3a90 	vmov	s15, r3
}
 8001216:	eeb0 0a67 	vmov.f32	s0, s15
 800121a:	bdb0      	pop	{r4, r5, r7, pc}
 800121c:	20000208 	.word	0x20000208
 8001220:	200001fa 	.word	0x200001fa
 8001224:	200001f8 	.word	0x200001f8
 8001228:	40e00000 	.word	0x40e00000
 800122c:	2000020c 	.word	0x2000020c
 8001230:	20000202 	.word	0x20000202
 8001234:	40a00000 	.word	0x40a00000
 8001238:	20000204 	.word	0x20000204
 800123c:	20000210 	.word	0x20000210
 8001240:	20000214 	.word	0x20000214
 8001244:	40300000 	.word	0x40300000
 8001248:	20000218 	.word	0x20000218
 800124c:	40240000 	.word	0x40240000

08001250 <BMP180_Start>:

// inicijalizacija
void BMP180_Start (void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	read_calliberation_data();  // učitavanje kalibracijskih podataka
 8001254:	f7ff fe90 	bl	8000f78 <read_calliberation_data>
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800126e:	4b21      	ldr	r3, [pc, #132]	@ (80012f4 <MX_ADC1_Init+0x98>)
 8001270:	4a21      	ldr	r2, [pc, #132]	@ (80012f8 <MX_ADC1_Init+0x9c>)
 8001272:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001274:	4b1f      	ldr	r3, [pc, #124]	@ (80012f4 <MX_ADC1_Init+0x98>)
 8001276:	2200      	movs	r2, #0
 8001278:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800127a:	4b1e      	ldr	r3, [pc, #120]	@ (80012f4 <MX_ADC1_Init+0x98>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001280:	4b1c      	ldr	r3, [pc, #112]	@ (80012f4 <MX_ADC1_Init+0x98>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001286:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <MX_ADC1_Init+0x98>)
 8001288:	2200      	movs	r2, #0
 800128a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800128c:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <MX_ADC1_Init+0x98>)
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001294:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <MX_ADC1_Init+0x98>)
 8001296:	2200      	movs	r2, #0
 8001298:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800129a:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <MX_ADC1_Init+0x98>)
 800129c:	4a17      	ldr	r2, [pc, #92]	@ (80012fc <MX_ADC1_Init+0xa0>)
 800129e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a0:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <MX_ADC1_Init+0x98>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012a6:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <MX_ADC1_Init+0x98>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012ac:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <MX_ADC1_Init+0x98>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <MX_ADC1_Init+0x98>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ba:	480e      	ldr	r0, [pc, #56]	@ (80012f4 <MX_ADC1_Init+0x98>)
 80012bc:	f001 f9a8 	bl	8002610 <HAL_ADC_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012c6:	f000 fe15 	bl	8001ef4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80012ca:	230e      	movs	r3, #14
 80012cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012ce:	2301      	movs	r3, #1
 80012d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d6:	463b      	mov	r3, r7
 80012d8:	4619      	mov	r1, r3
 80012da:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <MX_ADC1_Init+0x98>)
 80012dc:	f001 fb46 	bl	800296c <HAL_ADC_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80012e6:	f000 fe05 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	2000021c 	.word	0x2000021c
 80012f8:	40012000 	.word	0x40012000
 80012fc:	0f000001 	.word	0x0f000001

08001300 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a17      	ldr	r2, [pc, #92]	@ (800137c <HAL_ADC_MspInit+0x7c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d127      	bne.n	8001372 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <HAL_ADC_MspInit+0x80>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	4a15      	ldr	r2, [pc, #84]	@ (8001380 <HAL_ADC_MspInit+0x80>)
 800132c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001330:	6453      	str	r3, [r2, #68]	@ 0x44
 8001332:	4b13      	ldr	r3, [pc, #76]	@ (8001380 <HAL_ADC_MspInit+0x80>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <HAL_ADC_MspInit+0x80>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a0e      	ldr	r2, [pc, #56]	@ (8001380 <HAL_ADC_MspInit+0x80>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <HAL_ADC_MspInit+0x80>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800135a:	2310      	movs	r3, #16
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135e:	2303      	movs	r3, #3
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	@ (8001384 <HAL_ADC_MspInit+0x84>)
 800136e:	f001 fe3d 	bl	8002fec <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	@ 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40012000 	.word	0x40012000
 8001380:	40023800 	.word	0x40023800
 8001384:	40020800 	.word	0x40020800

08001388 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001450 <MX_GPIO_Init+0xc8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a2a      	ldr	r2, [pc, #168]	@ (8001450 <MX_GPIO_Init+0xc8>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b28      	ldr	r3, [pc, #160]	@ (8001450 <MX_GPIO_Init+0xc8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	4b24      	ldr	r3, [pc, #144]	@ (8001450 <MX_GPIO_Init+0xc8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a23      	ldr	r2, [pc, #140]	@ (8001450 <MX_GPIO_Init+0xc8>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <MX_GPIO_Init+0xc8>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <MX_GPIO_Init+0xc8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a1c      	ldr	r2, [pc, #112]	@ (8001450 <MX_GPIO_Init+0xc8>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <MX_GPIO_Init+0xc8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013f2:	2310      	movs	r3, #16
 80013f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013f6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	4619      	mov	r1, r3
 8001406:	4813      	ldr	r0, [pc, #76]	@ (8001454 <MX_GPIO_Init+0xcc>)
 8001408:	f001 fdf0 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800140c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001410:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001412:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001418:	2301      	movs	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	4619      	mov	r1, r3
 8001422:	480d      	ldr	r0, [pc, #52]	@ (8001458 <MX_GPIO_Init+0xd0>)
 8001424:	f001 fde2 	bl	8002fec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 4, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2104      	movs	r1, #4
 800142c:	200a      	movs	r0, #10
 800142e:	f001 fda6 	bl	8002f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001432:	200a      	movs	r0, #10
 8001434:	f001 fdbf 	bl	8002fb6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2103      	movs	r1, #3
 800143c:	2017      	movs	r0, #23
 800143e:	f001 fd9e 	bl	8002f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001442:	2017      	movs	r0, #23
 8001444:	f001 fdb7 	bl	8002fb6 <HAL_NVIC_EnableIRQ>

}
 8001448:	bf00      	nop
 800144a:	3720      	adds	r7, #32
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000
 8001458:	40020800 	.word	0x40020800

0800145c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <MX_I2C1_Init+0x50>)
 8001462:	4a13      	ldr	r2, [pc, #76]	@ (80014b0 <MX_I2C1_Init+0x54>)
 8001464:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_I2C1_Init+0x50>)
 8001468:	4a12      	ldr	r2, [pc, #72]	@ (80014b4 <MX_I2C1_Init+0x58>)
 800146a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <MX_I2C1_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <MX_I2C1_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <MX_I2C1_Init+0x50>)
 800147a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800147e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001480:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <MX_I2C1_Init+0x50>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <MX_I2C1_Init+0x50>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148c:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <MX_I2C1_Init+0x50>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <MX_I2C1_Init+0x50>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001498:	4804      	ldr	r0, [pc, #16]	@ (80014ac <MX_I2C1_Init+0x50>)
 800149a:	f001 ff6b 	bl	8003374 <HAL_I2C_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014a4:	f000 fd26 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000264 	.word	0x20000264
 80014b0:	40005400 	.word	0x40005400
 80014b4:	000186a0 	.word	0x000186a0

080014b8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014bc:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <MX_I2C2_Init+0x50>)
 80014be:	4a13      	ldr	r2, [pc, #76]	@ (800150c <MX_I2C2_Init+0x54>)
 80014c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <MX_I2C2_Init+0x50>)
 80014c4:	4a12      	ldr	r2, [pc, #72]	@ (8001510 <MX_I2C2_Init+0x58>)
 80014c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <MX_I2C2_Init+0x50>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <MX_I2C2_Init+0x50>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <MX_I2C2_Init+0x50>)
 80014d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <MX_I2C2_Init+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <MX_I2C2_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e8:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <MX_I2C2_Init+0x50>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <MX_I2C2_Init+0x50>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014f4:	4804      	ldr	r0, [pc, #16]	@ (8001508 <MX_I2C2_Init+0x50>)
 80014f6:	f001 ff3d 	bl	8003374 <HAL_I2C_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001500:	f000 fcf8 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200002b8 	.word	0x200002b8
 800150c:	40005800 	.word	0x40005800
 8001510:	000186a0 	.word	0x000186a0

08001514 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	@ 0x30
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a42      	ldr	r2, [pc, #264]	@ (800163c <HAL_I2C_MspInit+0x128>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d12d      	bne.n	8001592 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	4b41      	ldr	r3, [pc, #260]	@ (8001640 <HAL_I2C_MspInit+0x12c>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4a40      	ldr	r2, [pc, #256]	@ (8001640 <HAL_I2C_MspInit+0x12c>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4b3e      	ldr	r3, [pc, #248]	@ (8001640 <HAL_I2C_MspInit+0x12c>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001552:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001558:	2312      	movs	r3, #18
 800155a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001564:	2304      	movs	r3, #4
 8001566:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4835      	ldr	r0, [pc, #212]	@ (8001644 <HAL_I2C_MspInit+0x130>)
 8001570:	f001 fd3c 	bl	8002fec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	4b31      	ldr	r3, [pc, #196]	@ (8001640 <HAL_I2C_MspInit+0x12c>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157c:	4a30      	ldr	r2, [pc, #192]	@ (8001640 <HAL_I2C_MspInit+0x12c>)
 800157e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001582:	6413      	str	r3, [r2, #64]	@ 0x40
 8001584:	4b2e      	ldr	r3, [pc, #184]	@ (8001640 <HAL_I2C_MspInit+0x12c>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001590:	e050      	b.n	8001634 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a2c      	ldr	r2, [pc, #176]	@ (8001648 <HAL_I2C_MspInit+0x134>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d14b      	bne.n	8001634 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <HAL_I2C_MspInit+0x12c>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a4:	4a26      	ldr	r2, [pc, #152]	@ (8001640 <HAL_I2C_MspInit+0x12c>)
 80015a6:	f043 0302 	orr.w	r3, r3, #2
 80015aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ac:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <HAL_I2C_MspInit+0x12c>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	4b20      	ldr	r3, [pc, #128]	@ (8001640 <HAL_I2C_MspInit+0x12c>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001640 <HAL_I2C_MspInit+0x12c>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001640 <HAL_I2C_MspInit+0x12c>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015da:	2312      	movs	r3, #18
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015e6:	2304      	movs	r3, #4
 80015e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	4619      	mov	r1, r3
 80015f0:	4814      	ldr	r0, [pc, #80]	@ (8001644 <HAL_I2C_MspInit+0x130>)
 80015f2:	f001 fcfb 	bl	8002fec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fc:	2312      	movs	r3, #18
 80015fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001608:	2304      	movs	r3, #4
 800160a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	480e      	ldr	r0, [pc, #56]	@ (800164c <HAL_I2C_MspInit+0x138>)
 8001614:	f001 fcea 	bl	8002fec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <HAL_I2C_MspInit+0x12c>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001620:	4a07      	ldr	r2, [pc, #28]	@ (8001640 <HAL_I2C_MspInit+0x12c>)
 8001622:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001626:	6413      	str	r3, [r2, #64]	@ 0x40
 8001628:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <HAL_I2C_MspInit+0x12c>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]
}
 8001634:	bf00      	nop
 8001636:	3730      	adds	r7, #48	@ 0x30
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40005400 	.word	0x40005400
 8001640:	40023800 	.word	0x40023800
 8001644:	40020400 	.word	0x40020400
 8001648:	40005800 	.word	0x40005800
 800164c:	40020800 	.word	0x40020800

08001650 <lcd_naredba>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/******* FUNKCIJE ZA LCD ********/
void lcd_naredba(char podatak, uint8_t adresa)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af02      	add	r7, sp, #8
 8001656:	4603      	mov	r3, r0
 8001658:	460a      	mov	r2, r1
 800165a:	71fb      	strb	r3, [r7, #7]
 800165c:	4613      	mov	r3, r2
 800165e:	71bb      	strb	r3, [r7, #6]
	char podaci[4], left, right;  // definiranje podataka koji  će biti poslani

	left = podatak & 0xF0;  // 4 viša bita (MSB)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	f023 030f 	bic.w	r3, r3, #15
 8001666:	73fb      	strb	r3, [r7, #15]
	right = (podatak << 4) & 0xF0;  // 4 niža bita (LSB)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	73bb      	strb	r3, [r7, #14]

	podaci[0] = left | 0x0C; // naredba za zapisivanje (RS = 0, EN = 1)
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	f043 030c 	orr.w	r3, r3, #12
 8001674:	b2db      	uxtb	r3, r3
 8001676:	723b      	strb	r3, [r7, #8]
	podaci[1] = left | 0x08;  // naredba za otpuštanje enable linije (EN = 0)
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	f043 0308 	orr.w	r3, r3, #8
 800167e:	b2db      	uxtb	r3, r3
 8001680:	727b      	strb	r3, [r7, #9]
	podaci[2] = right | 0x0C;
 8001682:	7bbb      	ldrb	r3, [r7, #14]
 8001684:	f043 030c 	orr.w	r3, r3, #12
 8001688:	b2db      	uxtb	r3, r3
 800168a:	72bb      	strb	r3, [r7, #10]
	podaci[3] = right | 0x08;
 800168c:	7bbb      	ldrb	r3, [r7, #14]
 800168e:	f043 0308 	orr.w	r3, r3, #8
 8001692:	b2db      	uxtb	r3, r3
 8001694:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, adresa<<1, podaci, 4, 100);	  // slanje svih podataka na LCD
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	b29b      	uxth	r3, r3
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	b299      	uxth	r1, r3
 800169e:	f107 0208 	add.w	r2, r7, #8
 80016a2:	2364      	movs	r3, #100	@ 0x64
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2304      	movs	r3, #4
 80016a8:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <lcd_naredba+0x68>)
 80016aa:	f001 ffa7 	bl	80035fc <HAL_I2C_Master_Transmit>
}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000264 	.word	0x20000264

080016bc <lcd_podatak>:

void lcd_podatak(char podatak, uint8_t adresa)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af02      	add	r7, sp, #8
 80016c2:	4603      	mov	r3, r0
 80016c4:	460a      	mov	r2, r1
 80016c6:	71fb      	strb	r3, [r7, #7]
 80016c8:	4613      	mov	r3, r2
 80016ca:	71bb      	strb	r3, [r7, #6]
	char podaci[4], left, right;  // definiranje podatak koji  će biti poslani

	left = podatak & 0xF0;  // 4 viša bita (MSB)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f023 030f 	bic.w	r3, r3, #15
 80016d2:	73fb      	strb	r3, [r7, #15]
	right = (podatak << 4) & 0xF0;  // 4 niža bita (LSB)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	011b      	lsls	r3, r3, #4
 80016d8:	73bb      	strb	r3, [r7, #14]

	podaci[0] = left | 0x0D;  // naredba za zapisivanje podataka (RS = 1, EN = 1)
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	f043 030d 	orr.w	r3, r3, #13
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	723b      	strb	r3, [r7, #8]
	podaci[1] = left | 0x09;  // naredba za otpuštanje enable linije (EN = 0)
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	f043 0309 	orr.w	r3, r3, #9
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	727b      	strb	r3, [r7, #9]
	podaci[2] = right | 0x0D;
 80016ee:	7bbb      	ldrb	r3, [r7, #14]
 80016f0:	f043 030d 	orr.w	r3, r3, #13
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	72bb      	strb	r3, [r7, #10]
	podaci[3] = right | 0x09;
 80016f8:	7bbb      	ldrb	r3, [r7, #14]
 80016fa:	f043 0309 	orr.w	r3, r3, #9
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, adresa<<1, podaci, 4, 100);
 8001702:	79bb      	ldrb	r3, [r7, #6]
 8001704:	b29b      	uxth	r3, r3
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	b299      	uxth	r1, r3
 800170a:	f107 0208 	add.w	r2, r7, #8
 800170e:	2364      	movs	r3, #100	@ 0x64
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2304      	movs	r3, #4
 8001714:	4803      	ldr	r0, [pc, #12]	@ (8001724 <lcd_podatak+0x68>)
 8001716:	f001 ff71 	bl	80035fc <HAL_I2C_Master_Transmit>
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000264 	.word	0x20000264

08001728 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t line, uint8_t addr) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	460a      	mov	r2, r1
 8001732:	71fb      	strb	r3, [r7, #7]
 8001734:	4613      	mov	r3, r2
 8001736:	71bb      	strb	r3, [r7, #6]
    if (line == 0) {
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d105      	bne.n	800174a <lcd_set_cursor+0x22>
        lcd_naredba(0x80, addr); // postavlja kursor na početak prve linije
 800173e:	79bb      	ldrb	r3, [r7, #6]
 8001740:	4619      	mov	r1, r3
 8001742:	2080      	movs	r0, #128	@ 0x80
 8001744:	f7ff ff84 	bl	8001650 <lcd_naredba>
    } else if (line == 1) {
        lcd_naredba(0xC0, addr); // postavlja kursor na početak druge linije
    }
}
 8001748:	e007      	b.n	800175a <lcd_set_cursor+0x32>
    } else if (line == 1) {
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d104      	bne.n	800175a <lcd_set_cursor+0x32>
        lcd_naredba(0xC0, addr); // postavlja kursor na početak druge linije
 8001750:	79bb      	ldrb	r3, [r7, #6]
 8001752:	4619      	mov	r1, r3
 8001754:	20c0      	movs	r0, #192	@ 0xc0
 8001756:	f7ff ff7b 	bl	8001650 <lcd_naredba>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b0a6      	sub	sp, #152	@ 0x98
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176a:	f000 febb 	bl	80024e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176e:	f000 faf9 	bl	8001d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001772:	f7ff fe09 	bl	8001388 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001776:	f7ff fe71 	bl	800145c <MX_I2C1_Init>
  MX_I2C2_Init();
 800177a:	f7ff fe9d 	bl	80014b8 <MX_I2C2_Init>
  MX_TIM2_Init();
 800177e:	f000 fd07 	bl	8002190 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001782:	f000 fe13 	bl	80023ac <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001786:	f000 fd5b 	bl	8002240 <MX_TIM6_Init>
  MX_ADC1_Init();
 800178a:	f7ff fd67 	bl	800125c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /********* LCD ADRESE *********/
  	uint8_t addr = 0x27;  // adresa LCD-a
 800178e:	2327      	movs	r3, #39	@ 0x27
 8001790:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
  	char sucelje = 0x38;  // naredba koja definira tip LCD-a (8-bitni, dvije linije)
 8001794:	2338      	movs	r3, #56	@ 0x38
 8001796:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    char initial0 = 0x03; // naredba za reesetiranje
 800179a:	2303      	movs	r3, #3
 800179c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    char bit_4 = 0x02;  // naredba za 4-bitni režim rada
 80017a0:	2302      	movs	r3, #2
 80017a2:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
    char ekran0 = 0x00;  // naredba za brisanje ekrana
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
    char ekran1 = 0x01;  // naredba za pomicanje kursora
 80017ac:	2301      	movs	r3, #1
 80017ae:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    char kursor = 0x04;  // naredba za kontrolu kursora
 80017b2:	2304      	movs	r3, #4
 80017b4:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
    char ukljuci = 0x0F;  // naredba za uključenje LCD-a
 80017b8:	230f      	movs	r3, #15
 80017ba:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
    char pocetak = 0x02;  // naredba za postavljanje kursora na početak (1. red, 1. pozicija)
 80017be:	2302      	movs	r3, #2
 80017c0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

    char prva = 0x80;  // postavljanje kursora na prvu liniju
 80017c4:	2380      	movs	r3, #128	@ 0x80
 80017c6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    char druga = 0xC0;  // postavljanje kursora na drugu liniju
 80017ca:	23c0      	movs	r3, #192	@ 0xc0
 80017cc:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
    char str0[16] = "";  // polje za prvi red
 80017d0:	2300      	movs	r3, #0
 80017d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80017d4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
  	char str1[16] = "";  // polje za drugi red
 80017e0:	2300      	movs	r3, #0
 80017e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80017e4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
    uint8_t i;
    /******** LCD ADRESE *******/


    /************ LCD INICIJALIZACIJA *************************/
       HAL_Delay(15);
 80017f0:	200f      	movs	r0, #15
 80017f2:	f000 fee9 	bl	80025c8 <HAL_Delay>
       lcd_naredba(initial0,addr);  // slanje 0x03 kako bi se LCD resetirao u 8-bitni mod
 80017f6:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 80017fa:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff25 	bl	8001650 <lcd_naredba>
       HAL_Delay(5);
 8001806:	2005      	movs	r0, #5
 8001808:	f000 fede 	bl	80025c8 <HAL_Delay>
       lcd_naredba(initial0,addr);  // ponovo slanje
 800180c:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8001810:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff1a 	bl	8001650 <lcd_naredba>
       HAL_Delay(1);
 800181c:	2001      	movs	r0, #1
 800181e:	f000 fed3 	bl	80025c8 <HAL_Delay>
       lcd_naredba(initial0,addr);  // ponovo slanje
 8001822:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8001826:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff0f 	bl	8001650 <lcd_naredba>
       HAL_Delay(1);
 8001832:	2001      	movs	r0, #1
 8001834:	f000 fec8 	bl	80025c8 <HAL_Delay>

       lcd_naredba(bit_4,addr);  // slanje 0x02 za prelazak u 4-bitni mod
 8001838:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 800183c:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff04 	bl	8001650 <lcd_naredba>
       lcd_naredba(sucelje,addr);  // postavljanje sučelja
 8001848:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 800184c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fefc 	bl	8001650 <lcd_naredba>
       lcd_naredba(ekran1,addr);
 8001858:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 800185c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fef4 	bl	8001650 <lcd_naredba>
       lcd_naredba(ekran0,addr);
 8001868:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 800186c:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff feec 	bl	8001650 <lcd_naredba>
       lcd_naredba(ekran0,addr);
 8001878:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 800187c:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8001880:	4611      	mov	r1, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fee4 	bl	8001650 <lcd_naredba>
       lcd_naredba(ekran1,addr);	// proces brisanja zaslona
 8001888:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 800188c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fedc 	bl	8001650 <lcd_naredba>
       lcd_naredba(kursor,addr);	// namještanje kursora
 8001898:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 800189c:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80018a0:	4611      	mov	r1, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fed4 	bl	8001650 <lcd_naredba>
       lcd_naredba(ukljuci,addr);	// uključivanje ekrana, kursora i treptanja kursora
 80018a8:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 80018ac:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fecc 	bl	8001650 <lcd_naredba>

       HAL_Delay(5);
 80018b8:	2005      	movs	r0, #5
 80018ba:	f000 fe85 	bl	80025c8 <HAL_Delay>

       lcd_naredba(pocetak,addr);	// postavljanje kursora na početnu poziciju
 80018be:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 80018c2:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fec1 	bl	8001650 <lcd_naredba>

       HAL_Delay(2);
 80018ce:	2002      	movs	r0, #2
 80018d0:	f000 fe7a 	bl	80025c8 <HAL_Delay>
       /**************************** LCD INICIJALIZACIJA *****************/


       lcd_naredba(ekran1,addr);	// šalje 0x01 kako bi se zaslon očistio
 80018d4:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 80018d8:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff feb6 	bl	8001650 <lcd_naredba>
       HAL_Delay(2);
 80018e4:	2002      	movs	r0, #2
 80018e6:	f000 fe6f 	bl	80025c8 <HAL_Delay>
       lcd_naredba(prva,addr);	// šalje 0x80 za postavljanje kursora na početak prve linije
 80018ea:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 80018ee:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80018f2:	4611      	mov	r1, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff feab 	bl	8001650 <lcd_naredba>
       HAL_Delay(2);
 80018fa:	2002      	movs	r0, #2
 80018fc:	f000 fe64 	bl	80025c8 <HAL_Delay>

       for(i = 0; i<sizeof(str0); i++){			// ispisivanje teksta iz polja za prvu liniju
 8001900:	2300      	movs	r3, #0
 8001902:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8001906:	e010      	b.n	800192a <main+0x1c6>
            lcd_podatak(str0[i], addr);			// slanje jednog po jednog podatka na LCD
 8001908:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800190c:	3398      	adds	r3, #152	@ 0x98
 800190e:	443b      	add	r3, r7
 8001910:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001914:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8001918:	4611      	mov	r1, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fece 	bl	80016bc <lcd_podatak>
       for(i = 0; i<sizeof(str0); i++){			// ispisivanje teksta iz polja za prvu liniju
 8001920:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001924:	3301      	adds	r3, #1
 8001926:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800192a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800192e:	2b0f      	cmp	r3, #15
 8001930:	d9ea      	bls.n	8001908 <main+0x1a4>
       }

       HAL_Delay(5);
 8001932:	2005      	movs	r0, #5
 8001934:	f000 fe48 	bl	80025c8 <HAL_Delay>
       lcd_naredba(druga,addr);		// šalje 0xC0 za postavljanje kursora na početak druge linije
 8001938:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 800193c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001940:	4611      	mov	r1, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fe84 	bl	8001650 <lcd_naredba>

       for(i = 0; i<sizeof(str1); i++){			// ispisivanje teksta iz polja na drugu liniju
 8001948:	2300      	movs	r3, #0
 800194a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800194e:	e010      	b.n	8001972 <main+0x20e>
            lcd_podatak(str1[i], addr);			// slanje jednoga po jednog podatka na LCD
 8001950:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001954:	3398      	adds	r3, #152	@ 0x98
 8001956:	443b      	add	r3, r7
 8001958:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800195c:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8001960:	4611      	mov	r1, r2
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff feaa 	bl	80016bc <lcd_podatak>
       for(i = 0; i<sizeof(str1); i++){			// ispisivanje teksta iz polja na drugu liniju
 8001968:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800196c:	3301      	adds	r3, #1
 800196e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8001972:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001976:	2b0f      	cmp	r3, #15
 8001978:	d9ea      	bls.n	8001950 <main+0x1ec>
       }



       /************************ BMP180 ********************/
       HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);  //pokretanje PWM-a na timeru 2
 800197a:	2104      	movs	r1, #4
 800197c:	48c1      	ldr	r0, [pc, #772]	@ (8001c84 <main+0x520>)
 800197e:	f003 fd3d 	bl	80053fc <HAL_TIM_PWM_Start>
       BMP180_Start();  // Inicijalizacija senzora
 8001982:	f7ff fc65 	bl	8001250 <BMP180_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(pwm_manual % 2 == 0 && pwm_konst % 2 == 0){
 8001986:	4bc0      	ldr	r3, [pc, #768]	@ (8001c88 <main+0x524>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 80ac 	bne.w	8001af0 <main+0x38c>
 8001998:	4bbc      	ldr	r3, [pc, #752]	@ (8001c8c <main+0x528>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f040 80a3 	bne.w	8001af0 <main+0x38c>
		  temperature = BMP180_GetTemp();  // očitavanje vrijednosti temperature sa senzora
 80019aa:	f7ff fbb3 	bl	8001114 <BMP180_GetTemp>
 80019ae:	eef0 7a40 	vmov.f32	s15, s0
 80019b2:	4bb7      	ldr	r3, [pc, #732]	@ (8001c90 <main+0x52c>)
 80019b4:	edc3 7a00 	vstr	s15, [r3]
		  value = (((temperature + 40) * 4095) / (85 + 40));  // izračun vrijednosti za PWM
 80019b8:	4bb5      	ldr	r3, [pc, #724]	@ (8001c90 <main+0x52c>)
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 8001c94 <main+0x530>
 80019c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019c6:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8001c98 <main+0x534>
 80019ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019ce:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 8001c9c <main+0x538>
 80019d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019da:	ee17 3a90 	vmov	r3, s15
 80019de:	b29a      	uxth	r2, r3
 80019e0:	4baf      	ldr	r3, [pc, #700]	@ (8001ca0 <main+0x53c>)
 80019e2:	801a      	strh	r2, [r3, #0]
		  dutyCycle = ((value * 1000) / 4095);
 80019e4:	4bae      	ldr	r3, [pc, #696]	@ (8001ca0 <main+0x53c>)
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	4aac      	ldr	r2, [pc, #688]	@ (8001ca4 <main+0x540>)
 80019f4:	fb82 1203 	smull	r1, r2, r2, r3
 80019f8:	441a      	add	r2, r3
 80019fa:	12d2      	asrs	r2, r2, #11
 80019fc:	17db      	asrs	r3, r3, #31
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	4ba9      	ldr	r3, [pc, #676]	@ (8001ca8 <main+0x544>)
 8001a04:	801a      	strh	r2, [r3, #0]
		  speed = ((value * 1600) / 4095);  // izračun brzine za prikaz na LCD-u
 8001a06:	4ba6      	ldr	r3, [pc, #664]	@ (8001ca0 <main+0x53c>)
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8001a10:	fb02 f303 	mul.w	r3, r2, r3
 8001a14:	4aa3      	ldr	r2, [pc, #652]	@ (8001ca4 <main+0x540>)
 8001a16:	fb82 1203 	smull	r1, r2, r2, r3
 8001a1a:	441a      	add	r2, r3
 8001a1c:	12d2      	asrs	r2, r2, #11
 8001a1e:	17db      	asrs	r3, r3, #31
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a2a:	4ba0      	ldr	r3, [pc, #640]	@ (8001cac <main+0x548>)
 8001a2c:	edc3 7a00 	vstr	s15, [r3]

		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, dutyCycle);  // postavljanje PWM vrije
 8001a30:	4b9d      	ldr	r3, [pc, #628]	@ (8001ca8 <main+0x544>)
 8001a32:	881a      	ldrh	r2, [r3, #0]
 8001a34:	4b93      	ldr	r3, [pc, #588]	@ (8001c84 <main+0x520>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	639a      	str	r2, [r3, #56]	@ 0x38

		  char temp_str[16];
		  sprintf(temp_str, "TEMP: %.2f C   ", temperature);	// prikaz temperature na LCD-u
 8001a3a:	4b95      	ldr	r3, [pc, #596]	@ (8001c90 <main+0x52c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fda2 	bl	8000588 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8001a4c:	4998      	ldr	r1, [pc, #608]	@ (8001cb0 <main+0x54c>)
 8001a4e:	f005 fa67 	bl	8006f20 <siprintf>
		  lcd_set_cursor(0, addr);       // Postavi kursor na prvu liniju
 8001a52:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8001a56:	4619      	mov	r1, r3
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f7ff fe65 	bl	8001728 <lcd_set_cursor>
		  for (uint8_t i = 0; i < 16; i++) {
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8001a64:	e010      	b.n	8001a88 <main+0x324>
			  	 lcd_podatak(temp_str[i], addr); // Ispisivanje jednog po jednog karaktera na LCD
 8001a66:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8001a6a:	3398      	adds	r3, #152	@ 0x98
 8001a6c:	443b      	add	r3, r7
 8001a6e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001a72:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fe1f 	bl	80016bc <lcd_podatak>
		  for (uint8_t i = 0; i < 16; i++) {
 8001a7e:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8001a82:	3301      	adds	r3, #1
 8001a84:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8001a88:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d9ea      	bls.n	8001a66 <main+0x302>
		  }

		  char speed_str[16];
		  sprintf(speed_str, "BRZINA: %.0f      ", speed);		// prikaz brzine ma LCD-u
 8001a90:	4b86      	ldr	r3, [pc, #536]	@ (8001cac <main+0x548>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fd77 	bl	8000588 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001aa2:	4984      	ldr	r1, [pc, #528]	@ (8001cb4 <main+0x550>)
 8001aa4:	f005 fa3c 	bl	8006f20 <siprintf>
		  lcd_set_cursor(1, addr);       // Postavi kursor na drugu liniju
 8001aa8:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8001aac:	4619      	mov	r1, r3
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f7ff fe3a 	bl	8001728 <lcd_set_cursor>
		  for (uint8_t i = 0; i < 16; i++) {
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 8001aba:	e010      	b.n	8001ade <main+0x37a>
			  lcd_podatak(speed_str[i], addr); // Ispisivanje jednog po jednog karaktera na LCD
 8001abc:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8001ac0:	3398      	adds	r3, #152	@ 0x98
 8001ac2:	443b      	add	r3, r7
 8001ac4:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8001ac8:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fdf4 	bl	80016bc <lcd_podatak>
		  for (uint8_t i = 0; i < 16; i++) {
 8001ad4:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 8001ade:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8001ae2:	2b0f      	cmp	r3, #15
 8001ae4:	d9ea      	bls.n	8001abc <main+0x358>
		  }

		  HAL_Delay(2000);
 8001ae6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001aea:	f000 fd6d 	bl	80025c8 <HAL_Delay>
	  if(pwm_manual % 2 == 0 && pwm_konst % 2 == 0){
 8001aee:	e134      	b.n	8001d5a <main+0x5f6>

	  	  }else if(pwm_manual % 2 == 1){
 8001af0:	4b65      	ldr	r3, [pc, #404]	@ (8001c88 <main+0x524>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	f040 8096 	bne.w	8001c2e <main+0x4ca>

	  		  HAL_ADC_Start(&hadc1);
 8001b02:	486d      	ldr	r0, [pc, #436]	@ (8001cb8 <main+0x554>)
 8001b04:	f000 fdc8 	bl	8002698 <HAL_ADC_Start>
	  		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);  // pokretanje ADC-a
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	486a      	ldr	r0, [pc, #424]	@ (8001cb8 <main+0x554>)
 8001b0e:	f000 fe95 	bl	800283c <HAL_ADC_PollForConversion>
	  		  rawValue = HAL_ADC_GetValue(&hadc1);		// čitanje vrijednosti s analognog ulaza
 8001b12:	4869      	ldr	r0, [pc, #420]	@ (8001cb8 <main+0x554>)
 8001b14:	f000 ff1d 	bl	8002952 <HAL_ADC_GetValue>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	4b67      	ldr	r3, [pc, #412]	@ (8001cbc <main+0x558>)
 8001b1e:	801a      	strh	r2, [r3, #0]
	  		  pwmValue = (rawValue * __HAL_TIM_GET_AUTORELOAD(&htim2)) / 4095;	// proračun pwm vrijednosti iz vrijednosti analognog ulaza
 8001b20:	4b66      	ldr	r3, [pc, #408]	@ (8001cbc <main+0x558>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b57      	ldr	r3, [pc, #348]	@ (8001c84 <main+0x520>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2c:	fb03 f202 	mul.w	r2, r3, r2
 8001b30:	4b63      	ldr	r3, [pc, #396]	@ (8001cc0 <main+0x55c>)
 8001b32:	fba3 1302 	umull	r1, r3, r3, r2
 8001b36:	1ad2      	subs	r2, r2, r3
 8001b38:	0852      	lsrs	r2, r2, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	0adb      	lsrs	r3, r3, #11
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	4b60      	ldr	r3, [pc, #384]	@ (8001cc4 <main+0x560>)
 8001b42:	801a      	strh	r2, [r3, #0]
	  		  speed = ((rawValue * 1600) / 4095);
 8001b44:	4b5d      	ldr	r3, [pc, #372]	@ (8001cbc <main+0x558>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8001b4e:	fb02 f303 	mul.w	r3, r2, r3
 8001b52:	4a54      	ldr	r2, [pc, #336]	@ (8001ca4 <main+0x540>)
 8001b54:	fb82 1203 	smull	r1, r2, r2, r3
 8001b58:	441a      	add	r2, r3
 8001b5a:	12d2      	asrs	r2, r2, #11
 8001b5c:	17db      	asrs	r3, r3, #31
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b68:	4b50      	ldr	r3, [pc, #320]	@ (8001cac <main+0x548>)
 8001b6a:	edc3 7a00 	vstr	s15, [r3]

	  		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwmValue);	// postavljanje PWm vrijednosti
 8001b6e:	4b55      	ldr	r3, [pc, #340]	@ (8001cc4 <main+0x560>)
 8001b70:	881a      	ldrh	r2, [r3, #0]
 8001b72:	4b44      	ldr	r3, [pc, #272]	@ (8001c84 <main+0x520>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	639a      	str	r2, [r3, #56]	@ 0x38

	  		  char text_str[16];
	  		  sprintf(text_str, "Manualni mod    ", speed);
 8001b78:	4b4c      	ldr	r3, [pc, #304]	@ (8001cac <main+0x548>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fd03 	bl	8000588 <__aeabi_f2d>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001b8a:	494f      	ldr	r1, [pc, #316]	@ (8001cc8 <main+0x564>)
 8001b8c:	f005 f9c8 	bl	8006f20 <siprintf>
	  		  lcd_set_cursor(0, addr);		// postavi kursor na prvu liniju
 8001b90:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8001b94:	4619      	mov	r1, r3
 8001b96:	2000      	movs	r0, #0
 8001b98:	f7ff fdc6 	bl	8001728 <lcd_set_cursor>
	  		  for (uint8_t i = 0; i < 16; i++) {
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
 8001ba2:	e010      	b.n	8001bc6 <main+0x462>
	  			  lcd_podatak(text_str[i], addr); // ispis jednog po jednog karaktera na LCD
 8001ba4:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8001ba8:	3398      	adds	r3, #152	@ 0x98
 8001baa:	443b      	add	r3, r7
 8001bac:	f813 3c64 	ldrb.w	r3, [r3, #-100]
 8001bb0:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fd80 	bl	80016bc <lcd_podatak>
	  		  for (uint8_t i = 0; i < 16; i++) {
 8001bbc:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
 8001bc6:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8001bca:	2b0f      	cmp	r3, #15
 8001bcc:	d9ea      	bls.n	8001ba4 <main+0x440>
	  		  }

	  		  char speed_str[16];
	  		  sprintf(speed_str, "Brzina: %.0f    ", speed);		// prikaz brzine na LCD-u
 8001bce:	4b37      	ldr	r3, [pc, #220]	@ (8001cac <main+0x548>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fcd8 	bl	8000588 <__aeabi_f2d>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001be0:	493a      	ldr	r1, [pc, #232]	@ (8001ccc <main+0x568>)
 8001be2:	f005 f99d 	bl	8006f20 <siprintf>
	  		  lcd_set_cursor(1, addr);       // postavi kursor na drugu liniju
 8001be6:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8001bea:	4619      	mov	r1, r3
 8001bec:	2001      	movs	r0, #1
 8001bee:	f7ff fd9b 	bl	8001728 <lcd_set_cursor>
	  		  for (uint8_t i = 0; i < 16; i++) {
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 8001bf8:	e010      	b.n	8001c1c <main+0x4b8>
	  			  lcd_podatak(speed_str[i], addr); 	// ispis jednog po jednog karaktera na LC
 8001bfa:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8001bfe:	3398      	adds	r3, #152	@ 0x98
 8001c00:	443b      	add	r3, r7
 8001c02:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8001c06:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fd55 	bl	80016bc <lcd_podatak>
	  		  for (uint8_t i = 0; i < 16; i++) {
 8001c12:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8001c16:	3301      	adds	r3, #1
 8001c18:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 8001c1c:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	d9ea      	bls.n	8001bfa <main+0x496>
	  		  }

	  		  HAL_Delay(2000);
 8001c24:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c28:	f000 fcce 	bl	80025c8 <HAL_Delay>
 8001c2c:	e6ab      	b.n	8001986 <main+0x222>

	  	  	  }else if(pwm_konst % 2 == 1){
 8001c2e:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <main+0x528>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	f47f aea3 	bne.w	8001986 <main+0x222>

	  	  		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 500);	// postavljanje fiksne vrijednosti PWM-a
 8001c40:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <main+0x520>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001c48:	639a      	str	r2, [r3, #56]	@ 0x38
	  	  		  temperature = BMP180_GetTemp();		// očitanje temperature sa senzora
 8001c4a:	f7ff fa63 	bl	8001114 <BMP180_GetTemp>
 8001c4e:	eef0 7a40 	vmov.f32	s15, s0
 8001c52:	4b0f      	ldr	r3, [pc, #60]	@ (8001c90 <main+0x52c>)
 8001c54:	edc3 7a00 	vstr	s15, [r3]
	  	  		  char text_str[16];
	  	  		  sprintf(text_str, "Konstantni mod    ", speed);
 8001c58:	4b14      	ldr	r3, [pc, #80]	@ (8001cac <main+0x548>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc93 	bl	8000588 <__aeabi_f2d>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	f107 0014 	add.w	r0, r7, #20
 8001c6a:	4919      	ldr	r1, [pc, #100]	@ (8001cd0 <main+0x56c>)
 8001c6c:	f005 f958 	bl	8006f20 <siprintf>
	  	  		  lcd_set_cursor(0, addr);
 8001c70:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8001c74:	4619      	mov	r1, r3
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff fd56 	bl	8001728 <lcd_set_cursor>
	  	  		  for (uint8_t i = 0; i < 16; i++) {
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
 8001c82:	e038      	b.n	8001cf6 <main+0x592>
 8001c84:	20000324 	.word	0x20000324
 8001c88:	2000030d 	.word	0x2000030d
 8001c8c:	2000030e 	.word	0x2000030e
 8001c90:	20000314 	.word	0x20000314
 8001c94:	42200000 	.word	0x42200000
 8001c98:	457ff000 	.word	0x457ff000
 8001c9c:	42fa0000 	.word	0x42fa0000
 8001ca0:	20000318 	.word	0x20000318
 8001ca4:	80080081 	.word	0x80080081
 8001ca8:	2000031a 	.word	0x2000031a
 8001cac:	2000031c 	.word	0x2000031c
 8001cb0:	08009190 	.word	0x08009190
 8001cb4:	080091a0 	.word	0x080091a0
 8001cb8:	2000021c 	.word	0x2000021c
 8001cbc:	20000310 	.word	0x20000310
 8001cc0:	00100101 	.word	0x00100101
 8001cc4:	20000312 	.word	0x20000312
 8001cc8:	080091b4 	.word	0x080091b4
 8001ccc:	080091c8 	.word	0x080091c8
 8001cd0:	080091dc 	.word	0x080091dc
	  	  			  lcd_podatak(text_str[i], addr);
 8001cd4:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8001cd8:	3398      	adds	r3, #152	@ 0x98
 8001cda:	443b      	add	r3, r7
 8001cdc:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8001ce0:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fce8 	bl	80016bc <lcd_podatak>
	  	  		  for (uint8_t i = 0; i < 16; i++) {
 8001cec:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
 8001cf6:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8001cfa:	2b0f      	cmp	r3, #15
 8001cfc:	d9ea      	bls.n	8001cd4 <main+0x570>
	  	  		  }
	  	  		  char temp_str[16];
	  	  		  sprintf(temp_str, "TEMP: %.2f C    ", temperature);	// ispis temperature na LCD-u
 8001cfe:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <main+0x5f8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fc40 	bl	8000588 <__aeabi_f2d>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	1d38      	adds	r0, r7, #4
 8001d0e:	4914      	ldr	r1, [pc, #80]	@ (8001d60 <main+0x5fc>)
 8001d10:	f005 f906 	bl	8006f20 <siprintf>
	  	  		  lcd_set_cursor(1, addr);
 8001d14:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8001d18:	4619      	mov	r1, r3
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f7ff fd04 	bl	8001728 <lcd_set_cursor>
	  	  		  for (uint8_t i = 0; i < 16; i++) {
 8001d20:	2300      	movs	r3, #0
 8001d22:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 8001d26:	e010      	b.n	8001d4a <main+0x5e6>
	  	  			  lcd_podatak(temp_str[i], addr);
 8001d28:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 8001d2c:	3398      	adds	r3, #152	@ 0x98
 8001d2e:	443b      	add	r3, r7
 8001d30:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 8001d34:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8001d38:	4611      	mov	r1, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fcbe 	bl	80016bc <lcd_podatak>
	  	  		  for (uint8_t i = 0; i < 16; i++) {
 8001d40:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 8001d44:	3301      	adds	r3, #1
 8001d46:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 8001d4a:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 8001d4e:	2b0f      	cmp	r3, #15
 8001d50:	d9ea      	bls.n	8001d28 <main+0x5c4>
	  	  		  }

	  	  		  HAL_Delay(2000);
 8001d52:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d56:	f000 fc37 	bl	80025c8 <HAL_Delay>
	  if(pwm_manual % 2 == 0 && pwm_konst % 2 == 0){
 8001d5a:	e614      	b.n	8001986 <main+0x222>
 8001d5c:	20000314 	.word	0x20000314
 8001d60:	080091f0 	.word	0x080091f0

08001d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b094      	sub	sp, #80	@ 0x50
 8001d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d6a:	f107 031c 	add.w	r3, r7, #28
 8001d6e:	2234      	movs	r2, #52	@ 0x34
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f005 f937 	bl	8006fe6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d78:	f107 0308 	add.w	r3, r7, #8
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d88:	2300      	movs	r3, #0
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	4b23      	ldr	r3, [pc, #140]	@ (8001e1c <SystemClock_Config+0xb8>)
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	4a22      	ldr	r2, [pc, #136]	@ (8001e1c <SystemClock_Config+0xb8>)
 8001d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d96:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d98:	4b20      	ldr	r3, [pc, #128]	@ (8001e1c <SystemClock_Config+0xb8>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001da4:	2300      	movs	r3, #0
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e20 <SystemClock_Config+0xbc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001db0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e20 <SystemClock_Config+0xbc>)
 8001db2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b19      	ldr	r3, [pc, #100]	@ (8001e20 <SystemClock_Config+0xbc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dcc:	2310      	movs	r3, #16
 8001dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd4:	f107 031c 	add.w	r3, r7, #28
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f002 ff33 	bl	8004c44 <HAL_RCC_OscConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001de4:	f000 f886 	bl	8001ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de8:	230f      	movs	r3, #15
 8001dea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001dfc:	f107 0308 	add.w	r3, r7, #8
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 fc5a 	bl	80046bc <HAL_RCC_ClockConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001e0e:	f000 f871 	bl	8001ef4 <Error_Handler>
  }
}
 8001e12:	bf00      	nop
 8001e14:	3750      	adds	r7, #80	@ 0x50
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40007000 	.word	0x40007000

08001e24 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_8 && debounce_flag == 0) {  // provjera je li pritisnuto tipkalo na pinu PC8
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e34:	d10a      	bne.n	8001e4c <HAL_GPIO_EXTI_Callback+0x28>
 8001e36:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d105      	bne.n	8001e4c <HAL_GPIO_EXTI_Callback+0x28>
        debounce_flag = 1; 		// postavlja zastavicu da se spriječi višestruko aktiviranje
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
        HAL_TIM_Base_Start_IT(&htim6); // pokreni TIM6 za otklanjanje bouncinga
 8001e46:	480b      	ldr	r0, [pc, #44]	@ (8001e74 <HAL_GPIO_EXTI_Callback+0x50>)
 8001e48:	f003 f9ea 	bl	8005220 <HAL_TIM_Base_Start_IT>
    }
    if (GPIO_Pin == GPIO_PIN_4 && debounce_flag == 0) {		// provjera je li pritisnuto tipkalo na pinu PA4
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	2b10      	cmp	r3, #16
 8001e50:	d10a      	bne.n	8001e68 <HAL_GPIO_EXTI_Callback+0x44>
 8001e52:	4b07      	ldr	r3, [pc, #28]	@ (8001e70 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d105      	bne.n	8001e68 <HAL_GPIO_EXTI_Callback+0x44>
    	debounce_flag = 1; 		// postavlja zastavicu da se spriječi višestruko aktiviranje
 8001e5c:	4b04      	ldr	r3, [pc, #16]	@ (8001e70 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
    	HAL_TIM_Base_Start_IT(&htim6); 		// pokreni TIM6 za otklanjanje bouncinga
 8001e62:	4804      	ldr	r0, [pc, #16]	@ (8001e74 <HAL_GPIO_EXTI_Callback+0x50>)
 8001e64:	f003 f9dc 	bl	8005220 <HAL_TIM_Base_Start_IT>
    }
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	2000030c 	.word	0x2000030c
 8001e74:	2000036c 	.word	0x2000036c

08001e78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) { // provjerite je li TIM6 generirao prekid
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a14      	ldr	r2, [pc, #80]	@ (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d122      	bne.n	8001ed0 <HAL_TIM_PeriodElapsedCallback+0x58>
        HAL_TIM_Base_Stop_IT(&htim6); // zaustavi TIM6
 8001e8a:	4814      	ldr	r0, [pc, #80]	@ (8001edc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001e8c:	f003 fa38 	bl	8005300 <HAL_TIM_Base_Stop_IT>
        debounce_flag = 0; // resetiraj zastavicu za debounce kako bi se omogućilo ponovno aktiviranje prekida
 8001e90:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]

        // provjeri je li tipkalo još uvijek pritisnuto
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_RESET) { // Ako je tipkalo pritisnuto
 8001e96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e9a:	4812      	ldr	r0, [pc, #72]	@ (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001e9c:	f001 fa3a 	bl	8003314 <HAL_GPIO_ReadPin>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <HAL_TIM_PeriodElapsedCallback+0x3c>
            pwm_manual++;		// povećaj brojač za manualni mod
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	3301      	adds	r3, #1
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001eb2:	701a      	strb	r2, [r3, #0]
        }

        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET){
 8001eb4:	2110      	movs	r1, #16
 8001eb6:	480d      	ldr	r0, [pc, #52]	@ (8001eec <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001eb8:	f001 fa2c 	bl	8003314 <HAL_GPIO_ReadPin>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_TIM_PeriodElapsedCallback+0x58>
        	pwm_konst++;		// povečaj brojač za konstantni mod
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	3301      	adds	r3, #1
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	4b08      	ldr	r3, [pc, #32]	@ (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001ece:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40001000 	.word	0x40001000
 8001edc:	2000036c 	.word	0x2000036c
 8001ee0:	2000030c 	.word	0x2000030c
 8001ee4:	40020800 	.word	0x40020800
 8001ee8:	2000030d 	.word	0x2000030d
 8001eec:	40020000 	.word	0x40020000
 8001ef0:	2000030e 	.word	0x2000030e

08001ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef8:	b672      	cpsid	i
}
 8001efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1){
 8001efc:	bf00      	nop
 8001efe:	e7fd      	b.n	8001efc <Error_Handler+0x8>

08001f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <HAL_MspInit+0x4c>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001f4c <HAL_MspInit+0x4c>)
 8001f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f16:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <HAL_MspInit+0x4c>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <HAL_MspInit+0x4c>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	4a08      	ldr	r2, [pc, #32]	@ (8001f4c <HAL_MspInit+0x4c>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_MspInit+0x4c>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <NMI_Handler+0x4>

08001f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <HardFault_Handler+0x4>

08001f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <MemManage_Handler+0x4>

08001f68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <BusFault_Handler+0x4>

08001f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <UsageFault_Handler+0x4>

08001f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa6:	f000 faef 	bl	8002588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}

08001fae <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001fb2:	2010      	movs	r0, #16
 8001fb4:	f001 f9c6 	bl	8003344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001fc0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001fc4:	f001 f9be 	bl	8003344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fd0:	4802      	ldr	r0, [pc, #8]	@ (8001fdc <TIM6_DAC_IRQHandler+0x10>)
 8001fd2:	f003 fadb 	bl	800558c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	2000036c 	.word	0x2000036c

08001fe0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return 1;
 8001fe4:	2301      	movs	r3, #1
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <_kill>:

int _kill(int pid, int sig)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ffa:	f005 f847 	bl	800708c <__errno>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2216      	movs	r2, #22
 8002002:	601a      	str	r2, [r3, #0]
  return -1;
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <_exit>:

void _exit (int status)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002018:	f04f 31ff 	mov.w	r1, #4294967295
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ffe7 	bl	8001ff0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002022:	bf00      	nop
 8002024:	e7fd      	b.n	8002022 <_exit+0x12>

08002026 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	e00a      	b.n	800204e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002038:	f3af 8000 	nop.w
 800203c:	4601      	mov	r1, r0
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	60ba      	str	r2, [r7, #8]
 8002044:	b2ca      	uxtb	r2, r1
 8002046:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	3301      	adds	r3, #1
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	dbf0      	blt.n	8002038 <_read+0x12>
  }

  return len;
 8002056:	687b      	ldr	r3, [r7, #4]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	e009      	b.n	8002086 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	60ba      	str	r2, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	3301      	adds	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	429a      	cmp	r2, r3
 800208c:	dbf1      	blt.n	8002072 <_write+0x12>
  }
  return len;
 800208e:	687b      	ldr	r3, [r7, #4]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <_close>:

int _close(int file)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020c0:	605a      	str	r2, [r3, #4]
  return 0;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_isatty>:

int _isatty(int file)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020d8:	2301      	movs	r3, #1
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002108:	4a14      	ldr	r2, [pc, #80]	@ (800215c <_sbrk+0x5c>)
 800210a:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <_sbrk+0x60>)
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002114:	4b13      	ldr	r3, [pc, #76]	@ (8002164 <_sbrk+0x64>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d102      	bne.n	8002122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800211c:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <_sbrk+0x64>)
 800211e:	4a12      	ldr	r2, [pc, #72]	@ (8002168 <_sbrk+0x68>)
 8002120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002122:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <_sbrk+0x64>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	429a      	cmp	r2, r3
 800212e:	d207      	bcs.n	8002140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002130:	f004 ffac 	bl	800708c <__errno>
 8002134:	4603      	mov	r3, r0
 8002136:	220c      	movs	r2, #12
 8002138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	e009      	b.n	8002154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002140:	4b08      	ldr	r3, [pc, #32]	@ (8002164 <_sbrk+0x64>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002146:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <_sbrk+0x64>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	4a05      	ldr	r2, [pc, #20]	@ (8002164 <_sbrk+0x64>)
 8002150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002152:	68fb      	ldr	r3, [r7, #12]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20020000 	.word	0x20020000
 8002160:	00000400 	.word	0x00000400
 8002164:	20000320 	.word	0x20000320
 8002168:	20000550 	.word	0x20000550

0800216c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002170:	4b06      	ldr	r3, [pc, #24]	@ (800218c <SystemInit+0x20>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002176:	4a05      	ldr	r2, [pc, #20]	@ (800218c <SystemInit+0x20>)
 8002178:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800217c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	@ 0x28
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002196:	f107 0320 	add.w	r3, r7, #32
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]
 80021ac:	611a      	str	r2, [r3, #16]
 80021ae:	615a      	str	r2, [r3, #20]
 80021b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021b2:	4b22      	ldr	r3, [pc, #136]	@ (800223c <MX_TIM2_Init+0xac>)
 80021b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80021ba:	4b20      	ldr	r3, [pc, #128]	@ (800223c <MX_TIM2_Init+0xac>)
 80021bc:	220f      	movs	r2, #15
 80021be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c0:	4b1e      	ldr	r3, [pc, #120]	@ (800223c <MX_TIM2_Init+0xac>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80021c6:	4b1d      	ldr	r3, [pc, #116]	@ (800223c <MX_TIM2_Init+0xac>)
 80021c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ce:	4b1b      	ldr	r3, [pc, #108]	@ (800223c <MX_TIM2_Init+0xac>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d4:	4b19      	ldr	r3, [pc, #100]	@ (800223c <MX_TIM2_Init+0xac>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021da:	4818      	ldr	r0, [pc, #96]	@ (800223c <MX_TIM2_Init+0xac>)
 80021dc:	f003 f8bf 	bl	800535e <HAL_TIM_PWM_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80021e6:	f7ff fe85 	bl	8001ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021f2:	f107 0320 	add.w	r3, r7, #32
 80021f6:	4619      	mov	r1, r3
 80021f8:	4810      	ldr	r0, [pc, #64]	@ (800223c <MX_TIM2_Init+0xac>)
 80021fa:	f003 fe23 	bl	8005e44 <HAL_TIMEx_MasterConfigSynchronization>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002204:	f7ff fe76 	bl	8001ef4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002208:	2360      	movs	r3, #96	@ 0x60
 800220a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	2204      	movs	r2, #4
 800221c:	4619      	mov	r1, r3
 800221e:	4807      	ldr	r0, [pc, #28]	@ (800223c <MX_TIM2_Init+0xac>)
 8002220:	f003 faa4 	bl	800576c <HAL_TIM_PWM_ConfigChannel>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800222a:	f7ff fe63 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800222e:	4803      	ldr	r0, [pc, #12]	@ (800223c <MX_TIM2_Init+0xac>)
 8002230:	f000 f884 	bl	800233c <HAL_TIM_MspPostInit>

}
 8002234:	bf00      	nop
 8002236:	3728      	adds	r7, #40	@ 0x28
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000324 	.word	0x20000324

08002240 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002246:	463b      	mov	r3, r7
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800224e:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <MX_TIM6_Init+0x64>)
 8002250:	4a15      	ldr	r2, [pc, #84]	@ (80022a8 <MX_TIM6_Init+0x68>)
 8002252:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8002254:	4b13      	ldr	r3, [pc, #76]	@ (80022a4 <MX_TIM6_Init+0x64>)
 8002256:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800225a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225c:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <MX_TIM6_Init+0x64>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8002262:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <MX_TIM6_Init+0x64>)
 8002264:	2263      	movs	r2, #99	@ 0x63
 8002266:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002268:	4b0e      	ldr	r3, [pc, #56]	@ (80022a4 <MX_TIM6_Init+0x64>)
 800226a:	2200      	movs	r2, #0
 800226c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800226e:	480d      	ldr	r0, [pc, #52]	@ (80022a4 <MX_TIM6_Init+0x64>)
 8002270:	f002 ff86 	bl	8005180 <HAL_TIM_Base_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800227a:	f7ff fe3b 	bl	8001ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002286:	463b      	mov	r3, r7
 8002288:	4619      	mov	r1, r3
 800228a:	4806      	ldr	r0, [pc, #24]	@ (80022a4 <MX_TIM6_Init+0x64>)
 800228c:	f003 fdda 	bl	8005e44 <HAL_TIMEx_MasterConfigSynchronization>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002296:	f7ff fe2d 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	2000036c 	.word	0x2000036c
 80022a8:	40001000 	.word	0x40001000

080022ac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022bc:	d10d      	bne.n	80022da <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	4a08      	ldr	r2, [pc, #32]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ce:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800

080022ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002334 <HAL_TIM_Base_MspInit+0x48>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d115      	bne.n	800232a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	4b0d      	ldr	r3, [pc, #52]	@ (8002338 <HAL_TIM_Base_MspInit+0x4c>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	4a0c      	ldr	r2, [pc, #48]	@ (8002338 <HAL_TIM_Base_MspInit+0x4c>)
 8002308:	f043 0310 	orr.w	r3, r3, #16
 800230c:	6413      	str	r3, [r2, #64]	@ 0x40
 800230e:	4b0a      	ldr	r3, [pc, #40]	@ (8002338 <HAL_TIM_Base_MspInit+0x4c>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2103      	movs	r1, #3
 800231e:	2036      	movs	r0, #54	@ 0x36
 8002320:	f000 fe2d 	bl	8002f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002324:	2036      	movs	r0, #54	@ 0x36
 8002326:	f000 fe46 	bl	8002fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40001000 	.word	0x40001000
 8002338:	40023800 	.word	0x40023800

0800233c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 030c 	add.w	r3, r7, #12
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800235c:	d11d      	bne.n	800239a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <HAL_TIM_MspPostInit+0x68>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	4a0f      	ldr	r2, [pc, #60]	@ (80023a4 <HAL_TIM_MspPostInit+0x68>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6313      	str	r3, [r2, #48]	@ 0x30
 800236e:	4b0d      	ldr	r3, [pc, #52]	@ (80023a4 <HAL_TIM_MspPostInit+0x68>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800237a:	2302      	movs	r3, #2
 800237c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800238a:	2301      	movs	r3, #1
 800238c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	4619      	mov	r1, r3
 8002394:	4804      	ldr	r0, [pc, #16]	@ (80023a8 <HAL_TIM_MspPostInit+0x6c>)
 8002396:	f000 fe29 	bl	8002fec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800239a:	bf00      	nop
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40020000 	.word	0x40020000

080023ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023b0:	4b11      	ldr	r3, [pc, #68]	@ (80023f8 <MX_USART2_UART_Init+0x4c>)
 80023b2:	4a12      	ldr	r2, [pc, #72]	@ (80023fc <MX_USART2_UART_Init+0x50>)
 80023b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80023b6:	4b10      	ldr	r3, [pc, #64]	@ (80023f8 <MX_USART2_UART_Init+0x4c>)
 80023b8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80023bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023be:	4b0e      	ldr	r3, [pc, #56]	@ (80023f8 <MX_USART2_UART_Init+0x4c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <MX_USART2_UART_Init+0x4c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	@ (80023f8 <MX_USART2_UART_Init+0x4c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023d0:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <MX_USART2_UART_Init+0x4c>)
 80023d2:	220c      	movs	r2, #12
 80023d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023d6:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <MX_USART2_UART_Init+0x4c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <MX_USART2_UART_Init+0x4c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023e2:	4805      	ldr	r0, [pc, #20]	@ (80023f8 <MX_USART2_UART_Init+0x4c>)
 80023e4:	f003 fdbe 	bl	8005f64 <HAL_UART_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023ee:	f7ff fd81 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200003b4 	.word	0x200003b4
 80023fc:	40004400 	.word	0x40004400

08002400 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	@ 0x28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a19      	ldr	r2, [pc, #100]	@ (8002484 <HAL_UART_MspInit+0x84>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d12b      	bne.n	800247a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	4b18      	ldr	r3, [pc, #96]	@ (8002488 <HAL_UART_MspInit+0x88>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	4a17      	ldr	r2, [pc, #92]	@ (8002488 <HAL_UART_MspInit+0x88>)
 800242c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002430:	6413      	str	r3, [r2, #64]	@ 0x40
 8002432:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <HAL_UART_MspInit+0x88>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <HAL_UART_MspInit+0x88>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	4a10      	ldr	r2, [pc, #64]	@ (8002488 <HAL_UART_MspInit+0x88>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6313      	str	r3, [r2, #48]	@ 0x30
 800244e:	4b0e      	ldr	r3, [pc, #56]	@ (8002488 <HAL_UART_MspInit+0x88>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800245a:	230c      	movs	r3, #12
 800245c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800246a:	2307      	movs	r3, #7
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	4619      	mov	r1, r3
 8002474:	4805      	ldr	r0, [pc, #20]	@ (800248c <HAL_UART_MspInit+0x8c>)
 8002476:	f000 fdb9 	bl	8002fec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800247a:	bf00      	nop
 800247c:	3728      	adds	r7, #40	@ 0x28
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40004400 	.word	0x40004400
 8002488:	40023800 	.word	0x40023800
 800248c:	40020000 	.word	0x40020000

08002490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002490:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002494:	f7ff fe6a 	bl	800216c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002498:	480c      	ldr	r0, [pc, #48]	@ (80024cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800249a:	490d      	ldr	r1, [pc, #52]	@ (80024d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800249c:	4a0d      	ldr	r2, [pc, #52]	@ (80024d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800249e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a0:	e002      	b.n	80024a8 <LoopCopyDataInit>

080024a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024a6:	3304      	adds	r3, #4

080024a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024ac:	d3f9      	bcc.n	80024a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ae:	4a0a      	ldr	r2, [pc, #40]	@ (80024d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024b0:	4c0a      	ldr	r4, [pc, #40]	@ (80024dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b4:	e001      	b.n	80024ba <LoopFillZerobss>

080024b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b8:	3204      	adds	r2, #4

080024ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024bc:	d3fb      	bcc.n	80024b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80024be:	f004 fdeb 	bl	8007098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024c2:	f7ff f94f 	bl	8001764 <main>
  bx  lr    
 80024c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80024d4:	080095a0 	.word	0x080095a0
  ldr r2, =_sbss
 80024d8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80024dc:	2000054c 	.word	0x2000054c

080024e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e0:	e7fe      	b.n	80024e0 <ADC_IRQHandler>
	...

080024e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002524 <HAL_Init+0x40>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002524 <HAL_Init+0x40>)
 80024ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <HAL_Init+0x40>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002524 <HAL_Init+0x40>)
 80024fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002500:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <HAL_Init+0x40>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a07      	ldr	r2, [pc, #28]	@ (8002524 <HAL_Init+0x40>)
 8002506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800250a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800250c:	2003      	movs	r0, #3
 800250e:	f000 fd2b 	bl	8002f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002512:	200f      	movs	r0, #15
 8002514:	f000 f808 	bl	8002528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002518:	f7ff fcf2 	bl	8001f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40023c00 	.word	0x40023c00

08002528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002530:	4b12      	ldr	r3, [pc, #72]	@ (800257c <HAL_InitTick+0x54>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b12      	ldr	r3, [pc, #72]	@ (8002580 <HAL_InitTick+0x58>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	4619      	mov	r1, r3
 800253a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800253e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002542:	fbb2 f3f3 	udiv	r3, r2, r3
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fd43 	bl	8002fd2 <HAL_SYSTICK_Config>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e00e      	b.n	8002574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b0f      	cmp	r3, #15
 800255a:	d80a      	bhi.n	8002572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800255c:	2200      	movs	r2, #0
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	f04f 30ff 	mov.w	r0, #4294967295
 8002564:	f000 fd0b 	bl	8002f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002568:	4a06      	ldr	r2, [pc, #24]	@ (8002584 <HAL_InitTick+0x5c>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	e000      	b.n	8002574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000000 	.word	0x20000000
 8002580:	20000008 	.word	0x20000008
 8002584:	20000004 	.word	0x20000004

08002588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800258c:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <HAL_IncTick+0x20>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <HAL_IncTick+0x24>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4413      	add	r3, r2
 8002598:	4a04      	ldr	r2, [pc, #16]	@ (80025ac <HAL_IncTick+0x24>)
 800259a:	6013      	str	r3, [r2, #0]
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000008 	.word	0x20000008
 80025ac:	200003fc 	.word	0x200003fc

080025b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return uwTick;
 80025b4:	4b03      	ldr	r3, [pc, #12]	@ (80025c4 <HAL_GetTick+0x14>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	200003fc 	.word	0x200003fc

080025c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d0:	f7ff ffee 	bl	80025b0 <HAL_GetTick>
 80025d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d005      	beq.n	80025ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025e2:	4b0a      	ldr	r3, [pc, #40]	@ (800260c <HAL_Delay+0x44>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4413      	add	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ee:	bf00      	nop
 80025f0:	f7ff ffde 	bl	80025b0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d8f7      	bhi.n	80025f0 <HAL_Delay+0x28>
  {
  }
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000008 	.word	0x20000008

08002610 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e033      	b.n	800268e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	d109      	bne.n	8002642 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe fe66 	bl	8001300 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b00      	cmp	r3, #0
 800264c:	d118      	bne.n	8002680 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002656:	f023 0302 	bic.w	r3, r3, #2
 800265a:	f043 0202 	orr.w	r2, r3, #2
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fab4 	bl	8002bd0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	f023 0303 	bic.w	r3, r3, #3
 8002676:	f043 0201 	orr.w	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	641a      	str	r2, [r3, #64]	@ 0x40
 800267e:	e001      	b.n	8002684 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800268c:	7bfb      	ldrb	r3, [r7, #15]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_Start+0x1a>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e0b2      	b.n	8002818 <HAL_ADC_Start+0x180>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d018      	beq.n	80026fa <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026d8:	4b52      	ldr	r3, [pc, #328]	@ (8002824 <HAL_ADC_Start+0x18c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a52      	ldr	r2, [pc, #328]	@ (8002828 <HAL_ADC_Start+0x190>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0c9a      	lsrs	r2, r3, #18
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80026ec:	e002      	b.n	80026f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f9      	bne.n	80026ee <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b01      	cmp	r3, #1
 8002706:	d17a      	bne.n	80027fe <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002732:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002746:	d106      	bne.n	8002756 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274c:	f023 0206 	bic.w	r2, r3, #6
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	645a      	str	r2, [r3, #68]	@ 0x44
 8002754:	e002      	b.n	800275c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002764:	4b31      	ldr	r3, [pc, #196]	@ (800282c <HAL_ADC_Start+0x194>)
 8002766:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002770:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 031f 	and.w	r3, r3, #31
 800277a:	2b00      	cmp	r3, #0
 800277c:	d12a      	bne.n	80027d4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2b      	ldr	r2, [pc, #172]	@ (8002830 <HAL_ADC_Start+0x198>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d015      	beq.n	80027b4 <HAL_ADC_Start+0x11c>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a29      	ldr	r2, [pc, #164]	@ (8002834 <HAL_ADC_Start+0x19c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d105      	bne.n	800279e <HAL_ADC_Start+0x106>
 8002792:	4b26      	ldr	r3, [pc, #152]	@ (800282c <HAL_ADC_Start+0x194>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a25      	ldr	r2, [pc, #148]	@ (8002838 <HAL_ADC_Start+0x1a0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d136      	bne.n	8002816 <HAL_ADC_Start+0x17e>
 80027a8:	4b20      	ldr	r3, [pc, #128]	@ (800282c <HAL_ADC_Start+0x194>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d130      	bne.n	8002816 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d129      	bne.n	8002816 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	e020      	b.n	8002816 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a15      	ldr	r2, [pc, #84]	@ (8002830 <HAL_ADC_Start+0x198>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d11b      	bne.n	8002816 <HAL_ADC_Start+0x17e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d114      	bne.n	8002816 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	e00b      	b.n	8002816 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	f043 0210 	orr.w	r2, r3, #16
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	f043 0201 	orr.w	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	20000000 	.word	0x20000000
 8002828:	431bde83 	.word	0x431bde83
 800282c:	40012300 	.word	0x40012300
 8002830:	40012000 	.word	0x40012000
 8002834:	40012100 	.word	0x40012100
 8002838:	40012200 	.word	0x40012200

0800283c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002858:	d113      	bne.n	8002882 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002868:	d10b      	bne.n	8002882 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	f043 0220 	orr.w	r2, r3, #32
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e063      	b.n	800294a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002882:	f7ff fe95 	bl	80025b0 <HAL_GetTick>
 8002886:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002888:	e021      	b.n	80028ce <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002890:	d01d      	beq.n	80028ce <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <HAL_ADC_PollForConversion+0x6c>
 8002898:	f7ff fe8a 	bl	80025b0 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d212      	bcs.n	80028ce <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d00b      	beq.n	80028ce <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	f043 0204 	orr.w	r2, r3, #4
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e03d      	b.n	800294a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d1d6      	bne.n	800288a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0212 	mvn.w	r2, #18
 80028e4:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d123      	bne.n	8002948 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002904:	2b00      	cmp	r3, #0
 8002906:	d11f      	bne.n	8002948 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002912:	2b00      	cmp	r3, #0
 8002914:	d006      	beq.n	8002924 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002920:	2b00      	cmp	r3, #0
 8002922:	d111      	bne.n	8002948 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002934:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d105      	bne.n	8002948 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	f043 0201 	orr.w	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x1c>
 8002984:	2302      	movs	r3, #2
 8002986:	e113      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x244>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b09      	cmp	r3, #9
 8002996:	d925      	bls.n	80029e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68d9      	ldr	r1, [r3, #12]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	3b1e      	subs	r3, #30
 80029ae:	2207      	movs	r2, #7
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43da      	mvns	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	400a      	ands	r2, r1
 80029bc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68d9      	ldr	r1, [r3, #12]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	4618      	mov	r0, r3
 80029d0:	4603      	mov	r3, r0
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4403      	add	r3, r0
 80029d6:	3b1e      	subs	r3, #30
 80029d8:	409a      	lsls	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	e022      	b.n	8002a2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6919      	ldr	r1, [r3, #16]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	4613      	mov	r3, r2
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	4413      	add	r3, r2
 80029f8:	2207      	movs	r2, #7
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43da      	mvns	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	400a      	ands	r2, r1
 8002a06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6919      	ldr	r1, [r3, #16]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	4618      	mov	r0, r3
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	4403      	add	r3, r0
 8002a20:	409a      	lsls	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d824      	bhi.n	8002a7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	3b05      	subs	r3, #5
 8002a44:	221f      	movs	r2, #31
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	400a      	ands	r2, r1
 8002a52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	4618      	mov	r0, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3b05      	subs	r3, #5
 8002a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a7a:	e04c      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b0c      	cmp	r3, #12
 8002a82:	d824      	bhi.n	8002ace <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	3b23      	subs	r3, #35	@ 0x23
 8002a96:	221f      	movs	r2, #31
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43da      	mvns	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	400a      	ands	r2, r1
 8002aa4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	3b23      	subs	r3, #35	@ 0x23
 8002ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	631a      	str	r2, [r3, #48]	@ 0x30
 8002acc:	e023      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	3b41      	subs	r3, #65	@ 0x41
 8002ae0:	221f      	movs	r2, #31
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	400a      	ands	r2, r1
 8002aee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	4618      	mov	r0, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	3b41      	subs	r3, #65	@ 0x41
 8002b0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b16:	4b29      	ldr	r3, [pc, #164]	@ (8002bbc <HAL_ADC_ConfigChannel+0x250>)
 8002b18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a28      	ldr	r2, [pc, #160]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x254>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d10f      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x1d8>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b12      	cmp	r3, #18
 8002b2a:	d10b      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x254>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d12b      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x23a>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1c      	ldr	r2, [pc, #112]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x258>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d003      	beq.n	8002b60 <HAL_ADC_ConfigChannel+0x1f4>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b11      	cmp	r3, #17
 8002b5e:	d122      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a11      	ldr	r2, [pc, #68]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x258>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d111      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b82:	4b11      	ldr	r3, [pc, #68]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x25c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a11      	ldr	r2, [pc, #68]	@ (8002bcc <HAL_ADC_ConfigChannel+0x260>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	0c9a      	lsrs	r2, r3, #18
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b98:	e002      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f9      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	40012300 	.word	0x40012300
 8002bc0:	40012000 	.word	0x40012000
 8002bc4:	10000012 	.word	0x10000012
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	431bde83 	.word	0x431bde83

08002bd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bd8:	4b79      	ldr	r3, [pc, #484]	@ (8002dc0 <ADC_Init+0x1f0>)
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6859      	ldr	r1, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	021a      	lsls	r2, r3, #8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6899      	ldr	r1, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c62:	4a58      	ldr	r2, [pc, #352]	@ (8002dc4 <ADC_Init+0x1f4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d022      	beq.n	8002cae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6899      	ldr	r1, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6899      	ldr	r1, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	e00f      	b.n	8002cce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ccc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0202 	bic.w	r2, r2, #2
 8002cdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6899      	ldr	r1, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	7e1b      	ldrb	r3, [r3, #24]
 8002ce8:	005a      	lsls	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01b      	beq.n	8002d34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d0a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002d1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6859      	ldr	r1, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	3b01      	subs	r3, #1
 8002d28:	035a      	lsls	r2, r3, #13
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	e007      	b.n	8002d44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d42:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002d52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	051a      	lsls	r2, r3, #20
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6899      	ldr	r1, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d86:	025a      	lsls	r2, r3, #9
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6899      	ldr	r1, [r3, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	029a      	lsls	r2, r3, #10
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	40012300 	.word	0x40012300
 8002dc4:	0f000001 	.word	0x0f000001

08002dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e0c <__NVIC_SetPriorityGrouping+0x44>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002de4:	4013      	ands	r3, r2
 8002de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dfa:	4a04      	ldr	r2, [pc, #16]	@ (8002e0c <__NVIC_SetPriorityGrouping+0x44>)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	60d3      	str	r3, [r2, #12]
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e14:	4b04      	ldr	r3, [pc, #16]	@ (8002e28 <__NVIC_GetPriorityGrouping+0x18>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	0a1b      	lsrs	r3, r3, #8
 8002e1a:	f003 0307 	and.w	r3, r3, #7
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	db0b      	blt.n	8002e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	f003 021f 	and.w	r2, r3, #31
 8002e44:	4907      	ldr	r1, [pc, #28]	@ (8002e64 <__NVIC_EnableIRQ+0x38>)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	e000e100 	.word	0xe000e100

08002e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	6039      	str	r1, [r7, #0]
 8002e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	db0a      	blt.n	8002e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	490c      	ldr	r1, [pc, #48]	@ (8002eb4 <__NVIC_SetPriority+0x4c>)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	0112      	lsls	r2, r2, #4
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e90:	e00a      	b.n	8002ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	4908      	ldr	r1, [pc, #32]	@ (8002eb8 <__NVIC_SetPriority+0x50>)
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	3b04      	subs	r3, #4
 8002ea0:	0112      	lsls	r2, r2, #4
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	761a      	strb	r2, [r3, #24]
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	e000e100 	.word	0xe000e100
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b089      	sub	sp, #36	@ 0x24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f1c3 0307 	rsb	r3, r3, #7
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	bf28      	it	cs
 8002eda:	2304      	movcs	r3, #4
 8002edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d902      	bls.n	8002eec <NVIC_EncodePriority+0x30>
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3b03      	subs	r3, #3
 8002eea:	e000      	b.n	8002eee <NVIC_EncodePriority+0x32>
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43da      	mvns	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	401a      	ands	r2, r3
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f04:	f04f 31ff 	mov.w	r1, #4294967295
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0e:	43d9      	mvns	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f14:	4313      	orrs	r3, r2
         );
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3724      	adds	r7, #36	@ 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f34:	d301      	bcc.n	8002f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f36:	2301      	movs	r3, #1
 8002f38:	e00f      	b.n	8002f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f64 <SysTick_Config+0x40>)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f42:	210f      	movs	r1, #15
 8002f44:	f04f 30ff 	mov.w	r0, #4294967295
 8002f48:	f7ff ff8e 	bl	8002e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f4c:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <SysTick_Config+0x40>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f52:	4b04      	ldr	r3, [pc, #16]	@ (8002f64 <SysTick_Config+0x40>)
 8002f54:	2207      	movs	r2, #7
 8002f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	e000e010 	.word	0xe000e010

08002f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ff29 	bl	8002dc8 <__NVIC_SetPriorityGrouping>
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	4603      	mov	r3, r0
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f90:	f7ff ff3e 	bl	8002e10 <__NVIC_GetPriorityGrouping>
 8002f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	6978      	ldr	r0, [r7, #20]
 8002f9c:	f7ff ff8e 	bl	8002ebc <NVIC_EncodePriority>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff5d 	bl	8002e68 <__NVIC_SetPriority>
}
 8002fae:	bf00      	nop
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff31 	bl	8002e2c <__NVIC_EnableIRQ>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ffa2 	bl	8002f24 <SysTick_Config>
 8002fe0:	4603      	mov	r3, r0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b089      	sub	sp, #36	@ 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	e165      	b.n	80032d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003008:	2201      	movs	r2, #1
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4013      	ands	r3, r2
 800301a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	429a      	cmp	r2, r3
 8003022:	f040 8154 	bne.w	80032ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b01      	cmp	r3, #1
 8003030:	d005      	beq.n	800303e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800303a:	2b02      	cmp	r3, #2
 800303c:	d130      	bne.n	80030a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	2203      	movs	r2, #3
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4013      	ands	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003074:	2201      	movs	r2, #1
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 0201 	and.w	r2, r3, #1
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d017      	beq.n	80030dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	2203      	movs	r2, #3
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d123      	bne.n	8003130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	08da      	lsrs	r2, r3, #3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3208      	adds	r2, #8
 80030f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	220f      	movs	r2, #15
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4013      	ands	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	08da      	lsrs	r2, r3, #3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3208      	adds	r2, #8
 800312a:	69b9      	ldr	r1, [r7, #24]
 800312c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	2203      	movs	r2, #3
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0203 	and.w	r2, r3, #3
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80ae 	beq.w	80032ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	4b5d      	ldr	r3, [pc, #372]	@ (80032ec <HAL_GPIO_Init+0x300>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317a:	4a5c      	ldr	r2, [pc, #368]	@ (80032ec <HAL_GPIO_Init+0x300>)
 800317c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003180:	6453      	str	r3, [r2, #68]	@ 0x44
 8003182:	4b5a      	ldr	r3, [pc, #360]	@ (80032ec <HAL_GPIO_Init+0x300>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800318e:	4a58      	ldr	r2, [pc, #352]	@ (80032f0 <HAL_GPIO_Init+0x304>)
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	089b      	lsrs	r3, r3, #2
 8003194:	3302      	adds	r3, #2
 8003196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	220f      	movs	r2, #15
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a4f      	ldr	r2, [pc, #316]	@ (80032f4 <HAL_GPIO_Init+0x308>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d025      	beq.n	8003206 <HAL_GPIO_Init+0x21a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a4e      	ldr	r2, [pc, #312]	@ (80032f8 <HAL_GPIO_Init+0x30c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01f      	beq.n	8003202 <HAL_GPIO_Init+0x216>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a4d      	ldr	r2, [pc, #308]	@ (80032fc <HAL_GPIO_Init+0x310>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d019      	beq.n	80031fe <HAL_GPIO_Init+0x212>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003300 <HAL_GPIO_Init+0x314>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <HAL_GPIO_Init+0x20e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003304 <HAL_GPIO_Init+0x318>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00d      	beq.n	80031f6 <HAL_GPIO_Init+0x20a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003308 <HAL_GPIO_Init+0x31c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d007      	beq.n	80031f2 <HAL_GPIO_Init+0x206>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a49      	ldr	r2, [pc, #292]	@ (800330c <HAL_GPIO_Init+0x320>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <HAL_GPIO_Init+0x202>
 80031ea:	2306      	movs	r3, #6
 80031ec:	e00c      	b.n	8003208 <HAL_GPIO_Init+0x21c>
 80031ee:	2307      	movs	r3, #7
 80031f0:	e00a      	b.n	8003208 <HAL_GPIO_Init+0x21c>
 80031f2:	2305      	movs	r3, #5
 80031f4:	e008      	b.n	8003208 <HAL_GPIO_Init+0x21c>
 80031f6:	2304      	movs	r3, #4
 80031f8:	e006      	b.n	8003208 <HAL_GPIO_Init+0x21c>
 80031fa:	2303      	movs	r3, #3
 80031fc:	e004      	b.n	8003208 <HAL_GPIO_Init+0x21c>
 80031fe:	2302      	movs	r3, #2
 8003200:	e002      	b.n	8003208 <HAL_GPIO_Init+0x21c>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <HAL_GPIO_Init+0x21c>
 8003206:	2300      	movs	r3, #0
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	f002 0203 	and.w	r2, r2, #3
 800320e:	0092      	lsls	r2, r2, #2
 8003210:	4093      	lsls	r3, r2
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003218:	4935      	ldr	r1, [pc, #212]	@ (80032f0 <HAL_GPIO_Init+0x304>)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	3302      	adds	r3, #2
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003226:	4b3a      	ldr	r3, [pc, #232]	@ (8003310 <HAL_GPIO_Init+0x324>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	43db      	mvns	r3, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4013      	ands	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800324a:	4a31      	ldr	r2, [pc, #196]	@ (8003310 <HAL_GPIO_Init+0x324>)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003250:	4b2f      	ldr	r3, [pc, #188]	@ (8003310 <HAL_GPIO_Init+0x324>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003274:	4a26      	ldr	r2, [pc, #152]	@ (8003310 <HAL_GPIO_Init+0x324>)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800327a:	4b25      	ldr	r3, [pc, #148]	@ (8003310 <HAL_GPIO_Init+0x324>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	43db      	mvns	r3, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4013      	ands	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800329e:	4a1c      	ldr	r2, [pc, #112]	@ (8003310 <HAL_GPIO_Init+0x324>)
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003310 <HAL_GPIO_Init+0x324>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032c8:	4a11      	ldr	r2, [pc, #68]	@ (8003310 <HAL_GPIO_Init+0x324>)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3301      	adds	r3, #1
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	2b0f      	cmp	r3, #15
 80032d8:	f67f ae96 	bls.w	8003008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032dc:	bf00      	nop
 80032de:	bf00      	nop
 80032e0:	3724      	adds	r7, #36	@ 0x24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40013800 	.word	0x40013800
 80032f4:	40020000 	.word	0x40020000
 80032f8:	40020400 	.word	0x40020400
 80032fc:	40020800 	.word	0x40020800
 8003300:	40020c00 	.word	0x40020c00
 8003304:	40021000 	.word	0x40021000
 8003308:	40021400 	.word	0x40021400
 800330c:	40021800 	.word	0x40021800
 8003310:	40013c00 	.word	0x40013c00

08003314 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	887b      	ldrh	r3, [r7, #2]
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	e001      	b.n	8003336 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003332:	2300      	movs	r3, #0
 8003334:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003336:	7bfb      	ldrb	r3, [r7, #15]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800334e:	4b08      	ldr	r3, [pc, #32]	@ (8003370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	4013      	ands	r3, r2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d006      	beq.n	8003368 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800335a:	4a05      	ldr	r2, [pc, #20]	@ (8003370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fe fd5e 	bl	8001e24 <HAL_GPIO_EXTI_Callback>
  }
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40013c00 	.word	0x40013c00

08003374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e12b      	b.n	80035de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fe f8ba 	bl	8001514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	@ 0x24
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033d8:	f001 fa62 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 80033dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4a81      	ldr	r2, [pc, #516]	@ (80035e8 <HAL_I2C_Init+0x274>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d807      	bhi.n	80033f8 <HAL_I2C_Init+0x84>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a80      	ldr	r2, [pc, #512]	@ (80035ec <HAL_I2C_Init+0x278>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	bf94      	ite	ls
 80033f0:	2301      	movls	r3, #1
 80033f2:	2300      	movhi	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e006      	b.n	8003406 <HAL_I2C_Init+0x92>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4a7d      	ldr	r2, [pc, #500]	@ (80035f0 <HAL_I2C_Init+0x27c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	bf94      	ite	ls
 8003400:	2301      	movls	r3, #1
 8003402:	2300      	movhi	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e0e7      	b.n	80035de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a78      	ldr	r2, [pc, #480]	@ (80035f4 <HAL_I2C_Init+0x280>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	0c9b      	lsrs	r3, r3, #18
 8003418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	430a      	orrs	r2, r1
 800342c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4a6a      	ldr	r2, [pc, #424]	@ (80035e8 <HAL_I2C_Init+0x274>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d802      	bhi.n	8003448 <HAL_I2C_Init+0xd4>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3301      	adds	r3, #1
 8003446:	e009      	b.n	800345c <HAL_I2C_Init+0xe8>
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	4a69      	ldr	r2, [pc, #420]	@ (80035f8 <HAL_I2C_Init+0x284>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	3301      	adds	r3, #1
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	430b      	orrs	r3, r1
 8003462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800346e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	495c      	ldr	r1, [pc, #368]	@ (80035e8 <HAL_I2C_Init+0x274>)
 8003478:	428b      	cmp	r3, r1
 800347a:	d819      	bhi.n	80034b0 <HAL_I2C_Init+0x13c>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1e59      	subs	r1, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	fbb1 f3f3 	udiv	r3, r1, r3
 800348a:	1c59      	adds	r1, r3, #1
 800348c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003490:	400b      	ands	r3, r1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <HAL_I2C_Init+0x138>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1e59      	subs	r1, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034aa:	e051      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 80034ac:	2304      	movs	r3, #4
 80034ae:	e04f      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d111      	bne.n	80034dc <HAL_I2C_Init+0x168>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1e58      	subs	r0, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	440b      	add	r3, r1
 80034c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	e012      	b.n	8003502 <HAL_I2C_Init+0x18e>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1e58      	subs	r0, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	0099      	lsls	r1, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f2:	3301      	adds	r3, #1
 80034f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_Init+0x196>
 8003506:	2301      	movs	r3, #1
 8003508:	e022      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10e      	bne.n	8003530 <HAL_I2C_Init+0x1bc>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1e58      	subs	r0, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6859      	ldr	r1, [r3, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	440b      	add	r3, r1
 8003520:	fbb0 f3f3 	udiv	r3, r0, r3
 8003524:	3301      	adds	r3, #1
 8003526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800352e:	e00f      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1e58      	subs	r0, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6859      	ldr	r1, [r3, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	0099      	lsls	r1, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	fbb0 f3f3 	udiv	r3, r0, r3
 8003546:	3301      	adds	r3, #1
 8003548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	6809      	ldr	r1, [r1, #0]
 8003554:	4313      	orrs	r3, r2
 8003556:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69da      	ldr	r2, [r3, #28]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800357e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6911      	ldr	r1, [r2, #16]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	68d2      	ldr	r2, [r2, #12]
 800358a:	4311      	orrs	r1, r2
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	430b      	orrs	r3, r1
 8003592:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	000186a0 	.word	0x000186a0
 80035ec:	001e847f 	.word	0x001e847f
 80035f0:	003d08ff 	.word	0x003d08ff
 80035f4:	431bde83 	.word	0x431bde83
 80035f8:	10624dd3 	.word	0x10624dd3

080035fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af02      	add	r7, sp, #8
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	607a      	str	r2, [r7, #4]
 8003606:	461a      	mov	r2, r3
 8003608:	460b      	mov	r3, r1
 800360a:	817b      	strh	r3, [r7, #10]
 800360c:	4613      	mov	r3, r2
 800360e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003610:	f7fe ffce 	bl	80025b0 <HAL_GetTick>
 8003614:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b20      	cmp	r3, #32
 8003620:	f040 80e0 	bne.w	80037e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	2319      	movs	r3, #25
 800362a:	2201      	movs	r2, #1
 800362c:	4970      	ldr	r1, [pc, #448]	@ (80037f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fe0e 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800363a:	2302      	movs	r3, #2
 800363c:	e0d3      	b.n	80037e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_I2C_Master_Transmit+0x50>
 8003648:	2302      	movs	r3, #2
 800364a:	e0cc      	b.n	80037e6 <HAL_I2C_Master_Transmit+0x1ea>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b01      	cmp	r3, #1
 8003660:	d007      	beq.n	8003672 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 0201 	orr.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003680:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2221      	movs	r2, #33	@ 0x21
 8003686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2210      	movs	r2, #16
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	893a      	ldrh	r2, [r7, #8]
 80036a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4a50      	ldr	r2, [pc, #320]	@ (80037f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80036b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036b4:	8979      	ldrh	r1, [r7, #10]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	6a3a      	ldr	r2, [r7, #32]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 fbc8 	bl	8003e50 <I2C_MasterRequestWrite>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e08d      	b.n	80037e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ca:	2300      	movs	r3, #0
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80036e0:	e066      	b.n	80037b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	6a39      	ldr	r1, [r7, #32]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 fecc 	bl	8004484 <I2C_WaitOnTXEFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00d      	beq.n	800370e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d107      	bne.n	800370a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003708:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e06b      	b.n	80037e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b04      	cmp	r3, #4
 800374a:	d11b      	bne.n	8003784 <HAL_I2C_Master_Transmit+0x188>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003750:	2b00      	cmp	r3, #0
 8003752:	d017      	beq.n	8003784 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	781a      	ldrb	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	6a39      	ldr	r1, [r7, #32]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 fec3 	bl	8004514 <I2C_WaitOnBTFFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00d      	beq.n	80037b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	2b04      	cmp	r3, #4
 800379a:	d107      	bne.n	80037ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e01a      	b.n	80037e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d194      	bne.n	80036e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	e000      	b.n	80037e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
  }
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	00100002 	.word	0x00100002
 80037f4:	ffff0000 	.word	0xffff0000

080037f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	4608      	mov	r0, r1
 8003802:	4611      	mov	r1, r2
 8003804:	461a      	mov	r2, r3
 8003806:	4603      	mov	r3, r0
 8003808:	817b      	strh	r3, [r7, #10]
 800380a:	460b      	mov	r3, r1
 800380c:	813b      	strh	r3, [r7, #8]
 800380e:	4613      	mov	r3, r2
 8003810:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003812:	f7fe fecd 	bl	80025b0 <HAL_GetTick>
 8003816:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b20      	cmp	r3, #32
 8003822:	f040 80d9 	bne.w	80039d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	2319      	movs	r3, #25
 800382c:	2201      	movs	r2, #1
 800382e:	496d      	ldr	r1, [pc, #436]	@ (80039e4 <HAL_I2C_Mem_Write+0x1ec>)
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 fd0d 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800383c:	2302      	movs	r3, #2
 800383e:	e0cc      	b.n	80039da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_I2C_Mem_Write+0x56>
 800384a:	2302      	movs	r3, #2
 800384c:	e0c5      	b.n	80039da <HAL_I2C_Mem_Write+0x1e2>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b01      	cmp	r3, #1
 8003862:	d007      	beq.n	8003874 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003882:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2221      	movs	r2, #33	@ 0x21
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2240      	movs	r2, #64	@ 0x40
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a3a      	ldr	r2, [r7, #32]
 800389e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80038a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4a4d      	ldr	r2, [pc, #308]	@ (80039e8 <HAL_I2C_Mem_Write+0x1f0>)
 80038b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038b6:	88f8      	ldrh	r0, [r7, #6]
 80038b8:	893a      	ldrh	r2, [r7, #8]
 80038ba:	8979      	ldrh	r1, [r7, #10]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	4603      	mov	r3, r0
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 fb44 	bl	8003f54 <I2C_RequestMemoryWrite>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d052      	beq.n	8003978 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e081      	b.n	80039da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 fdd2 	bl	8004484 <I2C_WaitOnTXEFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00d      	beq.n	8003902 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d107      	bne.n	80038fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e06b      	b.n	80039da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	781a      	ldrb	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b04      	cmp	r3, #4
 800393e:	d11b      	bne.n	8003978 <HAL_I2C_Mem_Write+0x180>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	d017      	beq.n	8003978 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394c:	781a      	ldrb	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1aa      	bne.n	80038d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 fdc5 	bl	8004514 <I2C_WaitOnBTFFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00d      	beq.n	80039ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003994:	2b04      	cmp	r3, #4
 8003996:	d107      	bne.n	80039a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e016      	b.n	80039da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	e000      	b.n	80039da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
  }
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	00100002 	.word	0x00100002
 80039e8:	ffff0000 	.word	0xffff0000

080039ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08c      	sub	sp, #48	@ 0x30
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	4608      	mov	r0, r1
 80039f6:	4611      	mov	r1, r2
 80039f8:	461a      	mov	r2, r3
 80039fa:	4603      	mov	r3, r0
 80039fc:	817b      	strh	r3, [r7, #10]
 80039fe:	460b      	mov	r3, r1
 8003a00:	813b      	strh	r3, [r7, #8]
 8003a02:	4613      	mov	r3, r2
 8003a04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a06:	f7fe fdd3 	bl	80025b0 <HAL_GetTick>
 8003a0a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	f040 8214 	bne.w	8003e42 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	2319      	movs	r3, #25
 8003a20:	2201      	movs	r2, #1
 8003a22:	497b      	ldr	r1, [pc, #492]	@ (8003c10 <HAL_I2C_Mem_Read+0x224>)
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fc13 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
 8003a32:	e207      	b.n	8003e44 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_I2C_Mem_Read+0x56>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e200      	b.n	8003e44 <HAL_I2C_Mem_Read+0x458>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d007      	beq.n	8003a68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2222      	movs	r2, #34	@ 0x22
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2240      	movs	r2, #64	@ 0x40
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003a98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a5b      	ldr	r2, [pc, #364]	@ (8003c14 <HAL_I2C_Mem_Read+0x228>)
 8003aa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aaa:	88f8      	ldrh	r0, [r7, #6]
 8003aac:	893a      	ldrh	r2, [r7, #8]
 8003aae:	8979      	ldrh	r1, [r7, #10]
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	4603      	mov	r3, r0
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fae0 	bl	8004080 <I2C_RequestMemoryRead>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e1bc      	b.n	8003e44 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d113      	bne.n	8003afa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	623b      	str	r3, [r7, #32]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	623b      	str	r3, [r7, #32]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	623b      	str	r3, [r7, #32]
 8003ae6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	e190      	b.n	8003e1c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d11b      	bne.n	8003b3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	61fb      	str	r3, [r7, #28]
 8003b26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	e170      	b.n	8003e1c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d11b      	bne.n	8003b7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	e150      	b.n	8003e1c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b90:	e144      	b.n	8003e1c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	f200 80f1 	bhi.w	8003d7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d123      	bne.n	8003bec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fcfb 	bl	80045a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e145      	b.n	8003e44 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bea:	e117      	b.n	8003e1c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d14e      	bne.n	8003c92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	4906      	ldr	r1, [pc, #24]	@ (8003c18 <HAL_I2C_Mem_Read+0x22c>)
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 fb26 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e11a      	b.n	8003e44 <HAL_I2C_Mem_Read+0x458>
 8003c0e:	bf00      	nop
 8003c10:	00100002 	.word	0x00100002
 8003c14:	ffff0000 	.word	0xffff0000
 8003c18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c90:	e0c4      	b.n	8003e1c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c98:	2200      	movs	r2, #0
 8003c9a:	496c      	ldr	r1, [pc, #432]	@ (8003e4c <HAL_I2C_Mem_Read+0x460>)
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 fad7 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0cb      	b.n	8003e44 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	4955      	ldr	r1, [pc, #340]	@ (8003e4c <HAL_I2C_Mem_Read+0x460>)
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 faa9 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e09d      	b.n	8003e44 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d7c:	e04e      	b.n	8003e1c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d80:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 fc0e 	bl	80045a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e058      	b.n	8003e44 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d124      	bne.n	8003e1c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d107      	bne.n	8003dea <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f47f aeb6 	bne.w	8003b92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e000      	b.n	8003e44 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003e42:	2302      	movs	r3, #2
  }
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3728      	adds	r7, #40	@ 0x28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	00010004 	.word	0x00010004

08003e50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d006      	beq.n	8003e7a <I2C_MasterRequestWrite+0x2a>
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d003      	beq.n	8003e7a <I2C_MasterRequestWrite+0x2a>
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e78:	d108      	bne.n	8003e8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	e00b      	b.n	8003ea4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e90:	2b12      	cmp	r3, #18
 8003e92:	d107      	bne.n	8003ea4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ea2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f9cd 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00d      	beq.n	8003ed8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eca:	d103      	bne.n	8003ed4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ed2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e035      	b.n	8003f44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ee0:	d108      	bne.n	8003ef4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ee2:	897b      	ldrh	r3, [r7, #10]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ef0:	611a      	str	r2, [r3, #16]
 8003ef2:	e01b      	b.n	8003f2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ef4:	897b      	ldrh	r3, [r7, #10]
 8003ef6:	11db      	asrs	r3, r3, #7
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f003 0306 	and.w	r3, r3, #6
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f063 030f 	orn	r3, r3, #15
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	490e      	ldr	r1, [pc, #56]	@ (8003f4c <I2C_MasterRequestWrite+0xfc>)
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fa16 	bl	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e010      	b.n	8003f44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f22:	897b      	ldrh	r3, [r7, #10]
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	4907      	ldr	r1, [pc, #28]	@ (8003f50 <I2C_MasterRequestWrite+0x100>)
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 fa06 	bl	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	00010008 	.word	0x00010008
 8003f50:	00010002 	.word	0x00010002

08003f54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	4608      	mov	r0, r1
 8003f5e:	4611      	mov	r1, r2
 8003f60:	461a      	mov	r2, r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	817b      	strh	r3, [r7, #10]
 8003f66:	460b      	mov	r3, r1
 8003f68:	813b      	strh	r3, [r7, #8]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 f960 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00d      	beq.n	8003fb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fa4:	d103      	bne.n	8003fae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e05f      	b.n	8004072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fb2:	897b      	ldrh	r3, [r7, #10]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc4:	6a3a      	ldr	r2, [r7, #32]
 8003fc6:	492d      	ldr	r1, [pc, #180]	@ (800407c <I2C_RequestMemoryWrite+0x128>)
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f9bb 	bl	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e04c      	b.n	8004072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff0:	6a39      	ldr	r1, [r7, #32]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 fa46 	bl	8004484 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00d      	beq.n	800401a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	2b04      	cmp	r3, #4
 8004004:	d107      	bne.n	8004016 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004014:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e02b      	b.n	8004072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d105      	bne.n	800402c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004020:	893b      	ldrh	r3, [r7, #8]
 8004022:	b2da      	uxtb	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	611a      	str	r2, [r3, #16]
 800402a:	e021      	b.n	8004070 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800402c:	893b      	ldrh	r3, [r7, #8]
 800402e:	0a1b      	lsrs	r3, r3, #8
 8004030:	b29b      	uxth	r3, r3
 8004032:	b2da      	uxtb	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800403a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403c:	6a39      	ldr	r1, [r7, #32]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fa20 	bl	8004484 <I2C_WaitOnTXEFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00d      	beq.n	8004066 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	2b04      	cmp	r3, #4
 8004050:	d107      	bne.n	8004062 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004060:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e005      	b.n	8004072 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004066:	893b      	ldrh	r3, [r7, #8]
 8004068:	b2da      	uxtb	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	00010002 	.word	0x00010002

08004080 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	4608      	mov	r0, r1
 800408a:	4611      	mov	r1, r2
 800408c:	461a      	mov	r2, r3
 800408e:	4603      	mov	r3, r0
 8004090:	817b      	strh	r3, [r7, #10]
 8004092:	460b      	mov	r3, r1
 8004094:	813b      	strh	r3, [r7, #8]
 8004096:	4613      	mov	r3, r2
 8004098:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f8c2 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00d      	beq.n	80040ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e0:	d103      	bne.n	80040ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e0aa      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ee:	897b      	ldrh	r3, [r7, #10]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	6a3a      	ldr	r2, [r7, #32]
 8004102:	4952      	ldr	r1, [pc, #328]	@ (800424c <I2C_RequestMemoryRead+0x1cc>)
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f91d 	bl	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e097      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800412a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800412c:	6a39      	ldr	r1, [r7, #32]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f9a8 	bl	8004484 <I2C_WaitOnTXEFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00d      	beq.n	8004156 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	2b04      	cmp	r3, #4
 8004140:	d107      	bne.n	8004152 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004150:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e076      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d105      	bne.n	8004168 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800415c:	893b      	ldrh	r3, [r7, #8]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	611a      	str	r2, [r3, #16]
 8004166:	e021      	b.n	80041ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004168:	893b      	ldrh	r3, [r7, #8]
 800416a:	0a1b      	lsrs	r3, r3, #8
 800416c:	b29b      	uxth	r3, r3
 800416e:	b2da      	uxtb	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004178:	6a39      	ldr	r1, [r7, #32]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f982 	bl	8004484 <I2C_WaitOnTXEFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00d      	beq.n	80041a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	2b04      	cmp	r3, #4
 800418c:	d107      	bne.n	800419e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800419c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e050      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041a2:	893b      	ldrh	r3, [r7, #8]
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ae:	6a39      	ldr	r1, [r7, #32]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f967 	bl	8004484 <I2C_WaitOnTXEFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00d      	beq.n	80041d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d107      	bne.n	80041d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e035      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f82b 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00d      	beq.n	800421c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800420a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800420e:	d103      	bne.n	8004218 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004216:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e013      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800421c:	897b      	ldrh	r3, [r7, #10]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	b2da      	uxtb	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800422c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422e:	6a3a      	ldr	r2, [r7, #32]
 8004230:	4906      	ldr	r1, [pc, #24]	@ (800424c <I2C_RequestMemoryRead+0x1cc>)
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f886 	bl	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	00010002 	.word	0x00010002

08004250 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	4613      	mov	r3, r2
 800425e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004260:	e048      	b.n	80042f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004268:	d044      	beq.n	80042f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426a:	f7fe f9a1 	bl	80025b0 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d302      	bcc.n	8004280 <I2C_WaitOnFlagUntilTimeout+0x30>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d139      	bne.n	80042f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	0c1b      	lsrs	r3, r3, #16
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b01      	cmp	r3, #1
 8004288:	d10d      	bne.n	80042a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	43da      	mvns	r2, r3
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	4013      	ands	r3, r2
 8004296:	b29b      	uxth	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	bf0c      	ite	eq
 800429c:	2301      	moveq	r3, #1
 800429e:	2300      	movne	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	e00c      	b.n	80042c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	43da      	mvns	r2, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4013      	ands	r3, r2
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	bf0c      	ite	eq
 80042b8:	2301      	moveq	r3, #1
 80042ba:	2300      	movne	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d116      	bne.n	80042f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	f043 0220 	orr.w	r2, r3, #32
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e023      	b.n	800433c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	0c1b      	lsrs	r3, r3, #16
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d10d      	bne.n	800431a <I2C_WaitOnFlagUntilTimeout+0xca>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	43da      	mvns	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4013      	ands	r3, r2
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	bf0c      	ite	eq
 8004310:	2301      	moveq	r3, #1
 8004312:	2300      	movne	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	461a      	mov	r2, r3
 8004318:	e00c      	b.n	8004334 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	43da      	mvns	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4013      	ands	r3, r2
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	bf0c      	ite	eq
 800432c:	2301      	moveq	r3, #1
 800432e:	2300      	movne	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	429a      	cmp	r2, r3
 8004338:	d093      	beq.n	8004262 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004352:	e071      	b.n	8004438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800435e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004362:	d123      	bne.n	80043ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004372:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800437c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004398:	f043 0204 	orr.w	r2, r3, #4
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e067      	b.n	800447c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b2:	d041      	beq.n	8004438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b4:	f7fe f8fc 	bl	80025b0 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d302      	bcc.n	80043ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d136      	bne.n	8004438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	0c1b      	lsrs	r3, r3, #16
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d10c      	bne.n	80043ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	43da      	mvns	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4013      	ands	r3, r2
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	bf14      	ite	ne
 80043e6:	2301      	movne	r3, #1
 80043e8:	2300      	moveq	r3, #0
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	e00b      	b.n	8004406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	43da      	mvns	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4013      	ands	r3, r2
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bf14      	ite	ne
 8004400:	2301      	movne	r3, #1
 8004402:	2300      	moveq	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d016      	beq.n	8004438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004424:	f043 0220 	orr.w	r2, r3, #32
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e021      	b.n	800447c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	0c1b      	lsrs	r3, r3, #16
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d10c      	bne.n	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	43da      	mvns	r2, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	4013      	ands	r3, r2
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	bf14      	ite	ne
 8004454:	2301      	movne	r3, #1
 8004456:	2300      	moveq	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	e00b      	b.n	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	43da      	mvns	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4013      	ands	r3, r2
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	bf14      	ite	ne
 800446e:	2301      	movne	r3, #1
 8004470:	2300      	moveq	r3, #0
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	f47f af6d 	bne.w	8004354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004490:	e034      	b.n	80044fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 f8e3 	bl	800465e <I2C_IsAcknowledgeFailed>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e034      	b.n	800450c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	d028      	beq.n	80044fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044aa:	f7fe f881 	bl	80025b0 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d302      	bcc.n	80044c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d11d      	bne.n	80044fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ca:	2b80      	cmp	r3, #128	@ 0x80
 80044cc:	d016      	beq.n	80044fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e8:	f043 0220 	orr.w	r2, r3, #32
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e007      	b.n	800450c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004506:	2b80      	cmp	r3, #128	@ 0x80
 8004508:	d1c3      	bne.n	8004492 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004520:	e034      	b.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f89b 	bl	800465e <I2C_IsAcknowledgeFailed>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e034      	b.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d028      	beq.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453a:	f7fe f839 	bl	80025b0 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d11d      	bne.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b04      	cmp	r3, #4
 800455c:	d016      	beq.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e007      	b.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b04      	cmp	r3, #4
 8004598:	d1c3      	bne.n	8004522 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045b0:	e049      	b.n	8004646 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d119      	bne.n	80045f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0210 	mvn.w	r2, #16
 80045c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e030      	b.n	8004656 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f4:	f7fd ffdc 	bl	80025b0 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	429a      	cmp	r2, r3
 8004602:	d302      	bcc.n	800460a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d11d      	bne.n	8004646 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004614:	2b40      	cmp	r3, #64	@ 0x40
 8004616:	d016      	beq.n	8004646 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004632:	f043 0220 	orr.w	r2, r3, #32
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e007      	b.n	8004656 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004650:	2b40      	cmp	r3, #64	@ 0x40
 8004652:	d1ae      	bne.n	80045b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004674:	d11b      	bne.n	80046ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800467e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469a:	f043 0204 	orr.w	r2, r3, #4
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0cc      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046d0:	4b68      	ldr	r3, [pc, #416]	@ (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d90c      	bls.n	80046f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046de:	4b65      	ldr	r3, [pc, #404]	@ (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e6:	4b63      	ldr	r3, [pc, #396]	@ (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0b8      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d020      	beq.n	8004746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004710:	4b59      	ldr	r3, [pc, #356]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4a58      	ldr	r2, [pc, #352]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800471a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004728:	4b53      	ldr	r3, [pc, #332]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4a52      	ldr	r2, [pc, #328]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004734:	4b50      	ldr	r3, [pc, #320]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	494d      	ldr	r1, [pc, #308]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d044      	beq.n	80047dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d107      	bne.n	800476a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475a:	4b47      	ldr	r3, [pc, #284]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d119      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e07f      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d003      	beq.n	800477a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004776:	2b03      	cmp	r3, #3
 8004778:	d107      	bne.n	800478a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477a:	4b3f      	ldr	r3, [pc, #252]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d109      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e06f      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478a:	4b3b      	ldr	r3, [pc, #236]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e067      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800479a:	4b37      	ldr	r3, [pc, #220]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f023 0203 	bic.w	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4934      	ldr	r1, [pc, #208]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047ac:	f7fd ff00 	bl	80025b0 <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b2:	e00a      	b.n	80047ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b4:	f7fd fefc 	bl	80025b0 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e04f      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 020c 	and.w	r2, r3, #12
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	429a      	cmp	r2, r3
 80047da:	d1eb      	bne.n	80047b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047dc:	4b25      	ldr	r3, [pc, #148]	@ (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 030f 	and.w	r3, r3, #15
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d20c      	bcs.n	8004804 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ea:	4b22      	ldr	r3, [pc, #136]	@ (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f2:	4b20      	ldr	r3, [pc, #128]	@ (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e032      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004810:	4b19      	ldr	r3, [pc, #100]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4916      	ldr	r1, [pc, #88]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800482e:	4b12      	ldr	r3, [pc, #72]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	490e      	ldr	r1, [pc, #56]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	4313      	orrs	r3, r2
 8004840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004842:	f000 f855 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8004846:	4602      	mov	r2, r0
 8004848:	4b0b      	ldr	r3, [pc, #44]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	490a      	ldr	r1, [pc, #40]	@ (800487c <HAL_RCC_ClockConfig+0x1c0>)
 8004854:	5ccb      	ldrb	r3, [r1, r3]
 8004856:	fa22 f303 	lsr.w	r3, r2, r3
 800485a:	4a09      	ldr	r2, [pc, #36]	@ (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800485e:	4b09      	ldr	r3, [pc, #36]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f7fd fe60 	bl	8002528 <HAL_InitTick>

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40023c00 	.word	0x40023c00
 8004878:	40023800 	.word	0x40023800
 800487c:	08009204 	.word	0x08009204
 8004880:	20000000 	.word	0x20000000
 8004884:	20000004 	.word	0x20000004

08004888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800488c:	4b03      	ldr	r3, [pc, #12]	@ (800489c <HAL_RCC_GetHCLKFreq+0x14>)
 800488e:	681b      	ldr	r3, [r3, #0]
}
 8004890:	4618      	mov	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	20000000 	.word	0x20000000

080048a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048a4:	f7ff fff0 	bl	8004888 <HAL_RCC_GetHCLKFreq>
 80048a8:	4602      	mov	r2, r0
 80048aa:	4b05      	ldr	r3, [pc, #20]	@ (80048c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	0a9b      	lsrs	r3, r3, #10
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	4903      	ldr	r1, [pc, #12]	@ (80048c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048b6:	5ccb      	ldrb	r3, [r1, r3]
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40023800 	.word	0x40023800
 80048c4:	08009214 	.word	0x08009214

080048c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048cc:	f7ff ffdc 	bl	8004888 <HAL_RCC_GetHCLKFreq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4b05      	ldr	r3, [pc, #20]	@ (80048e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	0b5b      	lsrs	r3, r3, #13
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	4903      	ldr	r1, [pc, #12]	@ (80048ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80048de:	5ccb      	ldrb	r3, [r1, r3]
 80048e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40023800 	.word	0x40023800
 80048ec:	08009214 	.word	0x08009214

080048f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048f4:	b0a6      	sub	sp, #152	@ 0x98
 80048f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004916:	4bc8      	ldr	r3, [pc, #800]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x348>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 030c 	and.w	r3, r3, #12
 800491e:	2b0c      	cmp	r3, #12
 8004920:	f200 817e 	bhi.w	8004c20 <HAL_RCC_GetSysClockFreq+0x330>
 8004924:	a201      	add	r2, pc, #4	@ (adr r2, 800492c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492a:	bf00      	nop
 800492c:	08004961 	.word	0x08004961
 8004930:	08004c21 	.word	0x08004c21
 8004934:	08004c21 	.word	0x08004c21
 8004938:	08004c21 	.word	0x08004c21
 800493c:	08004969 	.word	0x08004969
 8004940:	08004c21 	.word	0x08004c21
 8004944:	08004c21 	.word	0x08004c21
 8004948:	08004c21 	.word	0x08004c21
 800494c:	08004971 	.word	0x08004971
 8004950:	08004c21 	.word	0x08004c21
 8004954:	08004c21 	.word	0x08004c21
 8004958:	08004c21 	.word	0x08004c21
 800495c:	08004adb 	.word	0x08004adb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004960:	4bb6      	ldr	r3, [pc, #728]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x34c>)
 8004962:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004966:	e15f      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004968:	4bb5      	ldr	r3, [pc, #724]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x350>)
 800496a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800496e:	e15b      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004970:	4bb1      	ldr	r3, [pc, #708]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x348>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004978:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800497c:	4bae      	ldr	r3, [pc, #696]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x348>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d031      	beq.n	80049ec <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004988:	4bab      	ldr	r3, [pc, #684]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x348>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	099b      	lsrs	r3, r3, #6
 800498e:	2200      	movs	r2, #0
 8004990:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004992:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004994:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499a:	663b      	str	r3, [r7, #96]	@ 0x60
 800499c:	2300      	movs	r3, #0
 800499e:	667b      	str	r3, [r7, #100]	@ 0x64
 80049a0:	4ba7      	ldr	r3, [pc, #668]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x350>)
 80049a2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80049a6:	462a      	mov	r2, r5
 80049a8:	fb03 f202 	mul.w	r2, r3, r2
 80049ac:	2300      	movs	r3, #0
 80049ae:	4621      	mov	r1, r4
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	4413      	add	r3, r2
 80049b6:	4aa2      	ldr	r2, [pc, #648]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x350>)
 80049b8:	4621      	mov	r1, r4
 80049ba:	fba1 1202 	umull	r1, r2, r1, r2
 80049be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80049c0:	460a      	mov	r2, r1
 80049c2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80049c4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80049c6:	4413      	add	r3, r2
 80049c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049ce:	2200      	movs	r2, #0
 80049d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049d2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80049d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80049d8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80049dc:	f7fc f954 	bl	8000c88 <__aeabi_uldivmod>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4613      	mov	r3, r2
 80049e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049ea:	e064      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ec:	4b92      	ldr	r3, [pc, #584]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x348>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	099b      	lsrs	r3, r3, #6
 80049f2:	2200      	movs	r2, #0
 80049f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80049f6:	657a      	str	r2, [r7, #84]	@ 0x54
 80049f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a00:	2300      	movs	r3, #0
 8004a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a04:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004a08:	4622      	mov	r2, r4
 8004a0a:	462b      	mov	r3, r5
 8004a0c:	f04f 0000 	mov.w	r0, #0
 8004a10:	f04f 0100 	mov.w	r1, #0
 8004a14:	0159      	lsls	r1, r3, #5
 8004a16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a1a:	0150      	lsls	r0, r2, #5
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4621      	mov	r1, r4
 8004a22:	1a51      	subs	r1, r2, r1
 8004a24:	6139      	str	r1, [r7, #16]
 8004a26:	4629      	mov	r1, r5
 8004a28:	eb63 0301 	sbc.w	r3, r3, r1
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a3a:	4659      	mov	r1, fp
 8004a3c:	018b      	lsls	r3, r1, #6
 8004a3e:	4651      	mov	r1, sl
 8004a40:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a44:	4651      	mov	r1, sl
 8004a46:	018a      	lsls	r2, r1, #6
 8004a48:	4651      	mov	r1, sl
 8004a4a:	ebb2 0801 	subs.w	r8, r2, r1
 8004a4e:	4659      	mov	r1, fp
 8004a50:	eb63 0901 	sbc.w	r9, r3, r1
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a60:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a64:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a68:	4690      	mov	r8, r2
 8004a6a:	4699      	mov	r9, r3
 8004a6c:	4623      	mov	r3, r4
 8004a6e:	eb18 0303 	adds.w	r3, r8, r3
 8004a72:	60bb      	str	r3, [r7, #8]
 8004a74:	462b      	mov	r3, r5
 8004a76:	eb49 0303 	adc.w	r3, r9, r3
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a88:	4629      	mov	r1, r5
 8004a8a:	028b      	lsls	r3, r1, #10
 8004a8c:	4621      	mov	r1, r4
 8004a8e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a92:	4621      	mov	r1, r4
 8004a94:	028a      	lsls	r2, r1, #10
 8004a96:	4610      	mov	r0, r2
 8004a98:	4619      	mov	r1, r3
 8004a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aa2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004aa4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004aa8:	f7fc f8ee 	bl	8000c88 <__aeabi_uldivmod>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ab6:	4b60      	ldr	r3, [pc, #384]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	0c1b      	lsrs	r3, r3, #16
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004ac8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004ad8:	e0a6      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ada:	4b57      	ldr	r3, [pc, #348]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x348>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ae2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ae6:	4b54      	ldr	r3, [pc, #336]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d02a      	beq.n	8004b48 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004af2:	4b51      	ldr	r3, [pc, #324]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x348>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	099b      	lsrs	r3, r3, #6
 8004af8:	2200      	movs	r2, #0
 8004afa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004afc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b04:	2100      	movs	r1, #0
 8004b06:	4b4e      	ldr	r3, [pc, #312]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x350>)
 8004b08:	fb03 f201 	mul.w	r2, r3, r1
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	fb00 f303 	mul.w	r3, r0, r3
 8004b12:	4413      	add	r3, r2
 8004b14:	4a4a      	ldr	r2, [pc, #296]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x350>)
 8004b16:	fba0 1202 	umull	r1, r2, r0, r2
 8004b1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b1c:	460a      	mov	r2, r1
 8004b1e:	673a      	str	r2, [r7, #112]	@ 0x70
 8004b20:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004b22:	4413      	add	r3, r2
 8004b24:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b2e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004b30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004b34:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004b38:	f7fc f8a6 	bl	8000c88 <__aeabi_uldivmod>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4613      	mov	r3, r2
 8004b42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b46:	e05b      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b48:	4b3b      	ldr	r3, [pc, #236]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	099b      	lsrs	r3, r3, #6
 8004b4e:	2200      	movs	r2, #0
 8004b50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5a:	623b      	str	r3, [r7, #32]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b64:	4642      	mov	r2, r8
 8004b66:	464b      	mov	r3, r9
 8004b68:	f04f 0000 	mov.w	r0, #0
 8004b6c:	f04f 0100 	mov.w	r1, #0
 8004b70:	0159      	lsls	r1, r3, #5
 8004b72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b76:	0150      	lsls	r0, r2, #5
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4641      	mov	r1, r8
 8004b7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b82:	4649      	mov	r1, r9
 8004b84:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b9c:	ebb2 040a 	subs.w	r4, r2, sl
 8004ba0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	00eb      	lsls	r3, r5, #3
 8004bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bb2:	00e2      	lsls	r2, r4, #3
 8004bb4:	4614      	mov	r4, r2
 8004bb6:	461d      	mov	r5, r3
 8004bb8:	4643      	mov	r3, r8
 8004bba:	18e3      	adds	r3, r4, r3
 8004bbc:	603b      	str	r3, [r7, #0]
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	eb45 0303 	adc.w	r3, r5, r3
 8004bc4:	607b      	str	r3, [r7, #4]
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	028b      	lsls	r3, r1, #10
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bdc:	4621      	mov	r1, r4
 8004bde:	028a      	lsls	r2, r1, #10
 8004be0:	4610      	mov	r0, r2
 8004be2:	4619      	mov	r1, r3
 8004be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004be8:	2200      	movs	r2, #0
 8004bea:	61bb      	str	r3, [r7, #24]
 8004bec:	61fa      	str	r2, [r7, #28]
 8004bee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bf2:	f7fc f849 	bl	8000c88 <__aeabi_uldivmod>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c00:	4b0d      	ldr	r3, [pc, #52]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	0f1b      	lsrs	r3, r3, #28
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8004c0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004c1e:	e003      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c20:	4b06      	ldr	r3, [pc, #24]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x34c>)
 8004c22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004c26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3798      	adds	r7, #152	@ 0x98
 8004c30:	46bd      	mov	sp, r7
 8004c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c36:	bf00      	nop
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	00f42400 	.word	0x00f42400
 8004c40:	017d7840 	.word	0x017d7840

08004c44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e28d      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 8083 	beq.w	8004d6a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c64:	4b94      	ldr	r3, [pc, #592]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 030c 	and.w	r3, r3, #12
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d019      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c70:	4b91      	ldr	r3, [pc, #580]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 030c 	and.w	r3, r3, #12
        || \
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d106      	bne.n	8004c8a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c7c:	4b8e      	ldr	r3, [pc, #568]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c88:	d00c      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c8a:	4b8b      	ldr	r3, [pc, #556]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c92:	2b0c      	cmp	r3, #12
 8004c94:	d112      	bne.n	8004cbc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c96:	4b88      	ldr	r3, [pc, #544]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ca2:	d10b      	bne.n	8004cbc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca4:	4b84      	ldr	r3, [pc, #528]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d05b      	beq.n	8004d68 <HAL_RCC_OscConfig+0x124>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d157      	bne.n	8004d68 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e25a      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc4:	d106      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x90>
 8004cc6:	4b7c      	ldr	r3, [pc, #496]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a7b      	ldr	r2, [pc, #492]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e01d      	b.n	8004d10 <HAL_RCC_OscConfig+0xcc>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0xb4>
 8004cde:	4b76      	ldr	r3, [pc, #472]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a75      	ldr	r2, [pc, #468]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004ce4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	4b73      	ldr	r3, [pc, #460]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a72      	ldr	r2, [pc, #456]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e00b      	b.n	8004d10 <HAL_RCC_OscConfig+0xcc>
 8004cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a6e      	ldr	r2, [pc, #440]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004cfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	4b6c      	ldr	r3, [pc, #432]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a6b      	ldr	r2, [pc, #428]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d013      	beq.n	8004d40 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fd fc4a 	bl	80025b0 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d20:	f7fd fc46 	bl	80025b0 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	@ 0x64
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e21f      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d32:	4b61      	ldr	r3, [pc, #388]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f0      	beq.n	8004d20 <HAL_RCC_OscConfig+0xdc>
 8004d3e:	e014      	b.n	8004d6a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fd fc36 	bl	80025b0 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fd fc32 	bl	80025b0 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	@ 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e20b      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d5a:	4b57      	ldr	r3, [pc, #348]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x104>
 8004d66:	e000      	b.n	8004d6a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d06f      	beq.n	8004e56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d76:	4b50      	ldr	r3, [pc, #320]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d017      	beq.n	8004db2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d82:	4b4d      	ldr	r3, [pc, #308]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d105      	bne.n	8004d9a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00b      	beq.n	8004db2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d9a:	4b47      	ldr	r3, [pc, #284]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004da2:	2b0c      	cmp	r3, #12
 8004da4:	d11c      	bne.n	8004de0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004da6:	4b44      	ldr	r3, [pc, #272]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d116      	bne.n	8004de0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004db2:	4b41      	ldr	r3, [pc, #260]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_RCC_OscConfig+0x186>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d001      	beq.n	8004dca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e1d3      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dca:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4937      	ldr	r1, [pc, #220]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dde:	e03a      	b.n	8004e56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d020      	beq.n	8004e2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004de8:	4b34      	ldr	r3, [pc, #208]	@ (8004ebc <HAL_RCC_OscConfig+0x278>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dee:	f7fd fbdf 	bl	80025b0 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004df6:	f7fd fbdb 	bl	80025b0 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e1b4      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e08:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f0      	beq.n	8004df6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e14:	4b28      	ldr	r3, [pc, #160]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	4925      	ldr	r1, [pc, #148]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	600b      	str	r3, [r1, #0]
 8004e28:	e015      	b.n	8004e56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e2a:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <HAL_RCC_OscConfig+0x278>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fd fbbe 	bl	80025b0 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e38:	f7fd fbba 	bl	80025b0 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e193      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d036      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d016      	beq.n	8004e98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e6a:	4b15      	ldr	r3, [pc, #84]	@ (8004ec0 <HAL_RCC_OscConfig+0x27c>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e70:	f7fd fb9e 	bl	80025b0 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e78:	f7fd fb9a 	bl	80025b0 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e173      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0f0      	beq.n	8004e78 <HAL_RCC_OscConfig+0x234>
 8004e96:	e01b      	b.n	8004ed0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e98:	4b09      	ldr	r3, [pc, #36]	@ (8004ec0 <HAL_RCC_OscConfig+0x27c>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9e:	f7fd fb87 	bl	80025b0 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea4:	e00e      	b.n	8004ec4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ea6:	f7fd fb83 	bl	80025b0 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d907      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e15c      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	42470000 	.word	0x42470000
 8004ec0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec4:	4b8a      	ldr	r3, [pc, #552]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1ea      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8097 	beq.w	800500c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ee2:	4b83      	ldr	r3, [pc, #524]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10f      	bne.n	8004f0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60bb      	str	r3, [r7, #8]
 8004ef2:	4b7f      	ldr	r3, [pc, #508]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	4a7e      	ldr	r2, [pc, #504]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004efe:	4b7c      	ldr	r3, [pc, #496]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f06:	60bb      	str	r3, [r7, #8]
 8004f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0e:	4b79      	ldr	r3, [pc, #484]	@ (80050f4 <HAL_RCC_OscConfig+0x4b0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d118      	bne.n	8004f4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f1a:	4b76      	ldr	r3, [pc, #472]	@ (80050f4 <HAL_RCC_OscConfig+0x4b0>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a75      	ldr	r2, [pc, #468]	@ (80050f4 <HAL_RCC_OscConfig+0x4b0>)
 8004f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f26:	f7fd fb43 	bl	80025b0 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f2e:	f7fd fb3f 	bl	80025b0 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e118      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f40:	4b6c      	ldr	r3, [pc, #432]	@ (80050f4 <HAL_RCC_OscConfig+0x4b0>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d106      	bne.n	8004f62 <HAL_RCC_OscConfig+0x31e>
 8004f54:	4b66      	ldr	r3, [pc, #408]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f58:	4a65      	ldr	r2, [pc, #404]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f5a:	f043 0301 	orr.w	r3, r3, #1
 8004f5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f60:	e01c      	b.n	8004f9c <HAL_RCC_OscConfig+0x358>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b05      	cmp	r3, #5
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCC_OscConfig+0x340>
 8004f6a:	4b61      	ldr	r3, [pc, #388]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6e:	4a60      	ldr	r2, [pc, #384]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f70:	f043 0304 	orr.w	r3, r3, #4
 8004f74:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f76:	4b5e      	ldr	r3, [pc, #376]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7a:	4a5d      	ldr	r2, [pc, #372]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f82:	e00b      	b.n	8004f9c <HAL_RCC_OscConfig+0x358>
 8004f84:	4b5a      	ldr	r3, [pc, #360]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f88:	4a59      	ldr	r2, [pc, #356]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f8a:	f023 0301 	bic.w	r3, r3, #1
 8004f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f90:	4b57      	ldr	r3, [pc, #348]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f94:	4a56      	ldr	r2, [pc, #344]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f96:	f023 0304 	bic.w	r3, r3, #4
 8004f9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d015      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa4:	f7fd fb04 	bl	80025b0 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004faa:	e00a      	b.n	8004fc2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fac:	f7fd fb00 	bl	80025b0 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e0d7      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0ee      	beq.n	8004fac <HAL_RCC_OscConfig+0x368>
 8004fce:	e014      	b.n	8004ffa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd0:	f7fd faee 	bl	80025b0 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd6:	e00a      	b.n	8004fee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd8:	f7fd faea 	bl	80025b0 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e0c1      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fee:	4b40      	ldr	r3, [pc, #256]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1ee      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d105      	bne.n	800500c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005000:	4b3b      	ldr	r3, [pc, #236]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8005002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005004:	4a3a      	ldr	r2, [pc, #232]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8005006:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800500a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80ad 	beq.w	8005170 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005016:	4b36      	ldr	r3, [pc, #216]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 030c 	and.w	r3, r3, #12
 800501e:	2b08      	cmp	r3, #8
 8005020:	d060      	beq.n	80050e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d145      	bne.n	80050b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502a:	4b33      	ldr	r3, [pc, #204]	@ (80050f8 <HAL_RCC_OscConfig+0x4b4>)
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7fd fabe 	bl	80025b0 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005038:	f7fd faba 	bl	80025b0 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e093      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504a:	4b29      	ldr	r3, [pc, #164]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f0      	bne.n	8005038 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69da      	ldr	r2, [r3, #28]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005064:	019b      	lsls	r3, r3, #6
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506c:	085b      	lsrs	r3, r3, #1
 800506e:	3b01      	subs	r3, #1
 8005070:	041b      	lsls	r3, r3, #16
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005078:	061b      	lsls	r3, r3, #24
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005080:	071b      	lsls	r3, r3, #28
 8005082:	491b      	ldr	r1, [pc, #108]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8005084:	4313      	orrs	r3, r2
 8005086:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005088:	4b1b      	ldr	r3, [pc, #108]	@ (80050f8 <HAL_RCC_OscConfig+0x4b4>)
 800508a:	2201      	movs	r2, #1
 800508c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508e:	f7fd fa8f 	bl	80025b0 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005096:	f7fd fa8b 	bl	80025b0 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e064      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a8:	4b11      	ldr	r3, [pc, #68]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f0      	beq.n	8005096 <HAL_RCC_OscConfig+0x452>
 80050b4:	e05c      	b.n	8005170 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b6:	4b10      	ldr	r3, [pc, #64]	@ (80050f8 <HAL_RCC_OscConfig+0x4b4>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050bc:	f7fd fa78 	bl	80025b0 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c4:	f7fd fa74 	bl	80025b0 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e04d      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d6:	4b06      	ldr	r3, [pc, #24]	@ (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f0      	bne.n	80050c4 <HAL_RCC_OscConfig+0x480>
 80050e2:	e045      	b.n	8005170 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d107      	bne.n	80050fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e040      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
 80050f0:	40023800 	.word	0x40023800
 80050f4:	40007000 	.word	0x40007000
 80050f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050fc:	4b1f      	ldr	r3, [pc, #124]	@ (800517c <HAL_RCC_OscConfig+0x538>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d030      	beq.n	800516c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005114:	429a      	cmp	r2, r3
 8005116:	d129      	bne.n	800516c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005122:	429a      	cmp	r2, r3
 8005124:	d122      	bne.n	800516c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800512c:	4013      	ands	r3, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005132:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005134:	4293      	cmp	r3, r2
 8005136:	d119      	bne.n	800516c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005142:	085b      	lsrs	r3, r3, #1
 8005144:	3b01      	subs	r3, #1
 8005146:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005148:	429a      	cmp	r2, r3
 800514a:	d10f      	bne.n	800516c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005156:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d107      	bne.n	800516c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005166:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005168:	429a      	cmp	r2, r3
 800516a:	d001      	beq.n	8005170 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40023800 	.word	0x40023800

08005180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e041      	b.n	8005216 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fd f8a0 	bl	80022ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	4619      	mov	r1, r3
 80051be:	4610      	mov	r0, r2
 80051c0:	f000 fbbe 	bl	8005940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b01      	cmp	r3, #1
 8005232:	d001      	beq.n	8005238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e04e      	b.n	80052d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0201 	orr.w	r2, r2, #1
 800524e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a23      	ldr	r2, [pc, #140]	@ (80052e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d022      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x80>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005262:	d01d      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x80>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a1f      	ldr	r2, [pc, #124]	@ (80052e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d018      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x80>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1e      	ldr	r2, [pc, #120]	@ (80052ec <HAL_TIM_Base_Start_IT+0xcc>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d013      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x80>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1c      	ldr	r2, [pc, #112]	@ (80052f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00e      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x80>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1b      	ldr	r2, [pc, #108]	@ (80052f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d009      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x80>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a19      	ldr	r2, [pc, #100]	@ (80052f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d004      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x80>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a18      	ldr	r2, [pc, #96]	@ (80052fc <HAL_TIM_Base_Start_IT+0xdc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d111      	bne.n	80052c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b06      	cmp	r3, #6
 80052b0:	d010      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0201 	orr.w	r2, r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c2:	e007      	b.n	80052d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40010000 	.word	0x40010000
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40000c00 	.word	0x40000c00
 80052f4:	40010400 	.word	0x40010400
 80052f8:	40014000 	.word	0x40014000
 80052fc:	40001800 	.word	0x40001800

08005300 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0201 	bic.w	r2, r2, #1
 8005316:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6a1a      	ldr	r2, [r3, #32]
 800531e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005322:	4013      	ands	r3, r2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10f      	bne.n	8005348 <HAL_TIM_Base_Stop_IT+0x48>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6a1a      	ldr	r2, [r3, #32]
 800532e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005332:	4013      	ands	r3, r2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d107      	bne.n	8005348 <HAL_TIM_Base_Stop_IT+0x48>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0201 	bic.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e041      	b.n	80053f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d106      	bne.n	800538a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7fc ff91 	bl	80022ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2202      	movs	r2, #2
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3304      	adds	r3, #4
 800539a:	4619      	mov	r1, r3
 800539c:	4610      	mov	r0, r2
 800539e:	f000 facf 	bl	8005940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d109      	bne.n	8005420 <HAL_TIM_PWM_Start+0x24>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b01      	cmp	r3, #1
 8005416:	bf14      	ite	ne
 8005418:	2301      	movne	r3, #1
 800541a:	2300      	moveq	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	e022      	b.n	8005466 <HAL_TIM_PWM_Start+0x6a>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b04      	cmp	r3, #4
 8005424:	d109      	bne.n	800543a <HAL_TIM_PWM_Start+0x3e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b01      	cmp	r3, #1
 8005430:	bf14      	ite	ne
 8005432:	2301      	movne	r3, #1
 8005434:	2300      	moveq	r3, #0
 8005436:	b2db      	uxtb	r3, r3
 8005438:	e015      	b.n	8005466 <HAL_TIM_PWM_Start+0x6a>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d109      	bne.n	8005454 <HAL_TIM_PWM_Start+0x58>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b01      	cmp	r3, #1
 800544a:	bf14      	ite	ne
 800544c:	2301      	movne	r3, #1
 800544e:	2300      	moveq	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	e008      	b.n	8005466 <HAL_TIM_PWM_Start+0x6a>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b01      	cmp	r3, #1
 800545e:	bf14      	ite	ne
 8005460:	2301      	movne	r3, #1
 8005462:	2300      	moveq	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e07c      	b.n	8005568 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d104      	bne.n	800547e <HAL_TIM_PWM_Start+0x82>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800547c:	e013      	b.n	80054a6 <HAL_TIM_PWM_Start+0xaa>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b04      	cmp	r3, #4
 8005482:	d104      	bne.n	800548e <HAL_TIM_PWM_Start+0x92>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800548c:	e00b      	b.n	80054a6 <HAL_TIM_PWM_Start+0xaa>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b08      	cmp	r3, #8
 8005492:	d104      	bne.n	800549e <HAL_TIM_PWM_Start+0xa2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800549c:	e003      	b.n	80054a6 <HAL_TIM_PWM_Start+0xaa>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2202      	movs	r2, #2
 80054a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2201      	movs	r2, #1
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fca2 	bl	8005df8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005570 <HAL_TIM_PWM_Start+0x174>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d004      	beq.n	80054c8 <HAL_TIM_PWM_Start+0xcc>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005574 <HAL_TIM_PWM_Start+0x178>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d101      	bne.n	80054cc <HAL_TIM_PWM_Start+0xd0>
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <HAL_TIM_PWM_Start+0xd2>
 80054cc:	2300      	movs	r3, #0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d007      	beq.n	80054e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a22      	ldr	r2, [pc, #136]	@ (8005570 <HAL_TIM_PWM_Start+0x174>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d022      	beq.n	8005532 <HAL_TIM_PWM_Start+0x136>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f4:	d01d      	beq.n	8005532 <HAL_TIM_PWM_Start+0x136>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005578 <HAL_TIM_PWM_Start+0x17c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d018      	beq.n	8005532 <HAL_TIM_PWM_Start+0x136>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1d      	ldr	r2, [pc, #116]	@ (800557c <HAL_TIM_PWM_Start+0x180>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d013      	beq.n	8005532 <HAL_TIM_PWM_Start+0x136>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1c      	ldr	r2, [pc, #112]	@ (8005580 <HAL_TIM_PWM_Start+0x184>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00e      	beq.n	8005532 <HAL_TIM_PWM_Start+0x136>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a16      	ldr	r2, [pc, #88]	@ (8005574 <HAL_TIM_PWM_Start+0x178>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d009      	beq.n	8005532 <HAL_TIM_PWM_Start+0x136>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a18      	ldr	r2, [pc, #96]	@ (8005584 <HAL_TIM_PWM_Start+0x188>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d004      	beq.n	8005532 <HAL_TIM_PWM_Start+0x136>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a16      	ldr	r2, [pc, #88]	@ (8005588 <HAL_TIM_PWM_Start+0x18c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d111      	bne.n	8005556 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b06      	cmp	r3, #6
 8005542:	d010      	beq.n	8005566 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005554:	e007      	b.n	8005566 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0201 	orr.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40010000 	.word	0x40010000
 8005574:	40010400 	.word	0x40010400
 8005578:	40000400 	.word	0x40000400
 800557c:	40000800 	.word	0x40000800
 8005580:	40000c00 	.word	0x40000c00
 8005584:	40014000 	.word	0x40014000
 8005588:	40001800 	.word	0x40001800

0800558c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d020      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01b      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0202 	mvn.w	r2, #2
 80055c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f994 	bl	8005904 <HAL_TIM_IC_CaptureCallback>
 80055dc:	e005      	b.n	80055ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f986 	bl	80058f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f997 	bl	8005918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d020      	beq.n	800563c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01b      	beq.n	800563c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0204 	mvn.w	r2, #4
 800560c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f96e 	bl	8005904 <HAL_TIM_IC_CaptureCallback>
 8005628:	e005      	b.n	8005636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f960 	bl	80058f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f971 	bl	8005918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d020      	beq.n	8005688 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01b      	beq.n	8005688 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0208 	mvn.w	r2, #8
 8005658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2204      	movs	r2, #4
 800565e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f948 	bl	8005904 <HAL_TIM_IC_CaptureCallback>
 8005674:	e005      	b.n	8005682 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f93a 	bl	80058f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f94b 	bl	8005918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	2b00      	cmp	r3, #0
 8005690:	d020      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01b      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0210 	mvn.w	r2, #16
 80056a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2208      	movs	r2, #8
 80056aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f922 	bl	8005904 <HAL_TIM_IC_CaptureCallback>
 80056c0:	e005      	b.n	80056ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f914 	bl	80058f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f925 	bl	8005918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00c      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0201 	mvn.w	r2, #1
 80056f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fc fbc0 	bl	8001e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00c      	beq.n	800571c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fc1a 	bl	8005f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00c      	beq.n	8005740 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f8f6 	bl	800592c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00c      	beq.n	8005764 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f003 0320 	and.w	r3, r3, #32
 8005750:	2b00      	cmp	r3, #0
 8005752:	d007      	beq.n	8005764 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0220 	mvn.w	r2, #32
 800575c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fbec 	bl	8005f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005764:	bf00      	nop
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005778:	2300      	movs	r3, #0
 800577a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005786:	2302      	movs	r3, #2
 8005788:	e0ae      	b.n	80058e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b0c      	cmp	r3, #12
 8005796:	f200 809f 	bhi.w	80058d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800579a:	a201      	add	r2, pc, #4	@ (adr r2, 80057a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800579c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a0:	080057d5 	.word	0x080057d5
 80057a4:	080058d9 	.word	0x080058d9
 80057a8:	080058d9 	.word	0x080058d9
 80057ac:	080058d9 	.word	0x080058d9
 80057b0:	08005815 	.word	0x08005815
 80057b4:	080058d9 	.word	0x080058d9
 80057b8:	080058d9 	.word	0x080058d9
 80057bc:	080058d9 	.word	0x080058d9
 80057c0:	08005857 	.word	0x08005857
 80057c4:	080058d9 	.word	0x080058d9
 80057c8:	080058d9 	.word	0x080058d9
 80057cc:	080058d9 	.word	0x080058d9
 80057d0:	08005897 	.word	0x08005897
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 f95c 	bl	8005a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0208 	orr.w	r2, r2, #8
 80057ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699a      	ldr	r2, [r3, #24]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0204 	bic.w	r2, r2, #4
 80057fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6999      	ldr	r1, [r3, #24]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	691a      	ldr	r2, [r3, #16]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	619a      	str	r2, [r3, #24]
      break;
 8005812:	e064      	b.n	80058de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68b9      	ldr	r1, [r7, #8]
 800581a:	4618      	mov	r0, r3
 800581c:	f000 f9ac 	bl	8005b78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800582e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	699a      	ldr	r2, [r3, #24]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800583e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6999      	ldr	r1, [r3, #24]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	021a      	lsls	r2, r3, #8
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	619a      	str	r2, [r3, #24]
      break;
 8005854:	e043      	b.n	80058de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68b9      	ldr	r1, [r7, #8]
 800585c:	4618      	mov	r0, r3
 800585e:	f000 fa01 	bl	8005c64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69da      	ldr	r2, [r3, #28]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0208 	orr.w	r2, r2, #8
 8005870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69da      	ldr	r2, [r3, #28]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0204 	bic.w	r2, r2, #4
 8005880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69d9      	ldr	r1, [r3, #28]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	61da      	str	r2, [r3, #28]
      break;
 8005894:	e023      	b.n	80058de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fa55 	bl	8005d4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69da      	ldr	r2, [r3, #28]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69da      	ldr	r2, [r3, #28]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69d9      	ldr	r1, [r3, #28]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	021a      	lsls	r2, r3, #8
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	61da      	str	r2, [r3, #28]
      break;
 80058d6:	e002      	b.n	80058de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	75fb      	strb	r3, [r7, #23]
      break;
 80058dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a46      	ldr	r2, [pc, #280]	@ (8005a6c <TIM_Base_SetConfig+0x12c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d013      	beq.n	8005980 <TIM_Base_SetConfig+0x40>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800595e:	d00f      	beq.n	8005980 <TIM_Base_SetConfig+0x40>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a43      	ldr	r2, [pc, #268]	@ (8005a70 <TIM_Base_SetConfig+0x130>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d00b      	beq.n	8005980 <TIM_Base_SetConfig+0x40>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a42      	ldr	r2, [pc, #264]	@ (8005a74 <TIM_Base_SetConfig+0x134>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d007      	beq.n	8005980 <TIM_Base_SetConfig+0x40>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a41      	ldr	r2, [pc, #260]	@ (8005a78 <TIM_Base_SetConfig+0x138>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d003      	beq.n	8005980 <TIM_Base_SetConfig+0x40>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a40      	ldr	r2, [pc, #256]	@ (8005a7c <TIM_Base_SetConfig+0x13c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d108      	bne.n	8005992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a35      	ldr	r2, [pc, #212]	@ (8005a6c <TIM_Base_SetConfig+0x12c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d02b      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059a0:	d027      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a32      	ldr	r2, [pc, #200]	@ (8005a70 <TIM_Base_SetConfig+0x130>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d023      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a31      	ldr	r2, [pc, #196]	@ (8005a74 <TIM_Base_SetConfig+0x134>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d01f      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a30      	ldr	r2, [pc, #192]	@ (8005a78 <TIM_Base_SetConfig+0x138>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d01b      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a2f      	ldr	r2, [pc, #188]	@ (8005a7c <TIM_Base_SetConfig+0x13c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d017      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a2e      	ldr	r2, [pc, #184]	@ (8005a80 <TIM_Base_SetConfig+0x140>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d013      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a2d      	ldr	r2, [pc, #180]	@ (8005a84 <TIM_Base_SetConfig+0x144>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00f      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a2c      	ldr	r2, [pc, #176]	@ (8005a88 <TIM_Base_SetConfig+0x148>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00b      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a2b      	ldr	r2, [pc, #172]	@ (8005a8c <TIM_Base_SetConfig+0x14c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d007      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a2a      	ldr	r2, [pc, #168]	@ (8005a90 <TIM_Base_SetConfig+0x150>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d003      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a29      	ldr	r2, [pc, #164]	@ (8005a94 <TIM_Base_SetConfig+0x154>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d108      	bne.n	8005a04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a10      	ldr	r2, [pc, #64]	@ (8005a6c <TIM_Base_SetConfig+0x12c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d003      	beq.n	8005a38 <TIM_Base_SetConfig+0xf8>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a12      	ldr	r2, [pc, #72]	@ (8005a7c <TIM_Base_SetConfig+0x13c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d103      	bne.n	8005a40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d105      	bne.n	8005a5e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f023 0201 	bic.w	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	611a      	str	r2, [r3, #16]
  }
}
 8005a5e:	bf00      	nop
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	40010000 	.word	0x40010000
 8005a70:	40000400 	.word	0x40000400
 8005a74:	40000800 	.word	0x40000800
 8005a78:	40000c00 	.word	0x40000c00
 8005a7c:	40010400 	.word	0x40010400
 8005a80:	40014000 	.word	0x40014000
 8005a84:	40014400 	.word	0x40014400
 8005a88:	40014800 	.word	0x40014800
 8005a8c:	40001800 	.word	0x40001800
 8005a90:	40001c00 	.word	0x40001c00
 8005a94:	40002000 	.word	0x40002000

08005a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	f023 0201 	bic.w	r2, r3, #1
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0303 	bic.w	r3, r3, #3
 8005ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f023 0302 	bic.w	r3, r3, #2
 8005ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a20      	ldr	r2, [pc, #128]	@ (8005b70 <TIM_OC1_SetConfig+0xd8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d003      	beq.n	8005afc <TIM_OC1_SetConfig+0x64>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a1f      	ldr	r2, [pc, #124]	@ (8005b74 <TIM_OC1_SetConfig+0xdc>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d10c      	bne.n	8005b16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f023 0308 	bic.w	r3, r3, #8
 8005b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f023 0304 	bic.w	r3, r3, #4
 8005b14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a15      	ldr	r2, [pc, #84]	@ (8005b70 <TIM_OC1_SetConfig+0xd8>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d003      	beq.n	8005b26 <TIM_OC1_SetConfig+0x8e>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a14      	ldr	r2, [pc, #80]	@ (8005b74 <TIM_OC1_SetConfig+0xdc>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d111      	bne.n	8005b4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	621a      	str	r2, [r3, #32]
}
 8005b64:	bf00      	nop
 8005b66:	371c      	adds	r7, #28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	40010000 	.word	0x40010000
 8005b74:	40010400 	.word	0x40010400

08005b78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	f023 0210 	bic.w	r2, r3, #16
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f023 0320 	bic.w	r3, r3, #32
 8005bc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a22      	ldr	r2, [pc, #136]	@ (8005c5c <TIM_OC2_SetConfig+0xe4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d003      	beq.n	8005be0 <TIM_OC2_SetConfig+0x68>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a21      	ldr	r2, [pc, #132]	@ (8005c60 <TIM_OC2_SetConfig+0xe8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d10d      	bne.n	8005bfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a17      	ldr	r2, [pc, #92]	@ (8005c5c <TIM_OC2_SetConfig+0xe4>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d003      	beq.n	8005c0c <TIM_OC2_SetConfig+0x94>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a16      	ldr	r2, [pc, #88]	@ (8005c60 <TIM_OC2_SetConfig+0xe8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d113      	bne.n	8005c34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40010400 	.word	0x40010400

08005c64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0303 	bic.w	r3, r3, #3
 8005c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a21      	ldr	r2, [pc, #132]	@ (8005d44 <TIM_OC3_SetConfig+0xe0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d003      	beq.n	8005cca <TIM_OC3_SetConfig+0x66>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a20      	ldr	r2, [pc, #128]	@ (8005d48 <TIM_OC3_SetConfig+0xe4>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d10d      	bne.n	8005ce6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	021b      	lsls	r3, r3, #8
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a16      	ldr	r2, [pc, #88]	@ (8005d44 <TIM_OC3_SetConfig+0xe0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d003      	beq.n	8005cf6 <TIM_OC3_SetConfig+0x92>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a15      	ldr	r2, [pc, #84]	@ (8005d48 <TIM_OC3_SetConfig+0xe4>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d113      	bne.n	8005d1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	621a      	str	r2, [r3, #32]
}
 8005d38:	bf00      	nop
 8005d3a:	371c      	adds	r7, #28
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	40010000 	.word	0x40010000
 8005d48:	40010400 	.word	0x40010400

08005d4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	021b      	lsls	r3, r3, #8
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	031b      	lsls	r3, r3, #12
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a12      	ldr	r2, [pc, #72]	@ (8005df0 <TIM_OC4_SetConfig+0xa4>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_OC4_SetConfig+0x68>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a11      	ldr	r2, [pc, #68]	@ (8005df4 <TIM_OC4_SetConfig+0xa8>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d109      	bne.n	8005dc8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	019b      	lsls	r3, r3, #6
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40010000 	.word	0x40010000
 8005df4:	40010400 	.word	0x40010400

08005df8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a1a      	ldr	r2, [r3, #32]
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	43db      	mvns	r3, r3
 8005e1a:	401a      	ands	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6a1a      	ldr	r2, [r3, #32]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f003 031f 	and.w	r3, r3, #31
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e30:	431a      	orrs	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	621a      	str	r2, [r3, #32]
}
 8005e36:	bf00      	nop
 8005e38:	371c      	adds	r7, #28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e05a      	b.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a21      	ldr	r2, [pc, #132]	@ (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d022      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea8:	d01d      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a1d      	ldr	r2, [pc, #116]	@ (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d018      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d013      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00e      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a18      	ldr	r2, [pc, #96]	@ (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d009      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a17      	ldr	r2, [pc, #92]	@ (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d004      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a15      	ldr	r2, [pc, #84]	@ (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d10c      	bne.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40010000 	.word	0x40010000
 8005f24:	40000400 	.word	0x40000400
 8005f28:	40000800 	.word	0x40000800
 8005f2c:	40000c00 	.word	0x40000c00
 8005f30:	40010400 	.word	0x40010400
 8005f34:	40014000 	.word	0x40014000
 8005f38:	40001800 	.word	0x40001800

08005f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e042      	b.n	8005ffc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fc fa38 	bl	8002400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2224      	movs	r2, #36	@ 0x24
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f82b 	bl	8006004 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695a      	ldr	r2, [r3, #20]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006008:	b0c0      	sub	sp, #256	@ 0x100
 800600a:	af00      	add	r7, sp, #0
 800600c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006020:	68d9      	ldr	r1, [r3, #12]
 8006022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	ea40 0301 	orr.w	r3, r0, r1
 800602c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800602e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	431a      	orrs	r2, r3
 800603c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	431a      	orrs	r2, r3
 8006044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	4313      	orrs	r3, r2
 800604c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800605c:	f021 010c 	bic.w	r1, r1, #12
 8006060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800606a:	430b      	orrs	r3, r1
 800606c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800606e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800607a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800607e:	6999      	ldr	r1, [r3, #24]
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	ea40 0301 	orr.w	r3, r0, r1
 800608a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800608c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4b8f      	ldr	r3, [pc, #572]	@ (80062d0 <UART_SetConfig+0x2cc>)
 8006094:	429a      	cmp	r2, r3
 8006096:	d005      	beq.n	80060a4 <UART_SetConfig+0xa0>
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4b8d      	ldr	r3, [pc, #564]	@ (80062d4 <UART_SetConfig+0x2d0>)
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d104      	bne.n	80060ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060a4:	f7fe fc10 	bl	80048c8 <HAL_RCC_GetPCLK2Freq>
 80060a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80060ac:	e003      	b.n	80060b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060ae:	f7fe fbf7 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 80060b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060c0:	f040 810c 	bne.w	80062dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060c8:	2200      	movs	r2, #0
 80060ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80060d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80060d6:	4622      	mov	r2, r4
 80060d8:	462b      	mov	r3, r5
 80060da:	1891      	adds	r1, r2, r2
 80060dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80060de:	415b      	adcs	r3, r3
 80060e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80060e6:	4621      	mov	r1, r4
 80060e8:	eb12 0801 	adds.w	r8, r2, r1
 80060ec:	4629      	mov	r1, r5
 80060ee:	eb43 0901 	adc.w	r9, r3, r1
 80060f2:	f04f 0200 	mov.w	r2, #0
 80060f6:	f04f 0300 	mov.w	r3, #0
 80060fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006102:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006106:	4690      	mov	r8, r2
 8006108:	4699      	mov	r9, r3
 800610a:	4623      	mov	r3, r4
 800610c:	eb18 0303 	adds.w	r3, r8, r3
 8006110:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006114:	462b      	mov	r3, r5
 8006116:	eb49 0303 	adc.w	r3, r9, r3
 800611a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800611e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800612a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800612e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006132:	460b      	mov	r3, r1
 8006134:	18db      	adds	r3, r3, r3
 8006136:	653b      	str	r3, [r7, #80]	@ 0x50
 8006138:	4613      	mov	r3, r2
 800613a:	eb42 0303 	adc.w	r3, r2, r3
 800613e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006140:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006144:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006148:	f7fa fd9e 	bl	8000c88 <__aeabi_uldivmod>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4b61      	ldr	r3, [pc, #388]	@ (80062d8 <UART_SetConfig+0x2d4>)
 8006152:	fba3 2302 	umull	r2, r3, r3, r2
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	011c      	lsls	r4, r3, #4
 800615a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800615e:	2200      	movs	r2, #0
 8006160:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006164:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006168:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800616c:	4642      	mov	r2, r8
 800616e:	464b      	mov	r3, r9
 8006170:	1891      	adds	r1, r2, r2
 8006172:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006174:	415b      	adcs	r3, r3
 8006176:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006178:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800617c:	4641      	mov	r1, r8
 800617e:	eb12 0a01 	adds.w	sl, r2, r1
 8006182:	4649      	mov	r1, r9
 8006184:	eb43 0b01 	adc.w	fp, r3, r1
 8006188:	f04f 0200 	mov.w	r2, #0
 800618c:	f04f 0300 	mov.w	r3, #0
 8006190:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006194:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006198:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800619c:	4692      	mov	sl, r2
 800619e:	469b      	mov	fp, r3
 80061a0:	4643      	mov	r3, r8
 80061a2:	eb1a 0303 	adds.w	r3, sl, r3
 80061a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061aa:	464b      	mov	r3, r9
 80061ac:	eb4b 0303 	adc.w	r3, fp, r3
 80061b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80061c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061c8:	460b      	mov	r3, r1
 80061ca:	18db      	adds	r3, r3, r3
 80061cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80061ce:	4613      	mov	r3, r2
 80061d0:	eb42 0303 	adc.w	r3, r2, r3
 80061d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80061d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80061da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80061de:	f7fa fd53 	bl	8000c88 <__aeabi_uldivmod>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4611      	mov	r1, r2
 80061e8:	4b3b      	ldr	r3, [pc, #236]	@ (80062d8 <UART_SetConfig+0x2d4>)
 80061ea:	fba3 2301 	umull	r2, r3, r3, r1
 80061ee:	095b      	lsrs	r3, r3, #5
 80061f0:	2264      	movs	r2, #100	@ 0x64
 80061f2:	fb02 f303 	mul.w	r3, r2, r3
 80061f6:	1acb      	subs	r3, r1, r3
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80061fe:	4b36      	ldr	r3, [pc, #216]	@ (80062d8 <UART_SetConfig+0x2d4>)
 8006200:	fba3 2302 	umull	r2, r3, r3, r2
 8006204:	095b      	lsrs	r3, r3, #5
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800620c:	441c      	add	r4, r3
 800620e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006212:	2200      	movs	r2, #0
 8006214:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006218:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800621c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006220:	4642      	mov	r2, r8
 8006222:	464b      	mov	r3, r9
 8006224:	1891      	adds	r1, r2, r2
 8006226:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006228:	415b      	adcs	r3, r3
 800622a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800622c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006230:	4641      	mov	r1, r8
 8006232:	1851      	adds	r1, r2, r1
 8006234:	6339      	str	r1, [r7, #48]	@ 0x30
 8006236:	4649      	mov	r1, r9
 8006238:	414b      	adcs	r3, r1
 800623a:	637b      	str	r3, [r7, #52]	@ 0x34
 800623c:	f04f 0200 	mov.w	r2, #0
 8006240:	f04f 0300 	mov.w	r3, #0
 8006244:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006248:	4659      	mov	r1, fp
 800624a:	00cb      	lsls	r3, r1, #3
 800624c:	4651      	mov	r1, sl
 800624e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006252:	4651      	mov	r1, sl
 8006254:	00ca      	lsls	r2, r1, #3
 8006256:	4610      	mov	r0, r2
 8006258:	4619      	mov	r1, r3
 800625a:	4603      	mov	r3, r0
 800625c:	4642      	mov	r2, r8
 800625e:	189b      	adds	r3, r3, r2
 8006260:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006264:	464b      	mov	r3, r9
 8006266:	460a      	mov	r2, r1
 8006268:	eb42 0303 	adc.w	r3, r2, r3
 800626c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800627c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006280:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006284:	460b      	mov	r3, r1
 8006286:	18db      	adds	r3, r3, r3
 8006288:	62bb      	str	r3, [r7, #40]	@ 0x28
 800628a:	4613      	mov	r3, r2
 800628c:	eb42 0303 	adc.w	r3, r2, r3
 8006290:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006292:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006296:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800629a:	f7fa fcf5 	bl	8000c88 <__aeabi_uldivmod>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4b0d      	ldr	r3, [pc, #52]	@ (80062d8 <UART_SetConfig+0x2d4>)
 80062a4:	fba3 1302 	umull	r1, r3, r3, r2
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	2164      	movs	r1, #100	@ 0x64
 80062ac:	fb01 f303 	mul.w	r3, r1, r3
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	3332      	adds	r3, #50	@ 0x32
 80062b6:	4a08      	ldr	r2, [pc, #32]	@ (80062d8 <UART_SetConfig+0x2d4>)
 80062b8:	fba2 2303 	umull	r2, r3, r2, r3
 80062bc:	095b      	lsrs	r3, r3, #5
 80062be:	f003 0207 	and.w	r2, r3, #7
 80062c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4422      	add	r2, r4
 80062ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062cc:	e106      	b.n	80064dc <UART_SetConfig+0x4d8>
 80062ce:	bf00      	nop
 80062d0:	40011000 	.word	0x40011000
 80062d4:	40011400 	.word	0x40011400
 80062d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062e0:	2200      	movs	r2, #0
 80062e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80062ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80062ee:	4642      	mov	r2, r8
 80062f0:	464b      	mov	r3, r9
 80062f2:	1891      	adds	r1, r2, r2
 80062f4:	6239      	str	r1, [r7, #32]
 80062f6:	415b      	adcs	r3, r3
 80062f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062fe:	4641      	mov	r1, r8
 8006300:	1854      	adds	r4, r2, r1
 8006302:	4649      	mov	r1, r9
 8006304:	eb43 0501 	adc.w	r5, r3, r1
 8006308:	f04f 0200 	mov.w	r2, #0
 800630c:	f04f 0300 	mov.w	r3, #0
 8006310:	00eb      	lsls	r3, r5, #3
 8006312:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006316:	00e2      	lsls	r2, r4, #3
 8006318:	4614      	mov	r4, r2
 800631a:	461d      	mov	r5, r3
 800631c:	4643      	mov	r3, r8
 800631e:	18e3      	adds	r3, r4, r3
 8006320:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006324:	464b      	mov	r3, r9
 8006326:	eb45 0303 	adc.w	r3, r5, r3
 800632a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800632e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800633a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800633e:	f04f 0200 	mov.w	r2, #0
 8006342:	f04f 0300 	mov.w	r3, #0
 8006346:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800634a:	4629      	mov	r1, r5
 800634c:	008b      	lsls	r3, r1, #2
 800634e:	4621      	mov	r1, r4
 8006350:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006354:	4621      	mov	r1, r4
 8006356:	008a      	lsls	r2, r1, #2
 8006358:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800635c:	f7fa fc94 	bl	8000c88 <__aeabi_uldivmod>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4b60      	ldr	r3, [pc, #384]	@ (80064e8 <UART_SetConfig+0x4e4>)
 8006366:	fba3 2302 	umull	r2, r3, r3, r2
 800636a:	095b      	lsrs	r3, r3, #5
 800636c:	011c      	lsls	r4, r3, #4
 800636e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006372:	2200      	movs	r2, #0
 8006374:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006378:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800637c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006380:	4642      	mov	r2, r8
 8006382:	464b      	mov	r3, r9
 8006384:	1891      	adds	r1, r2, r2
 8006386:	61b9      	str	r1, [r7, #24]
 8006388:	415b      	adcs	r3, r3
 800638a:	61fb      	str	r3, [r7, #28]
 800638c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006390:	4641      	mov	r1, r8
 8006392:	1851      	adds	r1, r2, r1
 8006394:	6139      	str	r1, [r7, #16]
 8006396:	4649      	mov	r1, r9
 8006398:	414b      	adcs	r3, r1
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	f04f 0300 	mov.w	r3, #0
 80063a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063a8:	4659      	mov	r1, fp
 80063aa:	00cb      	lsls	r3, r1, #3
 80063ac:	4651      	mov	r1, sl
 80063ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063b2:	4651      	mov	r1, sl
 80063b4:	00ca      	lsls	r2, r1, #3
 80063b6:	4610      	mov	r0, r2
 80063b8:	4619      	mov	r1, r3
 80063ba:	4603      	mov	r3, r0
 80063bc:	4642      	mov	r2, r8
 80063be:	189b      	adds	r3, r3, r2
 80063c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063c4:	464b      	mov	r3, r9
 80063c6:	460a      	mov	r2, r1
 80063c8:	eb42 0303 	adc.w	r3, r2, r3
 80063cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80063e8:	4649      	mov	r1, r9
 80063ea:	008b      	lsls	r3, r1, #2
 80063ec:	4641      	mov	r1, r8
 80063ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063f2:	4641      	mov	r1, r8
 80063f4:	008a      	lsls	r2, r1, #2
 80063f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80063fa:	f7fa fc45 	bl	8000c88 <__aeabi_uldivmod>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	4611      	mov	r1, r2
 8006404:	4b38      	ldr	r3, [pc, #224]	@ (80064e8 <UART_SetConfig+0x4e4>)
 8006406:	fba3 2301 	umull	r2, r3, r3, r1
 800640a:	095b      	lsrs	r3, r3, #5
 800640c:	2264      	movs	r2, #100	@ 0x64
 800640e:	fb02 f303 	mul.w	r3, r2, r3
 8006412:	1acb      	subs	r3, r1, r3
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	3332      	adds	r3, #50	@ 0x32
 8006418:	4a33      	ldr	r2, [pc, #204]	@ (80064e8 <UART_SetConfig+0x4e4>)
 800641a:	fba2 2303 	umull	r2, r3, r2, r3
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006424:	441c      	add	r4, r3
 8006426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800642a:	2200      	movs	r2, #0
 800642c:	673b      	str	r3, [r7, #112]	@ 0x70
 800642e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006430:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006434:	4642      	mov	r2, r8
 8006436:	464b      	mov	r3, r9
 8006438:	1891      	adds	r1, r2, r2
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	415b      	adcs	r3, r3
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006444:	4641      	mov	r1, r8
 8006446:	1851      	adds	r1, r2, r1
 8006448:	6039      	str	r1, [r7, #0]
 800644a:	4649      	mov	r1, r9
 800644c:	414b      	adcs	r3, r1
 800644e:	607b      	str	r3, [r7, #4]
 8006450:	f04f 0200 	mov.w	r2, #0
 8006454:	f04f 0300 	mov.w	r3, #0
 8006458:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800645c:	4659      	mov	r1, fp
 800645e:	00cb      	lsls	r3, r1, #3
 8006460:	4651      	mov	r1, sl
 8006462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006466:	4651      	mov	r1, sl
 8006468:	00ca      	lsls	r2, r1, #3
 800646a:	4610      	mov	r0, r2
 800646c:	4619      	mov	r1, r3
 800646e:	4603      	mov	r3, r0
 8006470:	4642      	mov	r2, r8
 8006472:	189b      	adds	r3, r3, r2
 8006474:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006476:	464b      	mov	r3, r9
 8006478:	460a      	mov	r2, r1
 800647a:	eb42 0303 	adc.w	r3, r2, r3
 800647e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	663b      	str	r3, [r7, #96]	@ 0x60
 800648a:	667a      	str	r2, [r7, #100]	@ 0x64
 800648c:	f04f 0200 	mov.w	r2, #0
 8006490:	f04f 0300 	mov.w	r3, #0
 8006494:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006498:	4649      	mov	r1, r9
 800649a:	008b      	lsls	r3, r1, #2
 800649c:	4641      	mov	r1, r8
 800649e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064a2:	4641      	mov	r1, r8
 80064a4:	008a      	lsls	r2, r1, #2
 80064a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80064aa:	f7fa fbed 	bl	8000c88 <__aeabi_uldivmod>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4b0d      	ldr	r3, [pc, #52]	@ (80064e8 <UART_SetConfig+0x4e4>)
 80064b4:	fba3 1302 	umull	r1, r3, r3, r2
 80064b8:	095b      	lsrs	r3, r3, #5
 80064ba:	2164      	movs	r1, #100	@ 0x64
 80064bc:	fb01 f303 	mul.w	r3, r1, r3
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	3332      	adds	r3, #50	@ 0x32
 80064c6:	4a08      	ldr	r2, [pc, #32]	@ (80064e8 <UART_SetConfig+0x4e4>)
 80064c8:	fba2 2303 	umull	r2, r3, r2, r3
 80064cc:	095b      	lsrs	r3, r3, #5
 80064ce:	f003 020f 	and.w	r2, r3, #15
 80064d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4422      	add	r2, r4
 80064da:	609a      	str	r2, [r3, #8]
}
 80064dc:	bf00      	nop
 80064de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80064e2:	46bd      	mov	sp, r7
 80064e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064e8:	51eb851f 	.word	0x51eb851f

080064ec <__cvt>:
 80064ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064f0:	ec57 6b10 	vmov	r6, r7, d0
 80064f4:	2f00      	cmp	r7, #0
 80064f6:	460c      	mov	r4, r1
 80064f8:	4619      	mov	r1, r3
 80064fa:	463b      	mov	r3, r7
 80064fc:	bfbb      	ittet	lt
 80064fe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006502:	461f      	movlt	r7, r3
 8006504:	2300      	movge	r3, #0
 8006506:	232d      	movlt	r3, #45	@ 0x2d
 8006508:	700b      	strb	r3, [r1, #0]
 800650a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800650c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006510:	4691      	mov	r9, r2
 8006512:	f023 0820 	bic.w	r8, r3, #32
 8006516:	bfbc      	itt	lt
 8006518:	4632      	movlt	r2, r6
 800651a:	4616      	movlt	r6, r2
 800651c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006520:	d005      	beq.n	800652e <__cvt+0x42>
 8006522:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006526:	d100      	bne.n	800652a <__cvt+0x3e>
 8006528:	3401      	adds	r4, #1
 800652a:	2102      	movs	r1, #2
 800652c:	e000      	b.n	8006530 <__cvt+0x44>
 800652e:	2103      	movs	r1, #3
 8006530:	ab03      	add	r3, sp, #12
 8006532:	9301      	str	r3, [sp, #4]
 8006534:	ab02      	add	r3, sp, #8
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	ec47 6b10 	vmov	d0, r6, r7
 800653c:	4653      	mov	r3, sl
 800653e:	4622      	mov	r2, r4
 8006540:	f000 fe5a 	bl	80071f8 <_dtoa_r>
 8006544:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006548:	4605      	mov	r5, r0
 800654a:	d119      	bne.n	8006580 <__cvt+0x94>
 800654c:	f019 0f01 	tst.w	r9, #1
 8006550:	d00e      	beq.n	8006570 <__cvt+0x84>
 8006552:	eb00 0904 	add.w	r9, r0, r4
 8006556:	2200      	movs	r2, #0
 8006558:	2300      	movs	r3, #0
 800655a:	4630      	mov	r0, r6
 800655c:	4639      	mov	r1, r7
 800655e:	f7fa fad3 	bl	8000b08 <__aeabi_dcmpeq>
 8006562:	b108      	cbz	r0, 8006568 <__cvt+0x7c>
 8006564:	f8cd 900c 	str.w	r9, [sp, #12]
 8006568:	2230      	movs	r2, #48	@ 0x30
 800656a:	9b03      	ldr	r3, [sp, #12]
 800656c:	454b      	cmp	r3, r9
 800656e:	d31e      	bcc.n	80065ae <__cvt+0xc2>
 8006570:	9b03      	ldr	r3, [sp, #12]
 8006572:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006574:	1b5b      	subs	r3, r3, r5
 8006576:	4628      	mov	r0, r5
 8006578:	6013      	str	r3, [r2, #0]
 800657a:	b004      	add	sp, #16
 800657c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006580:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006584:	eb00 0904 	add.w	r9, r0, r4
 8006588:	d1e5      	bne.n	8006556 <__cvt+0x6a>
 800658a:	7803      	ldrb	r3, [r0, #0]
 800658c:	2b30      	cmp	r3, #48	@ 0x30
 800658e:	d10a      	bne.n	80065a6 <__cvt+0xba>
 8006590:	2200      	movs	r2, #0
 8006592:	2300      	movs	r3, #0
 8006594:	4630      	mov	r0, r6
 8006596:	4639      	mov	r1, r7
 8006598:	f7fa fab6 	bl	8000b08 <__aeabi_dcmpeq>
 800659c:	b918      	cbnz	r0, 80065a6 <__cvt+0xba>
 800659e:	f1c4 0401 	rsb	r4, r4, #1
 80065a2:	f8ca 4000 	str.w	r4, [sl]
 80065a6:	f8da 3000 	ldr.w	r3, [sl]
 80065aa:	4499      	add	r9, r3
 80065ac:	e7d3      	b.n	8006556 <__cvt+0x6a>
 80065ae:	1c59      	adds	r1, r3, #1
 80065b0:	9103      	str	r1, [sp, #12]
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	e7d9      	b.n	800656a <__cvt+0x7e>

080065b6 <__exponent>:
 80065b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065b8:	2900      	cmp	r1, #0
 80065ba:	bfba      	itte	lt
 80065bc:	4249      	neglt	r1, r1
 80065be:	232d      	movlt	r3, #45	@ 0x2d
 80065c0:	232b      	movge	r3, #43	@ 0x2b
 80065c2:	2909      	cmp	r1, #9
 80065c4:	7002      	strb	r2, [r0, #0]
 80065c6:	7043      	strb	r3, [r0, #1]
 80065c8:	dd29      	ble.n	800661e <__exponent+0x68>
 80065ca:	f10d 0307 	add.w	r3, sp, #7
 80065ce:	461d      	mov	r5, r3
 80065d0:	270a      	movs	r7, #10
 80065d2:	461a      	mov	r2, r3
 80065d4:	fbb1 f6f7 	udiv	r6, r1, r7
 80065d8:	fb07 1416 	mls	r4, r7, r6, r1
 80065dc:	3430      	adds	r4, #48	@ 0x30
 80065de:	f802 4c01 	strb.w	r4, [r2, #-1]
 80065e2:	460c      	mov	r4, r1
 80065e4:	2c63      	cmp	r4, #99	@ 0x63
 80065e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80065ea:	4631      	mov	r1, r6
 80065ec:	dcf1      	bgt.n	80065d2 <__exponent+0x1c>
 80065ee:	3130      	adds	r1, #48	@ 0x30
 80065f0:	1e94      	subs	r4, r2, #2
 80065f2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065f6:	1c41      	adds	r1, r0, #1
 80065f8:	4623      	mov	r3, r4
 80065fa:	42ab      	cmp	r3, r5
 80065fc:	d30a      	bcc.n	8006614 <__exponent+0x5e>
 80065fe:	f10d 0309 	add.w	r3, sp, #9
 8006602:	1a9b      	subs	r3, r3, r2
 8006604:	42ac      	cmp	r4, r5
 8006606:	bf88      	it	hi
 8006608:	2300      	movhi	r3, #0
 800660a:	3302      	adds	r3, #2
 800660c:	4403      	add	r3, r0
 800660e:	1a18      	subs	r0, r3, r0
 8006610:	b003      	add	sp, #12
 8006612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006614:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006618:	f801 6f01 	strb.w	r6, [r1, #1]!
 800661c:	e7ed      	b.n	80065fa <__exponent+0x44>
 800661e:	2330      	movs	r3, #48	@ 0x30
 8006620:	3130      	adds	r1, #48	@ 0x30
 8006622:	7083      	strb	r3, [r0, #2]
 8006624:	70c1      	strb	r1, [r0, #3]
 8006626:	1d03      	adds	r3, r0, #4
 8006628:	e7f1      	b.n	800660e <__exponent+0x58>
	...

0800662c <_printf_float>:
 800662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006630:	b08d      	sub	sp, #52	@ 0x34
 8006632:	460c      	mov	r4, r1
 8006634:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006638:	4616      	mov	r6, r2
 800663a:	461f      	mov	r7, r3
 800663c:	4605      	mov	r5, r0
 800663e:	f000 fcdb 	bl	8006ff8 <_localeconv_r>
 8006642:	6803      	ldr	r3, [r0, #0]
 8006644:	9304      	str	r3, [sp, #16]
 8006646:	4618      	mov	r0, r3
 8006648:	f7f9 fe32 	bl	80002b0 <strlen>
 800664c:	2300      	movs	r3, #0
 800664e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006650:	f8d8 3000 	ldr.w	r3, [r8]
 8006654:	9005      	str	r0, [sp, #20]
 8006656:	3307      	adds	r3, #7
 8006658:	f023 0307 	bic.w	r3, r3, #7
 800665c:	f103 0208 	add.w	r2, r3, #8
 8006660:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006664:	f8d4 b000 	ldr.w	fp, [r4]
 8006668:	f8c8 2000 	str.w	r2, [r8]
 800666c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006670:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006674:	9307      	str	r3, [sp, #28]
 8006676:	f8cd 8018 	str.w	r8, [sp, #24]
 800667a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800667e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006682:	4b9c      	ldr	r3, [pc, #624]	@ (80068f4 <_printf_float+0x2c8>)
 8006684:	f04f 32ff 	mov.w	r2, #4294967295
 8006688:	f7fa fa70 	bl	8000b6c <__aeabi_dcmpun>
 800668c:	bb70      	cbnz	r0, 80066ec <_printf_float+0xc0>
 800668e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006692:	4b98      	ldr	r3, [pc, #608]	@ (80068f4 <_printf_float+0x2c8>)
 8006694:	f04f 32ff 	mov.w	r2, #4294967295
 8006698:	f7fa fa4a 	bl	8000b30 <__aeabi_dcmple>
 800669c:	bb30      	cbnz	r0, 80066ec <_printf_float+0xc0>
 800669e:	2200      	movs	r2, #0
 80066a0:	2300      	movs	r3, #0
 80066a2:	4640      	mov	r0, r8
 80066a4:	4649      	mov	r1, r9
 80066a6:	f7fa fa39 	bl	8000b1c <__aeabi_dcmplt>
 80066aa:	b110      	cbz	r0, 80066b2 <_printf_float+0x86>
 80066ac:	232d      	movs	r3, #45	@ 0x2d
 80066ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066b2:	4a91      	ldr	r2, [pc, #580]	@ (80068f8 <_printf_float+0x2cc>)
 80066b4:	4b91      	ldr	r3, [pc, #580]	@ (80068fc <_printf_float+0x2d0>)
 80066b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80066ba:	bf94      	ite	ls
 80066bc:	4690      	movls	r8, r2
 80066be:	4698      	movhi	r8, r3
 80066c0:	2303      	movs	r3, #3
 80066c2:	6123      	str	r3, [r4, #16]
 80066c4:	f02b 0304 	bic.w	r3, fp, #4
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	f04f 0900 	mov.w	r9, #0
 80066ce:	9700      	str	r7, [sp, #0]
 80066d0:	4633      	mov	r3, r6
 80066d2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80066d4:	4621      	mov	r1, r4
 80066d6:	4628      	mov	r0, r5
 80066d8:	f000 f9d2 	bl	8006a80 <_printf_common>
 80066dc:	3001      	adds	r0, #1
 80066de:	f040 808d 	bne.w	80067fc <_printf_float+0x1d0>
 80066e2:	f04f 30ff 	mov.w	r0, #4294967295
 80066e6:	b00d      	add	sp, #52	@ 0x34
 80066e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ec:	4642      	mov	r2, r8
 80066ee:	464b      	mov	r3, r9
 80066f0:	4640      	mov	r0, r8
 80066f2:	4649      	mov	r1, r9
 80066f4:	f7fa fa3a 	bl	8000b6c <__aeabi_dcmpun>
 80066f8:	b140      	cbz	r0, 800670c <_printf_float+0xe0>
 80066fa:	464b      	mov	r3, r9
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	bfbc      	itt	lt
 8006700:	232d      	movlt	r3, #45	@ 0x2d
 8006702:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006706:	4a7e      	ldr	r2, [pc, #504]	@ (8006900 <_printf_float+0x2d4>)
 8006708:	4b7e      	ldr	r3, [pc, #504]	@ (8006904 <_printf_float+0x2d8>)
 800670a:	e7d4      	b.n	80066b6 <_printf_float+0x8a>
 800670c:	6863      	ldr	r3, [r4, #4]
 800670e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006712:	9206      	str	r2, [sp, #24]
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	d13b      	bne.n	8006790 <_printf_float+0x164>
 8006718:	2306      	movs	r3, #6
 800671a:	6063      	str	r3, [r4, #4]
 800671c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006720:	2300      	movs	r3, #0
 8006722:	6022      	str	r2, [r4, #0]
 8006724:	9303      	str	r3, [sp, #12]
 8006726:	ab0a      	add	r3, sp, #40	@ 0x28
 8006728:	e9cd a301 	strd	sl, r3, [sp, #4]
 800672c:	ab09      	add	r3, sp, #36	@ 0x24
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	6861      	ldr	r1, [r4, #4]
 8006732:	ec49 8b10 	vmov	d0, r8, r9
 8006736:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800673a:	4628      	mov	r0, r5
 800673c:	f7ff fed6 	bl	80064ec <__cvt>
 8006740:	9b06      	ldr	r3, [sp, #24]
 8006742:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006744:	2b47      	cmp	r3, #71	@ 0x47
 8006746:	4680      	mov	r8, r0
 8006748:	d129      	bne.n	800679e <_printf_float+0x172>
 800674a:	1cc8      	adds	r0, r1, #3
 800674c:	db02      	blt.n	8006754 <_printf_float+0x128>
 800674e:	6863      	ldr	r3, [r4, #4]
 8006750:	4299      	cmp	r1, r3
 8006752:	dd41      	ble.n	80067d8 <_printf_float+0x1ac>
 8006754:	f1aa 0a02 	sub.w	sl, sl, #2
 8006758:	fa5f fa8a 	uxtb.w	sl, sl
 800675c:	3901      	subs	r1, #1
 800675e:	4652      	mov	r2, sl
 8006760:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006764:	9109      	str	r1, [sp, #36]	@ 0x24
 8006766:	f7ff ff26 	bl	80065b6 <__exponent>
 800676a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800676c:	1813      	adds	r3, r2, r0
 800676e:	2a01      	cmp	r2, #1
 8006770:	4681      	mov	r9, r0
 8006772:	6123      	str	r3, [r4, #16]
 8006774:	dc02      	bgt.n	800677c <_printf_float+0x150>
 8006776:	6822      	ldr	r2, [r4, #0]
 8006778:	07d2      	lsls	r2, r2, #31
 800677a:	d501      	bpl.n	8006780 <_printf_float+0x154>
 800677c:	3301      	adds	r3, #1
 800677e:	6123      	str	r3, [r4, #16]
 8006780:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0a2      	beq.n	80066ce <_printf_float+0xa2>
 8006788:	232d      	movs	r3, #45	@ 0x2d
 800678a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800678e:	e79e      	b.n	80066ce <_printf_float+0xa2>
 8006790:	9a06      	ldr	r2, [sp, #24]
 8006792:	2a47      	cmp	r2, #71	@ 0x47
 8006794:	d1c2      	bne.n	800671c <_printf_float+0xf0>
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1c0      	bne.n	800671c <_printf_float+0xf0>
 800679a:	2301      	movs	r3, #1
 800679c:	e7bd      	b.n	800671a <_printf_float+0xee>
 800679e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067a2:	d9db      	bls.n	800675c <_printf_float+0x130>
 80067a4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80067a8:	d118      	bne.n	80067dc <_printf_float+0x1b0>
 80067aa:	2900      	cmp	r1, #0
 80067ac:	6863      	ldr	r3, [r4, #4]
 80067ae:	dd0b      	ble.n	80067c8 <_printf_float+0x19c>
 80067b0:	6121      	str	r1, [r4, #16]
 80067b2:	b913      	cbnz	r3, 80067ba <_printf_float+0x18e>
 80067b4:	6822      	ldr	r2, [r4, #0]
 80067b6:	07d0      	lsls	r0, r2, #31
 80067b8:	d502      	bpl.n	80067c0 <_printf_float+0x194>
 80067ba:	3301      	adds	r3, #1
 80067bc:	440b      	add	r3, r1
 80067be:	6123      	str	r3, [r4, #16]
 80067c0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80067c2:	f04f 0900 	mov.w	r9, #0
 80067c6:	e7db      	b.n	8006780 <_printf_float+0x154>
 80067c8:	b913      	cbnz	r3, 80067d0 <_printf_float+0x1a4>
 80067ca:	6822      	ldr	r2, [r4, #0]
 80067cc:	07d2      	lsls	r2, r2, #31
 80067ce:	d501      	bpl.n	80067d4 <_printf_float+0x1a8>
 80067d0:	3302      	adds	r3, #2
 80067d2:	e7f4      	b.n	80067be <_printf_float+0x192>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e7f2      	b.n	80067be <_printf_float+0x192>
 80067d8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80067dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067de:	4299      	cmp	r1, r3
 80067e0:	db05      	blt.n	80067ee <_printf_float+0x1c2>
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	6121      	str	r1, [r4, #16]
 80067e6:	07d8      	lsls	r0, r3, #31
 80067e8:	d5ea      	bpl.n	80067c0 <_printf_float+0x194>
 80067ea:	1c4b      	adds	r3, r1, #1
 80067ec:	e7e7      	b.n	80067be <_printf_float+0x192>
 80067ee:	2900      	cmp	r1, #0
 80067f0:	bfd4      	ite	le
 80067f2:	f1c1 0202 	rsble	r2, r1, #2
 80067f6:	2201      	movgt	r2, #1
 80067f8:	4413      	add	r3, r2
 80067fa:	e7e0      	b.n	80067be <_printf_float+0x192>
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	055a      	lsls	r2, r3, #21
 8006800:	d407      	bmi.n	8006812 <_printf_float+0x1e6>
 8006802:	6923      	ldr	r3, [r4, #16]
 8006804:	4642      	mov	r2, r8
 8006806:	4631      	mov	r1, r6
 8006808:	4628      	mov	r0, r5
 800680a:	47b8      	blx	r7
 800680c:	3001      	adds	r0, #1
 800680e:	d12b      	bne.n	8006868 <_printf_float+0x23c>
 8006810:	e767      	b.n	80066e2 <_printf_float+0xb6>
 8006812:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006816:	f240 80dd 	bls.w	80069d4 <_printf_float+0x3a8>
 800681a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800681e:	2200      	movs	r2, #0
 8006820:	2300      	movs	r3, #0
 8006822:	f7fa f971 	bl	8000b08 <__aeabi_dcmpeq>
 8006826:	2800      	cmp	r0, #0
 8006828:	d033      	beq.n	8006892 <_printf_float+0x266>
 800682a:	4a37      	ldr	r2, [pc, #220]	@ (8006908 <_printf_float+0x2dc>)
 800682c:	2301      	movs	r3, #1
 800682e:	4631      	mov	r1, r6
 8006830:	4628      	mov	r0, r5
 8006832:	47b8      	blx	r7
 8006834:	3001      	adds	r0, #1
 8006836:	f43f af54 	beq.w	80066e2 <_printf_float+0xb6>
 800683a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800683e:	4543      	cmp	r3, r8
 8006840:	db02      	blt.n	8006848 <_printf_float+0x21c>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	07d8      	lsls	r0, r3, #31
 8006846:	d50f      	bpl.n	8006868 <_printf_float+0x23c>
 8006848:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800684c:	4631      	mov	r1, r6
 800684e:	4628      	mov	r0, r5
 8006850:	47b8      	blx	r7
 8006852:	3001      	adds	r0, #1
 8006854:	f43f af45 	beq.w	80066e2 <_printf_float+0xb6>
 8006858:	f04f 0900 	mov.w	r9, #0
 800685c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006860:	f104 0a1a 	add.w	sl, r4, #26
 8006864:	45c8      	cmp	r8, r9
 8006866:	dc09      	bgt.n	800687c <_printf_float+0x250>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	079b      	lsls	r3, r3, #30
 800686c:	f100 8103 	bmi.w	8006a76 <_printf_float+0x44a>
 8006870:	68e0      	ldr	r0, [r4, #12]
 8006872:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006874:	4298      	cmp	r0, r3
 8006876:	bfb8      	it	lt
 8006878:	4618      	movlt	r0, r3
 800687a:	e734      	b.n	80066e6 <_printf_float+0xba>
 800687c:	2301      	movs	r3, #1
 800687e:	4652      	mov	r2, sl
 8006880:	4631      	mov	r1, r6
 8006882:	4628      	mov	r0, r5
 8006884:	47b8      	blx	r7
 8006886:	3001      	adds	r0, #1
 8006888:	f43f af2b 	beq.w	80066e2 <_printf_float+0xb6>
 800688c:	f109 0901 	add.w	r9, r9, #1
 8006890:	e7e8      	b.n	8006864 <_printf_float+0x238>
 8006892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006894:	2b00      	cmp	r3, #0
 8006896:	dc39      	bgt.n	800690c <_printf_float+0x2e0>
 8006898:	4a1b      	ldr	r2, [pc, #108]	@ (8006908 <_printf_float+0x2dc>)
 800689a:	2301      	movs	r3, #1
 800689c:	4631      	mov	r1, r6
 800689e:	4628      	mov	r0, r5
 80068a0:	47b8      	blx	r7
 80068a2:	3001      	adds	r0, #1
 80068a4:	f43f af1d 	beq.w	80066e2 <_printf_float+0xb6>
 80068a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80068ac:	ea59 0303 	orrs.w	r3, r9, r3
 80068b0:	d102      	bne.n	80068b8 <_printf_float+0x28c>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	07d9      	lsls	r1, r3, #31
 80068b6:	d5d7      	bpl.n	8006868 <_printf_float+0x23c>
 80068b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068bc:	4631      	mov	r1, r6
 80068be:	4628      	mov	r0, r5
 80068c0:	47b8      	blx	r7
 80068c2:	3001      	adds	r0, #1
 80068c4:	f43f af0d 	beq.w	80066e2 <_printf_float+0xb6>
 80068c8:	f04f 0a00 	mov.w	sl, #0
 80068cc:	f104 0b1a 	add.w	fp, r4, #26
 80068d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068d2:	425b      	negs	r3, r3
 80068d4:	4553      	cmp	r3, sl
 80068d6:	dc01      	bgt.n	80068dc <_printf_float+0x2b0>
 80068d8:	464b      	mov	r3, r9
 80068da:	e793      	b.n	8006804 <_printf_float+0x1d8>
 80068dc:	2301      	movs	r3, #1
 80068de:	465a      	mov	r2, fp
 80068e0:	4631      	mov	r1, r6
 80068e2:	4628      	mov	r0, r5
 80068e4:	47b8      	blx	r7
 80068e6:	3001      	adds	r0, #1
 80068e8:	f43f aefb 	beq.w	80066e2 <_printf_float+0xb6>
 80068ec:	f10a 0a01 	add.w	sl, sl, #1
 80068f0:	e7ee      	b.n	80068d0 <_printf_float+0x2a4>
 80068f2:	bf00      	nop
 80068f4:	7fefffff 	.word	0x7fefffff
 80068f8:	0800921c 	.word	0x0800921c
 80068fc:	08009220 	.word	0x08009220
 8006900:	08009224 	.word	0x08009224
 8006904:	08009228 	.word	0x08009228
 8006908:	0800922c 	.word	0x0800922c
 800690c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800690e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006912:	4553      	cmp	r3, sl
 8006914:	bfa8      	it	ge
 8006916:	4653      	movge	r3, sl
 8006918:	2b00      	cmp	r3, #0
 800691a:	4699      	mov	r9, r3
 800691c:	dc36      	bgt.n	800698c <_printf_float+0x360>
 800691e:	f04f 0b00 	mov.w	fp, #0
 8006922:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006926:	f104 021a 	add.w	r2, r4, #26
 800692a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800692c:	9306      	str	r3, [sp, #24]
 800692e:	eba3 0309 	sub.w	r3, r3, r9
 8006932:	455b      	cmp	r3, fp
 8006934:	dc31      	bgt.n	800699a <_printf_float+0x36e>
 8006936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006938:	459a      	cmp	sl, r3
 800693a:	dc3a      	bgt.n	80069b2 <_printf_float+0x386>
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	07da      	lsls	r2, r3, #31
 8006940:	d437      	bmi.n	80069b2 <_printf_float+0x386>
 8006942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006944:	ebaa 0903 	sub.w	r9, sl, r3
 8006948:	9b06      	ldr	r3, [sp, #24]
 800694a:	ebaa 0303 	sub.w	r3, sl, r3
 800694e:	4599      	cmp	r9, r3
 8006950:	bfa8      	it	ge
 8006952:	4699      	movge	r9, r3
 8006954:	f1b9 0f00 	cmp.w	r9, #0
 8006958:	dc33      	bgt.n	80069c2 <_printf_float+0x396>
 800695a:	f04f 0800 	mov.w	r8, #0
 800695e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006962:	f104 0b1a 	add.w	fp, r4, #26
 8006966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006968:	ebaa 0303 	sub.w	r3, sl, r3
 800696c:	eba3 0309 	sub.w	r3, r3, r9
 8006970:	4543      	cmp	r3, r8
 8006972:	f77f af79 	ble.w	8006868 <_printf_float+0x23c>
 8006976:	2301      	movs	r3, #1
 8006978:	465a      	mov	r2, fp
 800697a:	4631      	mov	r1, r6
 800697c:	4628      	mov	r0, r5
 800697e:	47b8      	blx	r7
 8006980:	3001      	adds	r0, #1
 8006982:	f43f aeae 	beq.w	80066e2 <_printf_float+0xb6>
 8006986:	f108 0801 	add.w	r8, r8, #1
 800698a:	e7ec      	b.n	8006966 <_printf_float+0x33a>
 800698c:	4642      	mov	r2, r8
 800698e:	4631      	mov	r1, r6
 8006990:	4628      	mov	r0, r5
 8006992:	47b8      	blx	r7
 8006994:	3001      	adds	r0, #1
 8006996:	d1c2      	bne.n	800691e <_printf_float+0x2f2>
 8006998:	e6a3      	b.n	80066e2 <_printf_float+0xb6>
 800699a:	2301      	movs	r3, #1
 800699c:	4631      	mov	r1, r6
 800699e:	4628      	mov	r0, r5
 80069a0:	9206      	str	r2, [sp, #24]
 80069a2:	47b8      	blx	r7
 80069a4:	3001      	adds	r0, #1
 80069a6:	f43f ae9c 	beq.w	80066e2 <_printf_float+0xb6>
 80069aa:	9a06      	ldr	r2, [sp, #24]
 80069ac:	f10b 0b01 	add.w	fp, fp, #1
 80069b0:	e7bb      	b.n	800692a <_printf_float+0x2fe>
 80069b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069b6:	4631      	mov	r1, r6
 80069b8:	4628      	mov	r0, r5
 80069ba:	47b8      	blx	r7
 80069bc:	3001      	adds	r0, #1
 80069be:	d1c0      	bne.n	8006942 <_printf_float+0x316>
 80069c0:	e68f      	b.n	80066e2 <_printf_float+0xb6>
 80069c2:	9a06      	ldr	r2, [sp, #24]
 80069c4:	464b      	mov	r3, r9
 80069c6:	4442      	add	r2, r8
 80069c8:	4631      	mov	r1, r6
 80069ca:	4628      	mov	r0, r5
 80069cc:	47b8      	blx	r7
 80069ce:	3001      	adds	r0, #1
 80069d0:	d1c3      	bne.n	800695a <_printf_float+0x32e>
 80069d2:	e686      	b.n	80066e2 <_printf_float+0xb6>
 80069d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069d8:	f1ba 0f01 	cmp.w	sl, #1
 80069dc:	dc01      	bgt.n	80069e2 <_printf_float+0x3b6>
 80069de:	07db      	lsls	r3, r3, #31
 80069e0:	d536      	bpl.n	8006a50 <_printf_float+0x424>
 80069e2:	2301      	movs	r3, #1
 80069e4:	4642      	mov	r2, r8
 80069e6:	4631      	mov	r1, r6
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b8      	blx	r7
 80069ec:	3001      	adds	r0, #1
 80069ee:	f43f ae78 	beq.w	80066e2 <_printf_float+0xb6>
 80069f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069f6:	4631      	mov	r1, r6
 80069f8:	4628      	mov	r0, r5
 80069fa:	47b8      	blx	r7
 80069fc:	3001      	adds	r0, #1
 80069fe:	f43f ae70 	beq.w	80066e2 <_printf_float+0xb6>
 8006a02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a06:	2200      	movs	r2, #0
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a0e:	f7fa f87b 	bl	8000b08 <__aeabi_dcmpeq>
 8006a12:	b9c0      	cbnz	r0, 8006a46 <_printf_float+0x41a>
 8006a14:	4653      	mov	r3, sl
 8006a16:	f108 0201 	add.w	r2, r8, #1
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	47b8      	blx	r7
 8006a20:	3001      	adds	r0, #1
 8006a22:	d10c      	bne.n	8006a3e <_printf_float+0x412>
 8006a24:	e65d      	b.n	80066e2 <_printf_float+0xb6>
 8006a26:	2301      	movs	r3, #1
 8006a28:	465a      	mov	r2, fp
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	47b8      	blx	r7
 8006a30:	3001      	adds	r0, #1
 8006a32:	f43f ae56 	beq.w	80066e2 <_printf_float+0xb6>
 8006a36:	f108 0801 	add.w	r8, r8, #1
 8006a3a:	45d0      	cmp	r8, sl
 8006a3c:	dbf3      	blt.n	8006a26 <_printf_float+0x3fa>
 8006a3e:	464b      	mov	r3, r9
 8006a40:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a44:	e6df      	b.n	8006806 <_printf_float+0x1da>
 8006a46:	f04f 0800 	mov.w	r8, #0
 8006a4a:	f104 0b1a 	add.w	fp, r4, #26
 8006a4e:	e7f4      	b.n	8006a3a <_printf_float+0x40e>
 8006a50:	2301      	movs	r3, #1
 8006a52:	4642      	mov	r2, r8
 8006a54:	e7e1      	b.n	8006a1a <_printf_float+0x3ee>
 8006a56:	2301      	movs	r3, #1
 8006a58:	464a      	mov	r2, r9
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	47b8      	blx	r7
 8006a60:	3001      	adds	r0, #1
 8006a62:	f43f ae3e 	beq.w	80066e2 <_printf_float+0xb6>
 8006a66:	f108 0801 	add.w	r8, r8, #1
 8006a6a:	68e3      	ldr	r3, [r4, #12]
 8006a6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a6e:	1a5b      	subs	r3, r3, r1
 8006a70:	4543      	cmp	r3, r8
 8006a72:	dcf0      	bgt.n	8006a56 <_printf_float+0x42a>
 8006a74:	e6fc      	b.n	8006870 <_printf_float+0x244>
 8006a76:	f04f 0800 	mov.w	r8, #0
 8006a7a:	f104 0919 	add.w	r9, r4, #25
 8006a7e:	e7f4      	b.n	8006a6a <_printf_float+0x43e>

08006a80 <_printf_common>:
 8006a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a84:	4616      	mov	r6, r2
 8006a86:	4698      	mov	r8, r3
 8006a88:	688a      	ldr	r2, [r1, #8]
 8006a8a:	690b      	ldr	r3, [r1, #16]
 8006a8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a90:	4293      	cmp	r3, r2
 8006a92:	bfb8      	it	lt
 8006a94:	4613      	movlt	r3, r2
 8006a96:	6033      	str	r3, [r6, #0]
 8006a98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a9c:	4607      	mov	r7, r0
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	b10a      	cbz	r2, 8006aa6 <_printf_common+0x26>
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	6033      	str	r3, [r6, #0]
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	0699      	lsls	r1, r3, #26
 8006aaa:	bf42      	ittt	mi
 8006aac:	6833      	ldrmi	r3, [r6, #0]
 8006aae:	3302      	addmi	r3, #2
 8006ab0:	6033      	strmi	r3, [r6, #0]
 8006ab2:	6825      	ldr	r5, [r4, #0]
 8006ab4:	f015 0506 	ands.w	r5, r5, #6
 8006ab8:	d106      	bne.n	8006ac8 <_printf_common+0x48>
 8006aba:	f104 0a19 	add.w	sl, r4, #25
 8006abe:	68e3      	ldr	r3, [r4, #12]
 8006ac0:	6832      	ldr	r2, [r6, #0]
 8006ac2:	1a9b      	subs	r3, r3, r2
 8006ac4:	42ab      	cmp	r3, r5
 8006ac6:	dc26      	bgt.n	8006b16 <_printf_common+0x96>
 8006ac8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006acc:	6822      	ldr	r2, [r4, #0]
 8006ace:	3b00      	subs	r3, #0
 8006ad0:	bf18      	it	ne
 8006ad2:	2301      	movne	r3, #1
 8006ad4:	0692      	lsls	r2, r2, #26
 8006ad6:	d42b      	bmi.n	8006b30 <_printf_common+0xb0>
 8006ad8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006adc:	4641      	mov	r1, r8
 8006ade:	4638      	mov	r0, r7
 8006ae0:	47c8      	blx	r9
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	d01e      	beq.n	8006b24 <_printf_common+0xa4>
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	6922      	ldr	r2, [r4, #16]
 8006aea:	f003 0306 	and.w	r3, r3, #6
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	bf02      	ittt	eq
 8006af2:	68e5      	ldreq	r5, [r4, #12]
 8006af4:	6833      	ldreq	r3, [r6, #0]
 8006af6:	1aed      	subeq	r5, r5, r3
 8006af8:	68a3      	ldr	r3, [r4, #8]
 8006afa:	bf0c      	ite	eq
 8006afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b00:	2500      	movne	r5, #0
 8006b02:	4293      	cmp	r3, r2
 8006b04:	bfc4      	itt	gt
 8006b06:	1a9b      	subgt	r3, r3, r2
 8006b08:	18ed      	addgt	r5, r5, r3
 8006b0a:	2600      	movs	r6, #0
 8006b0c:	341a      	adds	r4, #26
 8006b0e:	42b5      	cmp	r5, r6
 8006b10:	d11a      	bne.n	8006b48 <_printf_common+0xc8>
 8006b12:	2000      	movs	r0, #0
 8006b14:	e008      	b.n	8006b28 <_printf_common+0xa8>
 8006b16:	2301      	movs	r3, #1
 8006b18:	4652      	mov	r2, sl
 8006b1a:	4641      	mov	r1, r8
 8006b1c:	4638      	mov	r0, r7
 8006b1e:	47c8      	blx	r9
 8006b20:	3001      	adds	r0, #1
 8006b22:	d103      	bne.n	8006b2c <_printf_common+0xac>
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295
 8006b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b2c:	3501      	adds	r5, #1
 8006b2e:	e7c6      	b.n	8006abe <_printf_common+0x3e>
 8006b30:	18e1      	adds	r1, r4, r3
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	2030      	movs	r0, #48	@ 0x30
 8006b36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b3a:	4422      	add	r2, r4
 8006b3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b44:	3302      	adds	r3, #2
 8006b46:	e7c7      	b.n	8006ad8 <_printf_common+0x58>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	4622      	mov	r2, r4
 8006b4c:	4641      	mov	r1, r8
 8006b4e:	4638      	mov	r0, r7
 8006b50:	47c8      	blx	r9
 8006b52:	3001      	adds	r0, #1
 8006b54:	d0e6      	beq.n	8006b24 <_printf_common+0xa4>
 8006b56:	3601      	adds	r6, #1
 8006b58:	e7d9      	b.n	8006b0e <_printf_common+0x8e>
	...

08006b5c <_printf_i>:
 8006b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b60:	7e0f      	ldrb	r7, [r1, #24]
 8006b62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b64:	2f78      	cmp	r7, #120	@ 0x78
 8006b66:	4691      	mov	r9, r2
 8006b68:	4680      	mov	r8, r0
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	469a      	mov	sl, r3
 8006b6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b72:	d807      	bhi.n	8006b84 <_printf_i+0x28>
 8006b74:	2f62      	cmp	r7, #98	@ 0x62
 8006b76:	d80a      	bhi.n	8006b8e <_printf_i+0x32>
 8006b78:	2f00      	cmp	r7, #0
 8006b7a:	f000 80d2 	beq.w	8006d22 <_printf_i+0x1c6>
 8006b7e:	2f58      	cmp	r7, #88	@ 0x58
 8006b80:	f000 80b9 	beq.w	8006cf6 <_printf_i+0x19a>
 8006b84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b8c:	e03a      	b.n	8006c04 <_printf_i+0xa8>
 8006b8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b92:	2b15      	cmp	r3, #21
 8006b94:	d8f6      	bhi.n	8006b84 <_printf_i+0x28>
 8006b96:	a101      	add	r1, pc, #4	@ (adr r1, 8006b9c <_printf_i+0x40>)
 8006b98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b9c:	08006bf5 	.word	0x08006bf5
 8006ba0:	08006c09 	.word	0x08006c09
 8006ba4:	08006b85 	.word	0x08006b85
 8006ba8:	08006b85 	.word	0x08006b85
 8006bac:	08006b85 	.word	0x08006b85
 8006bb0:	08006b85 	.word	0x08006b85
 8006bb4:	08006c09 	.word	0x08006c09
 8006bb8:	08006b85 	.word	0x08006b85
 8006bbc:	08006b85 	.word	0x08006b85
 8006bc0:	08006b85 	.word	0x08006b85
 8006bc4:	08006b85 	.word	0x08006b85
 8006bc8:	08006d09 	.word	0x08006d09
 8006bcc:	08006c33 	.word	0x08006c33
 8006bd0:	08006cc3 	.word	0x08006cc3
 8006bd4:	08006b85 	.word	0x08006b85
 8006bd8:	08006b85 	.word	0x08006b85
 8006bdc:	08006d2b 	.word	0x08006d2b
 8006be0:	08006b85 	.word	0x08006b85
 8006be4:	08006c33 	.word	0x08006c33
 8006be8:	08006b85 	.word	0x08006b85
 8006bec:	08006b85 	.word	0x08006b85
 8006bf0:	08006ccb 	.word	0x08006ccb
 8006bf4:	6833      	ldr	r3, [r6, #0]
 8006bf6:	1d1a      	adds	r2, r3, #4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6032      	str	r2, [r6, #0]
 8006bfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c04:	2301      	movs	r3, #1
 8006c06:	e09d      	b.n	8006d44 <_printf_i+0x1e8>
 8006c08:	6833      	ldr	r3, [r6, #0]
 8006c0a:	6820      	ldr	r0, [r4, #0]
 8006c0c:	1d19      	adds	r1, r3, #4
 8006c0e:	6031      	str	r1, [r6, #0]
 8006c10:	0606      	lsls	r6, r0, #24
 8006c12:	d501      	bpl.n	8006c18 <_printf_i+0xbc>
 8006c14:	681d      	ldr	r5, [r3, #0]
 8006c16:	e003      	b.n	8006c20 <_printf_i+0xc4>
 8006c18:	0645      	lsls	r5, r0, #25
 8006c1a:	d5fb      	bpl.n	8006c14 <_printf_i+0xb8>
 8006c1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c20:	2d00      	cmp	r5, #0
 8006c22:	da03      	bge.n	8006c2c <_printf_i+0xd0>
 8006c24:	232d      	movs	r3, #45	@ 0x2d
 8006c26:	426d      	negs	r5, r5
 8006c28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c2c:	4859      	ldr	r0, [pc, #356]	@ (8006d94 <_printf_i+0x238>)
 8006c2e:	230a      	movs	r3, #10
 8006c30:	e011      	b.n	8006c56 <_printf_i+0xfa>
 8006c32:	6821      	ldr	r1, [r4, #0]
 8006c34:	6833      	ldr	r3, [r6, #0]
 8006c36:	0608      	lsls	r0, r1, #24
 8006c38:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c3c:	d402      	bmi.n	8006c44 <_printf_i+0xe8>
 8006c3e:	0649      	lsls	r1, r1, #25
 8006c40:	bf48      	it	mi
 8006c42:	b2ad      	uxthmi	r5, r5
 8006c44:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c46:	4853      	ldr	r0, [pc, #332]	@ (8006d94 <_printf_i+0x238>)
 8006c48:	6033      	str	r3, [r6, #0]
 8006c4a:	bf14      	ite	ne
 8006c4c:	230a      	movne	r3, #10
 8006c4e:	2308      	moveq	r3, #8
 8006c50:	2100      	movs	r1, #0
 8006c52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c56:	6866      	ldr	r6, [r4, #4]
 8006c58:	60a6      	str	r6, [r4, #8]
 8006c5a:	2e00      	cmp	r6, #0
 8006c5c:	bfa2      	ittt	ge
 8006c5e:	6821      	ldrge	r1, [r4, #0]
 8006c60:	f021 0104 	bicge.w	r1, r1, #4
 8006c64:	6021      	strge	r1, [r4, #0]
 8006c66:	b90d      	cbnz	r5, 8006c6c <_printf_i+0x110>
 8006c68:	2e00      	cmp	r6, #0
 8006c6a:	d04b      	beq.n	8006d04 <_printf_i+0x1a8>
 8006c6c:	4616      	mov	r6, r2
 8006c6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c72:	fb03 5711 	mls	r7, r3, r1, r5
 8006c76:	5dc7      	ldrb	r7, [r0, r7]
 8006c78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c7c:	462f      	mov	r7, r5
 8006c7e:	42bb      	cmp	r3, r7
 8006c80:	460d      	mov	r5, r1
 8006c82:	d9f4      	bls.n	8006c6e <_printf_i+0x112>
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	d10b      	bne.n	8006ca0 <_printf_i+0x144>
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	07df      	lsls	r7, r3, #31
 8006c8c:	d508      	bpl.n	8006ca0 <_printf_i+0x144>
 8006c8e:	6923      	ldr	r3, [r4, #16]
 8006c90:	6861      	ldr	r1, [r4, #4]
 8006c92:	4299      	cmp	r1, r3
 8006c94:	bfde      	ittt	le
 8006c96:	2330      	movle	r3, #48	@ 0x30
 8006c98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ca0:	1b92      	subs	r2, r2, r6
 8006ca2:	6122      	str	r2, [r4, #16]
 8006ca4:	f8cd a000 	str.w	sl, [sp]
 8006ca8:	464b      	mov	r3, r9
 8006caa:	aa03      	add	r2, sp, #12
 8006cac:	4621      	mov	r1, r4
 8006cae:	4640      	mov	r0, r8
 8006cb0:	f7ff fee6 	bl	8006a80 <_printf_common>
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d14a      	bne.n	8006d4e <_printf_i+0x1f2>
 8006cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cbc:	b004      	add	sp, #16
 8006cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	f043 0320 	orr.w	r3, r3, #32
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	4833      	ldr	r0, [pc, #204]	@ (8006d98 <_printf_i+0x23c>)
 8006ccc:	2778      	movs	r7, #120	@ 0x78
 8006cce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	6831      	ldr	r1, [r6, #0]
 8006cd6:	061f      	lsls	r7, r3, #24
 8006cd8:	f851 5b04 	ldr.w	r5, [r1], #4
 8006cdc:	d402      	bmi.n	8006ce4 <_printf_i+0x188>
 8006cde:	065f      	lsls	r7, r3, #25
 8006ce0:	bf48      	it	mi
 8006ce2:	b2ad      	uxthmi	r5, r5
 8006ce4:	6031      	str	r1, [r6, #0]
 8006ce6:	07d9      	lsls	r1, r3, #31
 8006ce8:	bf44      	itt	mi
 8006cea:	f043 0320 	orrmi.w	r3, r3, #32
 8006cee:	6023      	strmi	r3, [r4, #0]
 8006cf0:	b11d      	cbz	r5, 8006cfa <_printf_i+0x19e>
 8006cf2:	2310      	movs	r3, #16
 8006cf4:	e7ac      	b.n	8006c50 <_printf_i+0xf4>
 8006cf6:	4827      	ldr	r0, [pc, #156]	@ (8006d94 <_printf_i+0x238>)
 8006cf8:	e7e9      	b.n	8006cce <_printf_i+0x172>
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	f023 0320 	bic.w	r3, r3, #32
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	e7f6      	b.n	8006cf2 <_printf_i+0x196>
 8006d04:	4616      	mov	r6, r2
 8006d06:	e7bd      	b.n	8006c84 <_printf_i+0x128>
 8006d08:	6833      	ldr	r3, [r6, #0]
 8006d0a:	6825      	ldr	r5, [r4, #0]
 8006d0c:	6961      	ldr	r1, [r4, #20]
 8006d0e:	1d18      	adds	r0, r3, #4
 8006d10:	6030      	str	r0, [r6, #0]
 8006d12:	062e      	lsls	r6, r5, #24
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	d501      	bpl.n	8006d1c <_printf_i+0x1c0>
 8006d18:	6019      	str	r1, [r3, #0]
 8006d1a:	e002      	b.n	8006d22 <_printf_i+0x1c6>
 8006d1c:	0668      	lsls	r0, r5, #25
 8006d1e:	d5fb      	bpl.n	8006d18 <_printf_i+0x1bc>
 8006d20:	8019      	strh	r1, [r3, #0]
 8006d22:	2300      	movs	r3, #0
 8006d24:	6123      	str	r3, [r4, #16]
 8006d26:	4616      	mov	r6, r2
 8006d28:	e7bc      	b.n	8006ca4 <_printf_i+0x148>
 8006d2a:	6833      	ldr	r3, [r6, #0]
 8006d2c:	1d1a      	adds	r2, r3, #4
 8006d2e:	6032      	str	r2, [r6, #0]
 8006d30:	681e      	ldr	r6, [r3, #0]
 8006d32:	6862      	ldr	r2, [r4, #4]
 8006d34:	2100      	movs	r1, #0
 8006d36:	4630      	mov	r0, r6
 8006d38:	f7f9 fa6a 	bl	8000210 <memchr>
 8006d3c:	b108      	cbz	r0, 8006d42 <_printf_i+0x1e6>
 8006d3e:	1b80      	subs	r0, r0, r6
 8006d40:	6060      	str	r0, [r4, #4]
 8006d42:	6863      	ldr	r3, [r4, #4]
 8006d44:	6123      	str	r3, [r4, #16]
 8006d46:	2300      	movs	r3, #0
 8006d48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d4c:	e7aa      	b.n	8006ca4 <_printf_i+0x148>
 8006d4e:	6923      	ldr	r3, [r4, #16]
 8006d50:	4632      	mov	r2, r6
 8006d52:	4649      	mov	r1, r9
 8006d54:	4640      	mov	r0, r8
 8006d56:	47d0      	blx	sl
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d0ad      	beq.n	8006cb8 <_printf_i+0x15c>
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	079b      	lsls	r3, r3, #30
 8006d60:	d413      	bmi.n	8006d8a <_printf_i+0x22e>
 8006d62:	68e0      	ldr	r0, [r4, #12]
 8006d64:	9b03      	ldr	r3, [sp, #12]
 8006d66:	4298      	cmp	r0, r3
 8006d68:	bfb8      	it	lt
 8006d6a:	4618      	movlt	r0, r3
 8006d6c:	e7a6      	b.n	8006cbc <_printf_i+0x160>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	4632      	mov	r2, r6
 8006d72:	4649      	mov	r1, r9
 8006d74:	4640      	mov	r0, r8
 8006d76:	47d0      	blx	sl
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d09d      	beq.n	8006cb8 <_printf_i+0x15c>
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	68e3      	ldr	r3, [r4, #12]
 8006d80:	9903      	ldr	r1, [sp, #12]
 8006d82:	1a5b      	subs	r3, r3, r1
 8006d84:	42ab      	cmp	r3, r5
 8006d86:	dcf2      	bgt.n	8006d6e <_printf_i+0x212>
 8006d88:	e7eb      	b.n	8006d62 <_printf_i+0x206>
 8006d8a:	2500      	movs	r5, #0
 8006d8c:	f104 0619 	add.w	r6, r4, #25
 8006d90:	e7f5      	b.n	8006d7e <_printf_i+0x222>
 8006d92:	bf00      	nop
 8006d94:	0800922e 	.word	0x0800922e
 8006d98:	0800923f 	.word	0x0800923f

08006d9c <std>:
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	b510      	push	{r4, lr}
 8006da0:	4604      	mov	r4, r0
 8006da2:	e9c0 3300 	strd	r3, r3, [r0]
 8006da6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006daa:	6083      	str	r3, [r0, #8]
 8006dac:	8181      	strh	r1, [r0, #12]
 8006dae:	6643      	str	r3, [r0, #100]	@ 0x64
 8006db0:	81c2      	strh	r2, [r0, #14]
 8006db2:	6183      	str	r3, [r0, #24]
 8006db4:	4619      	mov	r1, r3
 8006db6:	2208      	movs	r2, #8
 8006db8:	305c      	adds	r0, #92	@ 0x5c
 8006dba:	f000 f914 	bl	8006fe6 <memset>
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006df4 <std+0x58>)
 8006dc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006df8 <std+0x5c>)
 8006dc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006dfc <std+0x60>)
 8006dc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006dca:	4b0d      	ldr	r3, [pc, #52]	@ (8006e00 <std+0x64>)
 8006dcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dce:	4b0d      	ldr	r3, [pc, #52]	@ (8006e04 <std+0x68>)
 8006dd0:	6224      	str	r4, [r4, #32]
 8006dd2:	429c      	cmp	r4, r3
 8006dd4:	d006      	beq.n	8006de4 <std+0x48>
 8006dd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006dda:	4294      	cmp	r4, r2
 8006ddc:	d002      	beq.n	8006de4 <std+0x48>
 8006dde:	33d0      	adds	r3, #208	@ 0xd0
 8006de0:	429c      	cmp	r4, r3
 8006de2:	d105      	bne.n	8006df0 <std+0x54>
 8006de4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dec:	f000 b978 	b.w	80070e0 <__retarget_lock_init_recursive>
 8006df0:	bd10      	pop	{r4, pc}
 8006df2:	bf00      	nop
 8006df4:	08006f61 	.word	0x08006f61
 8006df8:	08006f83 	.word	0x08006f83
 8006dfc:	08006fbb 	.word	0x08006fbb
 8006e00:	08006fdf 	.word	0x08006fdf
 8006e04:	20000400 	.word	0x20000400

08006e08 <stdio_exit_handler>:
 8006e08:	4a02      	ldr	r2, [pc, #8]	@ (8006e14 <stdio_exit_handler+0xc>)
 8006e0a:	4903      	ldr	r1, [pc, #12]	@ (8006e18 <stdio_exit_handler+0x10>)
 8006e0c:	4803      	ldr	r0, [pc, #12]	@ (8006e1c <stdio_exit_handler+0x14>)
 8006e0e:	f000 b869 	b.w	8006ee4 <_fwalk_sglue>
 8006e12:	bf00      	nop
 8006e14:	2000000c 	.word	0x2000000c
 8006e18:	08008a3d 	.word	0x08008a3d
 8006e1c:	2000001c 	.word	0x2000001c

08006e20 <cleanup_stdio>:
 8006e20:	6841      	ldr	r1, [r0, #4]
 8006e22:	4b0c      	ldr	r3, [pc, #48]	@ (8006e54 <cleanup_stdio+0x34>)
 8006e24:	4299      	cmp	r1, r3
 8006e26:	b510      	push	{r4, lr}
 8006e28:	4604      	mov	r4, r0
 8006e2a:	d001      	beq.n	8006e30 <cleanup_stdio+0x10>
 8006e2c:	f001 fe06 	bl	8008a3c <_fflush_r>
 8006e30:	68a1      	ldr	r1, [r4, #8]
 8006e32:	4b09      	ldr	r3, [pc, #36]	@ (8006e58 <cleanup_stdio+0x38>)
 8006e34:	4299      	cmp	r1, r3
 8006e36:	d002      	beq.n	8006e3e <cleanup_stdio+0x1e>
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f001 fdff 	bl	8008a3c <_fflush_r>
 8006e3e:	68e1      	ldr	r1, [r4, #12]
 8006e40:	4b06      	ldr	r3, [pc, #24]	@ (8006e5c <cleanup_stdio+0x3c>)
 8006e42:	4299      	cmp	r1, r3
 8006e44:	d004      	beq.n	8006e50 <cleanup_stdio+0x30>
 8006e46:	4620      	mov	r0, r4
 8006e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e4c:	f001 bdf6 	b.w	8008a3c <_fflush_r>
 8006e50:	bd10      	pop	{r4, pc}
 8006e52:	bf00      	nop
 8006e54:	20000400 	.word	0x20000400
 8006e58:	20000468 	.word	0x20000468
 8006e5c:	200004d0 	.word	0x200004d0

08006e60 <global_stdio_init.part.0>:
 8006e60:	b510      	push	{r4, lr}
 8006e62:	4b0b      	ldr	r3, [pc, #44]	@ (8006e90 <global_stdio_init.part.0+0x30>)
 8006e64:	4c0b      	ldr	r4, [pc, #44]	@ (8006e94 <global_stdio_init.part.0+0x34>)
 8006e66:	4a0c      	ldr	r2, [pc, #48]	@ (8006e98 <global_stdio_init.part.0+0x38>)
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2104      	movs	r1, #4
 8006e70:	f7ff ff94 	bl	8006d9c <std>
 8006e74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e78:	2201      	movs	r2, #1
 8006e7a:	2109      	movs	r1, #9
 8006e7c:	f7ff ff8e 	bl	8006d9c <std>
 8006e80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e84:	2202      	movs	r2, #2
 8006e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e8a:	2112      	movs	r1, #18
 8006e8c:	f7ff bf86 	b.w	8006d9c <std>
 8006e90:	20000538 	.word	0x20000538
 8006e94:	20000400 	.word	0x20000400
 8006e98:	08006e09 	.word	0x08006e09

08006e9c <__sfp_lock_acquire>:
 8006e9c:	4801      	ldr	r0, [pc, #4]	@ (8006ea4 <__sfp_lock_acquire+0x8>)
 8006e9e:	f000 b920 	b.w	80070e2 <__retarget_lock_acquire_recursive>
 8006ea2:	bf00      	nop
 8006ea4:	20000541 	.word	0x20000541

08006ea8 <__sfp_lock_release>:
 8006ea8:	4801      	ldr	r0, [pc, #4]	@ (8006eb0 <__sfp_lock_release+0x8>)
 8006eaa:	f000 b91b 	b.w	80070e4 <__retarget_lock_release_recursive>
 8006eae:	bf00      	nop
 8006eb0:	20000541 	.word	0x20000541

08006eb4 <__sinit>:
 8006eb4:	b510      	push	{r4, lr}
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	f7ff fff0 	bl	8006e9c <__sfp_lock_acquire>
 8006ebc:	6a23      	ldr	r3, [r4, #32]
 8006ebe:	b11b      	cbz	r3, 8006ec8 <__sinit+0x14>
 8006ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec4:	f7ff bff0 	b.w	8006ea8 <__sfp_lock_release>
 8006ec8:	4b04      	ldr	r3, [pc, #16]	@ (8006edc <__sinit+0x28>)
 8006eca:	6223      	str	r3, [r4, #32]
 8006ecc:	4b04      	ldr	r3, [pc, #16]	@ (8006ee0 <__sinit+0x2c>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1f5      	bne.n	8006ec0 <__sinit+0xc>
 8006ed4:	f7ff ffc4 	bl	8006e60 <global_stdio_init.part.0>
 8006ed8:	e7f2      	b.n	8006ec0 <__sinit+0xc>
 8006eda:	bf00      	nop
 8006edc:	08006e21 	.word	0x08006e21
 8006ee0:	20000538 	.word	0x20000538

08006ee4 <_fwalk_sglue>:
 8006ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee8:	4607      	mov	r7, r0
 8006eea:	4688      	mov	r8, r1
 8006eec:	4614      	mov	r4, r2
 8006eee:	2600      	movs	r6, #0
 8006ef0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ef4:	f1b9 0901 	subs.w	r9, r9, #1
 8006ef8:	d505      	bpl.n	8006f06 <_fwalk_sglue+0x22>
 8006efa:	6824      	ldr	r4, [r4, #0]
 8006efc:	2c00      	cmp	r4, #0
 8006efe:	d1f7      	bne.n	8006ef0 <_fwalk_sglue+0xc>
 8006f00:	4630      	mov	r0, r6
 8006f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f06:	89ab      	ldrh	r3, [r5, #12]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d907      	bls.n	8006f1c <_fwalk_sglue+0x38>
 8006f0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f10:	3301      	adds	r3, #1
 8006f12:	d003      	beq.n	8006f1c <_fwalk_sglue+0x38>
 8006f14:	4629      	mov	r1, r5
 8006f16:	4638      	mov	r0, r7
 8006f18:	47c0      	blx	r8
 8006f1a:	4306      	orrs	r6, r0
 8006f1c:	3568      	adds	r5, #104	@ 0x68
 8006f1e:	e7e9      	b.n	8006ef4 <_fwalk_sglue+0x10>

08006f20 <siprintf>:
 8006f20:	b40e      	push	{r1, r2, r3}
 8006f22:	b500      	push	{lr}
 8006f24:	b09c      	sub	sp, #112	@ 0x70
 8006f26:	ab1d      	add	r3, sp, #116	@ 0x74
 8006f28:	9002      	str	r0, [sp, #8]
 8006f2a:	9006      	str	r0, [sp, #24]
 8006f2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f30:	4809      	ldr	r0, [pc, #36]	@ (8006f58 <siprintf+0x38>)
 8006f32:	9107      	str	r1, [sp, #28]
 8006f34:	9104      	str	r1, [sp, #16]
 8006f36:	4909      	ldr	r1, [pc, #36]	@ (8006f5c <siprintf+0x3c>)
 8006f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f3c:	9105      	str	r1, [sp, #20]
 8006f3e:	6800      	ldr	r0, [r0, #0]
 8006f40:	9301      	str	r3, [sp, #4]
 8006f42:	a902      	add	r1, sp, #8
 8006f44:	f001 fbfa 	bl	800873c <_svfiprintf_r>
 8006f48:	9b02      	ldr	r3, [sp, #8]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	701a      	strb	r2, [r3, #0]
 8006f4e:	b01c      	add	sp, #112	@ 0x70
 8006f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f54:	b003      	add	sp, #12
 8006f56:	4770      	bx	lr
 8006f58:	20000018 	.word	0x20000018
 8006f5c:	ffff0208 	.word	0xffff0208

08006f60 <__sread>:
 8006f60:	b510      	push	{r4, lr}
 8006f62:	460c      	mov	r4, r1
 8006f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f68:	f000 f86c 	bl	8007044 <_read_r>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	bfab      	itete	ge
 8006f70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f72:	89a3      	ldrhlt	r3, [r4, #12]
 8006f74:	181b      	addge	r3, r3, r0
 8006f76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f7a:	bfac      	ite	ge
 8006f7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f7e:	81a3      	strhlt	r3, [r4, #12]
 8006f80:	bd10      	pop	{r4, pc}

08006f82 <__swrite>:
 8006f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f86:	461f      	mov	r7, r3
 8006f88:	898b      	ldrh	r3, [r1, #12]
 8006f8a:	05db      	lsls	r3, r3, #23
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	460c      	mov	r4, r1
 8006f90:	4616      	mov	r6, r2
 8006f92:	d505      	bpl.n	8006fa0 <__swrite+0x1e>
 8006f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f98:	2302      	movs	r3, #2
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f000 f840 	bl	8007020 <_lseek_r>
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006faa:	81a3      	strh	r3, [r4, #12]
 8006fac:	4632      	mov	r2, r6
 8006fae:	463b      	mov	r3, r7
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb6:	f000 b857 	b.w	8007068 <_write_r>

08006fba <__sseek>:
 8006fba:	b510      	push	{r4, lr}
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc2:	f000 f82d 	bl	8007020 <_lseek_r>
 8006fc6:	1c43      	adds	r3, r0, #1
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	bf15      	itete	ne
 8006fcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006fce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006fd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006fd6:	81a3      	strheq	r3, [r4, #12]
 8006fd8:	bf18      	it	ne
 8006fda:	81a3      	strhne	r3, [r4, #12]
 8006fdc:	bd10      	pop	{r4, pc}

08006fde <__sclose>:
 8006fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe2:	f000 b80d 	b.w	8007000 <_close_r>

08006fe6 <memset>:
 8006fe6:	4402      	add	r2, r0
 8006fe8:	4603      	mov	r3, r0
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d100      	bne.n	8006ff0 <memset+0xa>
 8006fee:	4770      	bx	lr
 8006ff0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ff4:	e7f9      	b.n	8006fea <memset+0x4>
	...

08006ff8 <_localeconv_r>:
 8006ff8:	4800      	ldr	r0, [pc, #0]	@ (8006ffc <_localeconv_r+0x4>)
 8006ffa:	4770      	bx	lr
 8006ffc:	20000158 	.word	0x20000158

08007000 <_close_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d06      	ldr	r5, [pc, #24]	@ (800701c <_close_r+0x1c>)
 8007004:	2300      	movs	r3, #0
 8007006:	4604      	mov	r4, r0
 8007008:	4608      	mov	r0, r1
 800700a:	602b      	str	r3, [r5, #0]
 800700c:	f7fb f844 	bl	8002098 <_close>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_close_r+0x1a>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_close_r+0x1a>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	2000053c 	.word	0x2000053c

08007020 <_lseek_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d07      	ldr	r5, [pc, #28]	@ (8007040 <_lseek_r+0x20>)
 8007024:	4604      	mov	r4, r0
 8007026:	4608      	mov	r0, r1
 8007028:	4611      	mov	r1, r2
 800702a:	2200      	movs	r2, #0
 800702c:	602a      	str	r2, [r5, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	f7fb f859 	bl	80020e6 <_lseek>
 8007034:	1c43      	adds	r3, r0, #1
 8007036:	d102      	bne.n	800703e <_lseek_r+0x1e>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	b103      	cbz	r3, 800703e <_lseek_r+0x1e>
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	bd38      	pop	{r3, r4, r5, pc}
 8007040:	2000053c 	.word	0x2000053c

08007044 <_read_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4d07      	ldr	r5, [pc, #28]	@ (8007064 <_read_r+0x20>)
 8007048:	4604      	mov	r4, r0
 800704a:	4608      	mov	r0, r1
 800704c:	4611      	mov	r1, r2
 800704e:	2200      	movs	r2, #0
 8007050:	602a      	str	r2, [r5, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	f7fa ffe7 	bl	8002026 <_read>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_read_r+0x1e>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_read_r+0x1e>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	2000053c 	.word	0x2000053c

08007068 <_write_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d07      	ldr	r5, [pc, #28]	@ (8007088 <_write_r+0x20>)
 800706c:	4604      	mov	r4, r0
 800706e:	4608      	mov	r0, r1
 8007070:	4611      	mov	r1, r2
 8007072:	2200      	movs	r2, #0
 8007074:	602a      	str	r2, [r5, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	f7fa fff2 	bl	8002060 <_write>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_write_r+0x1e>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_write_r+0x1e>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	2000053c 	.word	0x2000053c

0800708c <__errno>:
 800708c:	4b01      	ldr	r3, [pc, #4]	@ (8007094 <__errno+0x8>)
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20000018 	.word	0x20000018

08007098 <__libc_init_array>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	4d0d      	ldr	r5, [pc, #52]	@ (80070d0 <__libc_init_array+0x38>)
 800709c:	4c0d      	ldr	r4, [pc, #52]	@ (80070d4 <__libc_init_array+0x3c>)
 800709e:	1b64      	subs	r4, r4, r5
 80070a0:	10a4      	asrs	r4, r4, #2
 80070a2:	2600      	movs	r6, #0
 80070a4:	42a6      	cmp	r6, r4
 80070a6:	d109      	bne.n	80070bc <__libc_init_array+0x24>
 80070a8:	4d0b      	ldr	r5, [pc, #44]	@ (80070d8 <__libc_init_array+0x40>)
 80070aa:	4c0c      	ldr	r4, [pc, #48]	@ (80070dc <__libc_init_array+0x44>)
 80070ac:	f002 f864 	bl	8009178 <_init>
 80070b0:	1b64      	subs	r4, r4, r5
 80070b2:	10a4      	asrs	r4, r4, #2
 80070b4:	2600      	movs	r6, #0
 80070b6:	42a6      	cmp	r6, r4
 80070b8:	d105      	bne.n	80070c6 <__libc_init_array+0x2e>
 80070ba:	bd70      	pop	{r4, r5, r6, pc}
 80070bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070c0:	4798      	blx	r3
 80070c2:	3601      	adds	r6, #1
 80070c4:	e7ee      	b.n	80070a4 <__libc_init_array+0xc>
 80070c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ca:	4798      	blx	r3
 80070cc:	3601      	adds	r6, #1
 80070ce:	e7f2      	b.n	80070b6 <__libc_init_array+0x1e>
 80070d0:	08009598 	.word	0x08009598
 80070d4:	08009598 	.word	0x08009598
 80070d8:	08009598 	.word	0x08009598
 80070dc:	0800959c 	.word	0x0800959c

080070e0 <__retarget_lock_init_recursive>:
 80070e0:	4770      	bx	lr

080070e2 <__retarget_lock_acquire_recursive>:
 80070e2:	4770      	bx	lr

080070e4 <__retarget_lock_release_recursive>:
 80070e4:	4770      	bx	lr

080070e6 <quorem>:
 80070e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ea:	6903      	ldr	r3, [r0, #16]
 80070ec:	690c      	ldr	r4, [r1, #16]
 80070ee:	42a3      	cmp	r3, r4
 80070f0:	4607      	mov	r7, r0
 80070f2:	db7e      	blt.n	80071f2 <quorem+0x10c>
 80070f4:	3c01      	subs	r4, #1
 80070f6:	f101 0814 	add.w	r8, r1, #20
 80070fa:	00a3      	lsls	r3, r4, #2
 80070fc:	f100 0514 	add.w	r5, r0, #20
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007106:	9301      	str	r3, [sp, #4]
 8007108:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800710c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007110:	3301      	adds	r3, #1
 8007112:	429a      	cmp	r2, r3
 8007114:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007118:	fbb2 f6f3 	udiv	r6, r2, r3
 800711c:	d32e      	bcc.n	800717c <quorem+0x96>
 800711e:	f04f 0a00 	mov.w	sl, #0
 8007122:	46c4      	mov	ip, r8
 8007124:	46ae      	mov	lr, r5
 8007126:	46d3      	mov	fp, sl
 8007128:	f85c 3b04 	ldr.w	r3, [ip], #4
 800712c:	b298      	uxth	r0, r3
 800712e:	fb06 a000 	mla	r0, r6, r0, sl
 8007132:	0c02      	lsrs	r2, r0, #16
 8007134:	0c1b      	lsrs	r3, r3, #16
 8007136:	fb06 2303 	mla	r3, r6, r3, r2
 800713a:	f8de 2000 	ldr.w	r2, [lr]
 800713e:	b280      	uxth	r0, r0
 8007140:	b292      	uxth	r2, r2
 8007142:	1a12      	subs	r2, r2, r0
 8007144:	445a      	add	r2, fp
 8007146:	f8de 0000 	ldr.w	r0, [lr]
 800714a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800714e:	b29b      	uxth	r3, r3
 8007150:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007154:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007158:	b292      	uxth	r2, r2
 800715a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800715e:	45e1      	cmp	r9, ip
 8007160:	f84e 2b04 	str.w	r2, [lr], #4
 8007164:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007168:	d2de      	bcs.n	8007128 <quorem+0x42>
 800716a:	9b00      	ldr	r3, [sp, #0]
 800716c:	58eb      	ldr	r3, [r5, r3]
 800716e:	b92b      	cbnz	r3, 800717c <quorem+0x96>
 8007170:	9b01      	ldr	r3, [sp, #4]
 8007172:	3b04      	subs	r3, #4
 8007174:	429d      	cmp	r5, r3
 8007176:	461a      	mov	r2, r3
 8007178:	d32f      	bcc.n	80071da <quorem+0xf4>
 800717a:	613c      	str	r4, [r7, #16]
 800717c:	4638      	mov	r0, r7
 800717e:	f001 f979 	bl	8008474 <__mcmp>
 8007182:	2800      	cmp	r0, #0
 8007184:	db25      	blt.n	80071d2 <quorem+0xec>
 8007186:	4629      	mov	r1, r5
 8007188:	2000      	movs	r0, #0
 800718a:	f858 2b04 	ldr.w	r2, [r8], #4
 800718e:	f8d1 c000 	ldr.w	ip, [r1]
 8007192:	fa1f fe82 	uxth.w	lr, r2
 8007196:	fa1f f38c 	uxth.w	r3, ip
 800719a:	eba3 030e 	sub.w	r3, r3, lr
 800719e:	4403      	add	r3, r0
 80071a0:	0c12      	lsrs	r2, r2, #16
 80071a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80071a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071b0:	45c1      	cmp	r9, r8
 80071b2:	f841 3b04 	str.w	r3, [r1], #4
 80071b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071ba:	d2e6      	bcs.n	800718a <quorem+0xa4>
 80071bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071c4:	b922      	cbnz	r2, 80071d0 <quorem+0xea>
 80071c6:	3b04      	subs	r3, #4
 80071c8:	429d      	cmp	r5, r3
 80071ca:	461a      	mov	r2, r3
 80071cc:	d30b      	bcc.n	80071e6 <quorem+0x100>
 80071ce:	613c      	str	r4, [r7, #16]
 80071d0:	3601      	adds	r6, #1
 80071d2:	4630      	mov	r0, r6
 80071d4:	b003      	add	sp, #12
 80071d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	3b04      	subs	r3, #4
 80071de:	2a00      	cmp	r2, #0
 80071e0:	d1cb      	bne.n	800717a <quorem+0x94>
 80071e2:	3c01      	subs	r4, #1
 80071e4:	e7c6      	b.n	8007174 <quorem+0x8e>
 80071e6:	6812      	ldr	r2, [r2, #0]
 80071e8:	3b04      	subs	r3, #4
 80071ea:	2a00      	cmp	r2, #0
 80071ec:	d1ef      	bne.n	80071ce <quorem+0xe8>
 80071ee:	3c01      	subs	r4, #1
 80071f0:	e7ea      	b.n	80071c8 <quorem+0xe2>
 80071f2:	2000      	movs	r0, #0
 80071f4:	e7ee      	b.n	80071d4 <quorem+0xee>
	...

080071f8 <_dtoa_r>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	69c7      	ldr	r7, [r0, #28]
 80071fe:	b099      	sub	sp, #100	@ 0x64
 8007200:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007204:	ec55 4b10 	vmov	r4, r5, d0
 8007208:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800720a:	9109      	str	r1, [sp, #36]	@ 0x24
 800720c:	4683      	mov	fp, r0
 800720e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007210:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007212:	b97f      	cbnz	r7, 8007234 <_dtoa_r+0x3c>
 8007214:	2010      	movs	r0, #16
 8007216:	f000 fdfd 	bl	8007e14 <malloc>
 800721a:	4602      	mov	r2, r0
 800721c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007220:	b920      	cbnz	r0, 800722c <_dtoa_r+0x34>
 8007222:	4ba7      	ldr	r3, [pc, #668]	@ (80074c0 <_dtoa_r+0x2c8>)
 8007224:	21ef      	movs	r1, #239	@ 0xef
 8007226:	48a7      	ldr	r0, [pc, #668]	@ (80074c4 <_dtoa_r+0x2cc>)
 8007228:	f001 fc68 	bl	8008afc <__assert_func>
 800722c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007230:	6007      	str	r7, [r0, #0]
 8007232:	60c7      	str	r7, [r0, #12]
 8007234:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007238:	6819      	ldr	r1, [r3, #0]
 800723a:	b159      	cbz	r1, 8007254 <_dtoa_r+0x5c>
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	604a      	str	r2, [r1, #4]
 8007240:	2301      	movs	r3, #1
 8007242:	4093      	lsls	r3, r2
 8007244:	608b      	str	r3, [r1, #8]
 8007246:	4658      	mov	r0, fp
 8007248:	f000 feda 	bl	8008000 <_Bfree>
 800724c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	1e2b      	subs	r3, r5, #0
 8007256:	bfb9      	ittee	lt
 8007258:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800725c:	9303      	strlt	r3, [sp, #12]
 800725e:	2300      	movge	r3, #0
 8007260:	6033      	strge	r3, [r6, #0]
 8007262:	9f03      	ldr	r7, [sp, #12]
 8007264:	4b98      	ldr	r3, [pc, #608]	@ (80074c8 <_dtoa_r+0x2d0>)
 8007266:	bfbc      	itt	lt
 8007268:	2201      	movlt	r2, #1
 800726a:	6032      	strlt	r2, [r6, #0]
 800726c:	43bb      	bics	r3, r7
 800726e:	d112      	bne.n	8007296 <_dtoa_r+0x9e>
 8007270:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007272:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800727c:	4323      	orrs	r3, r4
 800727e:	f000 854d 	beq.w	8007d1c <_dtoa_r+0xb24>
 8007282:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007284:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80074dc <_dtoa_r+0x2e4>
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 854f 	beq.w	8007d2c <_dtoa_r+0xb34>
 800728e:	f10a 0303 	add.w	r3, sl, #3
 8007292:	f000 bd49 	b.w	8007d28 <_dtoa_r+0xb30>
 8007296:	ed9d 7b02 	vldr	d7, [sp, #8]
 800729a:	2200      	movs	r2, #0
 800729c:	ec51 0b17 	vmov	r0, r1, d7
 80072a0:	2300      	movs	r3, #0
 80072a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80072a6:	f7f9 fc2f 	bl	8000b08 <__aeabi_dcmpeq>
 80072aa:	4680      	mov	r8, r0
 80072ac:	b158      	cbz	r0, 80072c6 <_dtoa_r+0xce>
 80072ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072b0:	2301      	movs	r3, #1
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072b6:	b113      	cbz	r3, 80072be <_dtoa_r+0xc6>
 80072b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80072ba:	4b84      	ldr	r3, [pc, #528]	@ (80074cc <_dtoa_r+0x2d4>)
 80072bc:	6013      	str	r3, [r2, #0]
 80072be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80074e0 <_dtoa_r+0x2e8>
 80072c2:	f000 bd33 	b.w	8007d2c <_dtoa_r+0xb34>
 80072c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80072ca:	aa16      	add	r2, sp, #88	@ 0x58
 80072cc:	a917      	add	r1, sp, #92	@ 0x5c
 80072ce:	4658      	mov	r0, fp
 80072d0:	f001 f980 	bl	80085d4 <__d2b>
 80072d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80072d8:	4681      	mov	r9, r0
 80072da:	2e00      	cmp	r6, #0
 80072dc:	d077      	beq.n	80073ce <_dtoa_r+0x1d6>
 80072de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80072e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80072f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80072f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80072f8:	4619      	mov	r1, r3
 80072fa:	2200      	movs	r2, #0
 80072fc:	4b74      	ldr	r3, [pc, #464]	@ (80074d0 <_dtoa_r+0x2d8>)
 80072fe:	f7f8 ffe3 	bl	80002c8 <__aeabi_dsub>
 8007302:	a369      	add	r3, pc, #420	@ (adr r3, 80074a8 <_dtoa_r+0x2b0>)
 8007304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007308:	f7f9 f996 	bl	8000638 <__aeabi_dmul>
 800730c:	a368      	add	r3, pc, #416	@ (adr r3, 80074b0 <_dtoa_r+0x2b8>)
 800730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007312:	f7f8 ffdb 	bl	80002cc <__adddf3>
 8007316:	4604      	mov	r4, r0
 8007318:	4630      	mov	r0, r6
 800731a:	460d      	mov	r5, r1
 800731c:	f7f9 f922 	bl	8000564 <__aeabi_i2d>
 8007320:	a365      	add	r3, pc, #404	@ (adr r3, 80074b8 <_dtoa_r+0x2c0>)
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	f7f9 f987 	bl	8000638 <__aeabi_dmul>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	4620      	mov	r0, r4
 8007330:	4629      	mov	r1, r5
 8007332:	f7f8 ffcb 	bl	80002cc <__adddf3>
 8007336:	4604      	mov	r4, r0
 8007338:	460d      	mov	r5, r1
 800733a:	f7f9 fc2d 	bl	8000b98 <__aeabi_d2iz>
 800733e:	2200      	movs	r2, #0
 8007340:	4607      	mov	r7, r0
 8007342:	2300      	movs	r3, #0
 8007344:	4620      	mov	r0, r4
 8007346:	4629      	mov	r1, r5
 8007348:	f7f9 fbe8 	bl	8000b1c <__aeabi_dcmplt>
 800734c:	b140      	cbz	r0, 8007360 <_dtoa_r+0x168>
 800734e:	4638      	mov	r0, r7
 8007350:	f7f9 f908 	bl	8000564 <__aeabi_i2d>
 8007354:	4622      	mov	r2, r4
 8007356:	462b      	mov	r3, r5
 8007358:	f7f9 fbd6 	bl	8000b08 <__aeabi_dcmpeq>
 800735c:	b900      	cbnz	r0, 8007360 <_dtoa_r+0x168>
 800735e:	3f01      	subs	r7, #1
 8007360:	2f16      	cmp	r7, #22
 8007362:	d851      	bhi.n	8007408 <_dtoa_r+0x210>
 8007364:	4b5b      	ldr	r3, [pc, #364]	@ (80074d4 <_dtoa_r+0x2dc>)
 8007366:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007372:	f7f9 fbd3 	bl	8000b1c <__aeabi_dcmplt>
 8007376:	2800      	cmp	r0, #0
 8007378:	d048      	beq.n	800740c <_dtoa_r+0x214>
 800737a:	3f01      	subs	r7, #1
 800737c:	2300      	movs	r3, #0
 800737e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007380:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007382:	1b9b      	subs	r3, r3, r6
 8007384:	1e5a      	subs	r2, r3, #1
 8007386:	bf44      	itt	mi
 8007388:	f1c3 0801 	rsbmi	r8, r3, #1
 800738c:	2300      	movmi	r3, #0
 800738e:	9208      	str	r2, [sp, #32]
 8007390:	bf54      	ite	pl
 8007392:	f04f 0800 	movpl.w	r8, #0
 8007396:	9308      	strmi	r3, [sp, #32]
 8007398:	2f00      	cmp	r7, #0
 800739a:	db39      	blt.n	8007410 <_dtoa_r+0x218>
 800739c:	9b08      	ldr	r3, [sp, #32]
 800739e:	970f      	str	r7, [sp, #60]	@ 0x3c
 80073a0:	443b      	add	r3, r7
 80073a2:	9308      	str	r3, [sp, #32]
 80073a4:	2300      	movs	r3, #0
 80073a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80073a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073aa:	2b09      	cmp	r3, #9
 80073ac:	d864      	bhi.n	8007478 <_dtoa_r+0x280>
 80073ae:	2b05      	cmp	r3, #5
 80073b0:	bfc4      	itt	gt
 80073b2:	3b04      	subgt	r3, #4
 80073b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80073b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073b8:	f1a3 0302 	sub.w	r3, r3, #2
 80073bc:	bfcc      	ite	gt
 80073be:	2400      	movgt	r4, #0
 80073c0:	2401      	movle	r4, #1
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d863      	bhi.n	800748e <_dtoa_r+0x296>
 80073c6:	e8df f003 	tbb	[pc, r3]
 80073ca:	372a      	.short	0x372a
 80073cc:	5535      	.short	0x5535
 80073ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80073d2:	441e      	add	r6, r3
 80073d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80073d8:	2b20      	cmp	r3, #32
 80073da:	bfc1      	itttt	gt
 80073dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80073e0:	409f      	lslgt	r7, r3
 80073e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80073e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80073ea:	bfd6      	itet	le
 80073ec:	f1c3 0320 	rsble	r3, r3, #32
 80073f0:	ea47 0003 	orrgt.w	r0, r7, r3
 80073f4:	fa04 f003 	lslle.w	r0, r4, r3
 80073f8:	f7f9 f8a4 	bl	8000544 <__aeabi_ui2d>
 80073fc:	2201      	movs	r2, #1
 80073fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007402:	3e01      	subs	r6, #1
 8007404:	9214      	str	r2, [sp, #80]	@ 0x50
 8007406:	e777      	b.n	80072f8 <_dtoa_r+0x100>
 8007408:	2301      	movs	r3, #1
 800740a:	e7b8      	b.n	800737e <_dtoa_r+0x186>
 800740c:	9012      	str	r0, [sp, #72]	@ 0x48
 800740e:	e7b7      	b.n	8007380 <_dtoa_r+0x188>
 8007410:	427b      	negs	r3, r7
 8007412:	930a      	str	r3, [sp, #40]	@ 0x28
 8007414:	2300      	movs	r3, #0
 8007416:	eba8 0807 	sub.w	r8, r8, r7
 800741a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800741c:	e7c4      	b.n	80073a8 <_dtoa_r+0x1b0>
 800741e:	2300      	movs	r3, #0
 8007420:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007424:	2b00      	cmp	r3, #0
 8007426:	dc35      	bgt.n	8007494 <_dtoa_r+0x29c>
 8007428:	2301      	movs	r3, #1
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	9307      	str	r3, [sp, #28]
 800742e:	461a      	mov	r2, r3
 8007430:	920e      	str	r2, [sp, #56]	@ 0x38
 8007432:	e00b      	b.n	800744c <_dtoa_r+0x254>
 8007434:	2301      	movs	r3, #1
 8007436:	e7f3      	b.n	8007420 <_dtoa_r+0x228>
 8007438:	2300      	movs	r3, #0
 800743a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800743c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800743e:	18fb      	adds	r3, r7, r3
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	3301      	adds	r3, #1
 8007444:	2b01      	cmp	r3, #1
 8007446:	9307      	str	r3, [sp, #28]
 8007448:	bfb8      	it	lt
 800744a:	2301      	movlt	r3, #1
 800744c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007450:	2100      	movs	r1, #0
 8007452:	2204      	movs	r2, #4
 8007454:	f102 0514 	add.w	r5, r2, #20
 8007458:	429d      	cmp	r5, r3
 800745a:	d91f      	bls.n	800749c <_dtoa_r+0x2a4>
 800745c:	6041      	str	r1, [r0, #4]
 800745e:	4658      	mov	r0, fp
 8007460:	f000 fd8e 	bl	8007f80 <_Balloc>
 8007464:	4682      	mov	sl, r0
 8007466:	2800      	cmp	r0, #0
 8007468:	d13c      	bne.n	80074e4 <_dtoa_r+0x2ec>
 800746a:	4b1b      	ldr	r3, [pc, #108]	@ (80074d8 <_dtoa_r+0x2e0>)
 800746c:	4602      	mov	r2, r0
 800746e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007472:	e6d8      	b.n	8007226 <_dtoa_r+0x2e>
 8007474:	2301      	movs	r3, #1
 8007476:	e7e0      	b.n	800743a <_dtoa_r+0x242>
 8007478:	2401      	movs	r4, #1
 800747a:	2300      	movs	r3, #0
 800747c:	9309      	str	r3, [sp, #36]	@ 0x24
 800747e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007480:	f04f 33ff 	mov.w	r3, #4294967295
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	9307      	str	r3, [sp, #28]
 8007488:	2200      	movs	r2, #0
 800748a:	2312      	movs	r3, #18
 800748c:	e7d0      	b.n	8007430 <_dtoa_r+0x238>
 800748e:	2301      	movs	r3, #1
 8007490:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007492:	e7f5      	b.n	8007480 <_dtoa_r+0x288>
 8007494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	9307      	str	r3, [sp, #28]
 800749a:	e7d7      	b.n	800744c <_dtoa_r+0x254>
 800749c:	3101      	adds	r1, #1
 800749e:	0052      	lsls	r2, r2, #1
 80074a0:	e7d8      	b.n	8007454 <_dtoa_r+0x25c>
 80074a2:	bf00      	nop
 80074a4:	f3af 8000 	nop.w
 80074a8:	636f4361 	.word	0x636f4361
 80074ac:	3fd287a7 	.word	0x3fd287a7
 80074b0:	8b60c8b3 	.word	0x8b60c8b3
 80074b4:	3fc68a28 	.word	0x3fc68a28
 80074b8:	509f79fb 	.word	0x509f79fb
 80074bc:	3fd34413 	.word	0x3fd34413
 80074c0:	0800925d 	.word	0x0800925d
 80074c4:	08009274 	.word	0x08009274
 80074c8:	7ff00000 	.word	0x7ff00000
 80074cc:	0800922d 	.word	0x0800922d
 80074d0:	3ff80000 	.word	0x3ff80000
 80074d4:	08009370 	.word	0x08009370
 80074d8:	080092cc 	.word	0x080092cc
 80074dc:	08009259 	.word	0x08009259
 80074e0:	0800922c 	.word	0x0800922c
 80074e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80074e8:	6018      	str	r0, [r3, #0]
 80074ea:	9b07      	ldr	r3, [sp, #28]
 80074ec:	2b0e      	cmp	r3, #14
 80074ee:	f200 80a4 	bhi.w	800763a <_dtoa_r+0x442>
 80074f2:	2c00      	cmp	r4, #0
 80074f4:	f000 80a1 	beq.w	800763a <_dtoa_r+0x442>
 80074f8:	2f00      	cmp	r7, #0
 80074fa:	dd33      	ble.n	8007564 <_dtoa_r+0x36c>
 80074fc:	4bad      	ldr	r3, [pc, #692]	@ (80077b4 <_dtoa_r+0x5bc>)
 80074fe:	f007 020f 	and.w	r2, r7, #15
 8007502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007506:	ed93 7b00 	vldr	d7, [r3]
 800750a:	05f8      	lsls	r0, r7, #23
 800750c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007510:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007514:	d516      	bpl.n	8007544 <_dtoa_r+0x34c>
 8007516:	4ba8      	ldr	r3, [pc, #672]	@ (80077b8 <_dtoa_r+0x5c0>)
 8007518:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800751c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007520:	f7f9 f9b4 	bl	800088c <__aeabi_ddiv>
 8007524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007528:	f004 040f 	and.w	r4, r4, #15
 800752c:	2603      	movs	r6, #3
 800752e:	4da2      	ldr	r5, [pc, #648]	@ (80077b8 <_dtoa_r+0x5c0>)
 8007530:	b954      	cbnz	r4, 8007548 <_dtoa_r+0x350>
 8007532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800753a:	f7f9 f9a7 	bl	800088c <__aeabi_ddiv>
 800753e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007542:	e028      	b.n	8007596 <_dtoa_r+0x39e>
 8007544:	2602      	movs	r6, #2
 8007546:	e7f2      	b.n	800752e <_dtoa_r+0x336>
 8007548:	07e1      	lsls	r1, r4, #31
 800754a:	d508      	bpl.n	800755e <_dtoa_r+0x366>
 800754c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007550:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007554:	f7f9 f870 	bl	8000638 <__aeabi_dmul>
 8007558:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800755c:	3601      	adds	r6, #1
 800755e:	1064      	asrs	r4, r4, #1
 8007560:	3508      	adds	r5, #8
 8007562:	e7e5      	b.n	8007530 <_dtoa_r+0x338>
 8007564:	f000 80d2 	beq.w	800770c <_dtoa_r+0x514>
 8007568:	427c      	negs	r4, r7
 800756a:	4b92      	ldr	r3, [pc, #584]	@ (80077b4 <_dtoa_r+0x5bc>)
 800756c:	4d92      	ldr	r5, [pc, #584]	@ (80077b8 <_dtoa_r+0x5c0>)
 800756e:	f004 020f 	and.w	r2, r4, #15
 8007572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800757e:	f7f9 f85b 	bl	8000638 <__aeabi_dmul>
 8007582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007586:	1124      	asrs	r4, r4, #4
 8007588:	2300      	movs	r3, #0
 800758a:	2602      	movs	r6, #2
 800758c:	2c00      	cmp	r4, #0
 800758e:	f040 80b2 	bne.w	80076f6 <_dtoa_r+0x4fe>
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1d3      	bne.n	800753e <_dtoa_r+0x346>
 8007596:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007598:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 80b7 	beq.w	8007710 <_dtoa_r+0x518>
 80075a2:	4b86      	ldr	r3, [pc, #536]	@ (80077bc <_dtoa_r+0x5c4>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	4620      	mov	r0, r4
 80075a8:	4629      	mov	r1, r5
 80075aa:	f7f9 fab7 	bl	8000b1c <__aeabi_dcmplt>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	f000 80ae 	beq.w	8007710 <_dtoa_r+0x518>
 80075b4:	9b07      	ldr	r3, [sp, #28]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 80aa 	beq.w	8007710 <_dtoa_r+0x518>
 80075bc:	9b00      	ldr	r3, [sp, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	dd37      	ble.n	8007632 <_dtoa_r+0x43a>
 80075c2:	1e7b      	subs	r3, r7, #1
 80075c4:	9304      	str	r3, [sp, #16]
 80075c6:	4620      	mov	r0, r4
 80075c8:	4b7d      	ldr	r3, [pc, #500]	@ (80077c0 <_dtoa_r+0x5c8>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	4629      	mov	r1, r5
 80075ce:	f7f9 f833 	bl	8000638 <__aeabi_dmul>
 80075d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075d6:	9c00      	ldr	r4, [sp, #0]
 80075d8:	3601      	adds	r6, #1
 80075da:	4630      	mov	r0, r6
 80075dc:	f7f8 ffc2 	bl	8000564 <__aeabi_i2d>
 80075e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075e4:	f7f9 f828 	bl	8000638 <__aeabi_dmul>
 80075e8:	4b76      	ldr	r3, [pc, #472]	@ (80077c4 <_dtoa_r+0x5cc>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	f7f8 fe6e 	bl	80002cc <__adddf3>
 80075f0:	4605      	mov	r5, r0
 80075f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80075f6:	2c00      	cmp	r4, #0
 80075f8:	f040 808d 	bne.w	8007716 <_dtoa_r+0x51e>
 80075fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007600:	4b71      	ldr	r3, [pc, #452]	@ (80077c8 <_dtoa_r+0x5d0>)
 8007602:	2200      	movs	r2, #0
 8007604:	f7f8 fe60 	bl	80002c8 <__aeabi_dsub>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007610:	462a      	mov	r2, r5
 8007612:	4633      	mov	r3, r6
 8007614:	f7f9 faa0 	bl	8000b58 <__aeabi_dcmpgt>
 8007618:	2800      	cmp	r0, #0
 800761a:	f040 828b 	bne.w	8007b34 <_dtoa_r+0x93c>
 800761e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007622:	462a      	mov	r2, r5
 8007624:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007628:	f7f9 fa78 	bl	8000b1c <__aeabi_dcmplt>
 800762c:	2800      	cmp	r0, #0
 800762e:	f040 8128 	bne.w	8007882 <_dtoa_r+0x68a>
 8007632:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007636:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800763a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800763c:	2b00      	cmp	r3, #0
 800763e:	f2c0 815a 	blt.w	80078f6 <_dtoa_r+0x6fe>
 8007642:	2f0e      	cmp	r7, #14
 8007644:	f300 8157 	bgt.w	80078f6 <_dtoa_r+0x6fe>
 8007648:	4b5a      	ldr	r3, [pc, #360]	@ (80077b4 <_dtoa_r+0x5bc>)
 800764a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800764e:	ed93 7b00 	vldr	d7, [r3]
 8007652:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007654:	2b00      	cmp	r3, #0
 8007656:	ed8d 7b00 	vstr	d7, [sp]
 800765a:	da03      	bge.n	8007664 <_dtoa_r+0x46c>
 800765c:	9b07      	ldr	r3, [sp, #28]
 800765e:	2b00      	cmp	r3, #0
 8007660:	f340 8101 	ble.w	8007866 <_dtoa_r+0x66e>
 8007664:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007668:	4656      	mov	r6, sl
 800766a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800766e:	4620      	mov	r0, r4
 8007670:	4629      	mov	r1, r5
 8007672:	f7f9 f90b 	bl	800088c <__aeabi_ddiv>
 8007676:	f7f9 fa8f 	bl	8000b98 <__aeabi_d2iz>
 800767a:	4680      	mov	r8, r0
 800767c:	f7f8 ff72 	bl	8000564 <__aeabi_i2d>
 8007680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007684:	f7f8 ffd8 	bl	8000638 <__aeabi_dmul>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	4620      	mov	r0, r4
 800768e:	4629      	mov	r1, r5
 8007690:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007694:	f7f8 fe18 	bl	80002c8 <__aeabi_dsub>
 8007698:	f806 4b01 	strb.w	r4, [r6], #1
 800769c:	9d07      	ldr	r5, [sp, #28]
 800769e:	eba6 040a 	sub.w	r4, r6, sl
 80076a2:	42a5      	cmp	r5, r4
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	f040 8117 	bne.w	80078da <_dtoa_r+0x6e2>
 80076ac:	f7f8 fe0e 	bl	80002cc <__adddf3>
 80076b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076b4:	4604      	mov	r4, r0
 80076b6:	460d      	mov	r5, r1
 80076b8:	f7f9 fa4e 	bl	8000b58 <__aeabi_dcmpgt>
 80076bc:	2800      	cmp	r0, #0
 80076be:	f040 80f9 	bne.w	80078b4 <_dtoa_r+0x6bc>
 80076c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076c6:	4620      	mov	r0, r4
 80076c8:	4629      	mov	r1, r5
 80076ca:	f7f9 fa1d 	bl	8000b08 <__aeabi_dcmpeq>
 80076ce:	b118      	cbz	r0, 80076d8 <_dtoa_r+0x4e0>
 80076d0:	f018 0f01 	tst.w	r8, #1
 80076d4:	f040 80ee 	bne.w	80078b4 <_dtoa_r+0x6bc>
 80076d8:	4649      	mov	r1, r9
 80076da:	4658      	mov	r0, fp
 80076dc:	f000 fc90 	bl	8008000 <_Bfree>
 80076e0:	2300      	movs	r3, #0
 80076e2:	7033      	strb	r3, [r6, #0]
 80076e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076e6:	3701      	adds	r7, #1
 80076e8:	601f      	str	r7, [r3, #0]
 80076ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 831d 	beq.w	8007d2c <_dtoa_r+0xb34>
 80076f2:	601e      	str	r6, [r3, #0]
 80076f4:	e31a      	b.n	8007d2c <_dtoa_r+0xb34>
 80076f6:	07e2      	lsls	r2, r4, #31
 80076f8:	d505      	bpl.n	8007706 <_dtoa_r+0x50e>
 80076fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076fe:	f7f8 ff9b 	bl	8000638 <__aeabi_dmul>
 8007702:	3601      	adds	r6, #1
 8007704:	2301      	movs	r3, #1
 8007706:	1064      	asrs	r4, r4, #1
 8007708:	3508      	adds	r5, #8
 800770a:	e73f      	b.n	800758c <_dtoa_r+0x394>
 800770c:	2602      	movs	r6, #2
 800770e:	e742      	b.n	8007596 <_dtoa_r+0x39e>
 8007710:	9c07      	ldr	r4, [sp, #28]
 8007712:	9704      	str	r7, [sp, #16]
 8007714:	e761      	b.n	80075da <_dtoa_r+0x3e2>
 8007716:	4b27      	ldr	r3, [pc, #156]	@ (80077b4 <_dtoa_r+0x5bc>)
 8007718:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800771a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800771e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007722:	4454      	add	r4, sl
 8007724:	2900      	cmp	r1, #0
 8007726:	d053      	beq.n	80077d0 <_dtoa_r+0x5d8>
 8007728:	4928      	ldr	r1, [pc, #160]	@ (80077cc <_dtoa_r+0x5d4>)
 800772a:	2000      	movs	r0, #0
 800772c:	f7f9 f8ae 	bl	800088c <__aeabi_ddiv>
 8007730:	4633      	mov	r3, r6
 8007732:	462a      	mov	r2, r5
 8007734:	f7f8 fdc8 	bl	80002c8 <__aeabi_dsub>
 8007738:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800773c:	4656      	mov	r6, sl
 800773e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007742:	f7f9 fa29 	bl	8000b98 <__aeabi_d2iz>
 8007746:	4605      	mov	r5, r0
 8007748:	f7f8 ff0c 	bl	8000564 <__aeabi_i2d>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007754:	f7f8 fdb8 	bl	80002c8 <__aeabi_dsub>
 8007758:	3530      	adds	r5, #48	@ 0x30
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007762:	f806 5b01 	strb.w	r5, [r6], #1
 8007766:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800776a:	f7f9 f9d7 	bl	8000b1c <__aeabi_dcmplt>
 800776e:	2800      	cmp	r0, #0
 8007770:	d171      	bne.n	8007856 <_dtoa_r+0x65e>
 8007772:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007776:	4911      	ldr	r1, [pc, #68]	@ (80077bc <_dtoa_r+0x5c4>)
 8007778:	2000      	movs	r0, #0
 800777a:	f7f8 fda5 	bl	80002c8 <__aeabi_dsub>
 800777e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007782:	f7f9 f9cb 	bl	8000b1c <__aeabi_dcmplt>
 8007786:	2800      	cmp	r0, #0
 8007788:	f040 8095 	bne.w	80078b6 <_dtoa_r+0x6be>
 800778c:	42a6      	cmp	r6, r4
 800778e:	f43f af50 	beq.w	8007632 <_dtoa_r+0x43a>
 8007792:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007796:	4b0a      	ldr	r3, [pc, #40]	@ (80077c0 <_dtoa_r+0x5c8>)
 8007798:	2200      	movs	r2, #0
 800779a:	f7f8 ff4d 	bl	8000638 <__aeabi_dmul>
 800779e:	4b08      	ldr	r3, [pc, #32]	@ (80077c0 <_dtoa_r+0x5c8>)
 80077a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077a4:	2200      	movs	r2, #0
 80077a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077aa:	f7f8 ff45 	bl	8000638 <__aeabi_dmul>
 80077ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077b2:	e7c4      	b.n	800773e <_dtoa_r+0x546>
 80077b4:	08009370 	.word	0x08009370
 80077b8:	08009348 	.word	0x08009348
 80077bc:	3ff00000 	.word	0x3ff00000
 80077c0:	40240000 	.word	0x40240000
 80077c4:	401c0000 	.word	0x401c0000
 80077c8:	40140000 	.word	0x40140000
 80077cc:	3fe00000 	.word	0x3fe00000
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	f7f8 ff30 	bl	8000638 <__aeabi_dmul>
 80077d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80077de:	4656      	mov	r6, sl
 80077e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077e4:	f7f9 f9d8 	bl	8000b98 <__aeabi_d2iz>
 80077e8:	4605      	mov	r5, r0
 80077ea:	f7f8 febb 	bl	8000564 <__aeabi_i2d>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077f6:	f7f8 fd67 	bl	80002c8 <__aeabi_dsub>
 80077fa:	3530      	adds	r5, #48	@ 0x30
 80077fc:	f806 5b01 	strb.w	r5, [r6], #1
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	42a6      	cmp	r6, r4
 8007806:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800780a:	f04f 0200 	mov.w	r2, #0
 800780e:	d124      	bne.n	800785a <_dtoa_r+0x662>
 8007810:	4bac      	ldr	r3, [pc, #688]	@ (8007ac4 <_dtoa_r+0x8cc>)
 8007812:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007816:	f7f8 fd59 	bl	80002cc <__adddf3>
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007822:	f7f9 f999 	bl	8000b58 <__aeabi_dcmpgt>
 8007826:	2800      	cmp	r0, #0
 8007828:	d145      	bne.n	80078b6 <_dtoa_r+0x6be>
 800782a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800782e:	49a5      	ldr	r1, [pc, #660]	@ (8007ac4 <_dtoa_r+0x8cc>)
 8007830:	2000      	movs	r0, #0
 8007832:	f7f8 fd49 	bl	80002c8 <__aeabi_dsub>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800783e:	f7f9 f96d 	bl	8000b1c <__aeabi_dcmplt>
 8007842:	2800      	cmp	r0, #0
 8007844:	f43f aef5 	beq.w	8007632 <_dtoa_r+0x43a>
 8007848:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800784a:	1e73      	subs	r3, r6, #1
 800784c:	9315      	str	r3, [sp, #84]	@ 0x54
 800784e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007852:	2b30      	cmp	r3, #48	@ 0x30
 8007854:	d0f8      	beq.n	8007848 <_dtoa_r+0x650>
 8007856:	9f04      	ldr	r7, [sp, #16]
 8007858:	e73e      	b.n	80076d8 <_dtoa_r+0x4e0>
 800785a:	4b9b      	ldr	r3, [pc, #620]	@ (8007ac8 <_dtoa_r+0x8d0>)
 800785c:	f7f8 feec 	bl	8000638 <__aeabi_dmul>
 8007860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007864:	e7bc      	b.n	80077e0 <_dtoa_r+0x5e8>
 8007866:	d10c      	bne.n	8007882 <_dtoa_r+0x68a>
 8007868:	4b98      	ldr	r3, [pc, #608]	@ (8007acc <_dtoa_r+0x8d4>)
 800786a:	2200      	movs	r2, #0
 800786c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007870:	f7f8 fee2 	bl	8000638 <__aeabi_dmul>
 8007874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007878:	f7f9 f964 	bl	8000b44 <__aeabi_dcmpge>
 800787c:	2800      	cmp	r0, #0
 800787e:	f000 8157 	beq.w	8007b30 <_dtoa_r+0x938>
 8007882:	2400      	movs	r4, #0
 8007884:	4625      	mov	r5, r4
 8007886:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007888:	43db      	mvns	r3, r3
 800788a:	9304      	str	r3, [sp, #16]
 800788c:	4656      	mov	r6, sl
 800788e:	2700      	movs	r7, #0
 8007890:	4621      	mov	r1, r4
 8007892:	4658      	mov	r0, fp
 8007894:	f000 fbb4 	bl	8008000 <_Bfree>
 8007898:	2d00      	cmp	r5, #0
 800789a:	d0dc      	beq.n	8007856 <_dtoa_r+0x65e>
 800789c:	b12f      	cbz	r7, 80078aa <_dtoa_r+0x6b2>
 800789e:	42af      	cmp	r7, r5
 80078a0:	d003      	beq.n	80078aa <_dtoa_r+0x6b2>
 80078a2:	4639      	mov	r1, r7
 80078a4:	4658      	mov	r0, fp
 80078a6:	f000 fbab 	bl	8008000 <_Bfree>
 80078aa:	4629      	mov	r1, r5
 80078ac:	4658      	mov	r0, fp
 80078ae:	f000 fba7 	bl	8008000 <_Bfree>
 80078b2:	e7d0      	b.n	8007856 <_dtoa_r+0x65e>
 80078b4:	9704      	str	r7, [sp, #16]
 80078b6:	4633      	mov	r3, r6
 80078b8:	461e      	mov	r6, r3
 80078ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078be:	2a39      	cmp	r2, #57	@ 0x39
 80078c0:	d107      	bne.n	80078d2 <_dtoa_r+0x6da>
 80078c2:	459a      	cmp	sl, r3
 80078c4:	d1f8      	bne.n	80078b8 <_dtoa_r+0x6c0>
 80078c6:	9a04      	ldr	r2, [sp, #16]
 80078c8:	3201      	adds	r2, #1
 80078ca:	9204      	str	r2, [sp, #16]
 80078cc:	2230      	movs	r2, #48	@ 0x30
 80078ce:	f88a 2000 	strb.w	r2, [sl]
 80078d2:	781a      	ldrb	r2, [r3, #0]
 80078d4:	3201      	adds	r2, #1
 80078d6:	701a      	strb	r2, [r3, #0]
 80078d8:	e7bd      	b.n	8007856 <_dtoa_r+0x65e>
 80078da:	4b7b      	ldr	r3, [pc, #492]	@ (8007ac8 <_dtoa_r+0x8d0>)
 80078dc:	2200      	movs	r2, #0
 80078de:	f7f8 feab 	bl	8000638 <__aeabi_dmul>
 80078e2:	2200      	movs	r2, #0
 80078e4:	2300      	movs	r3, #0
 80078e6:	4604      	mov	r4, r0
 80078e8:	460d      	mov	r5, r1
 80078ea:	f7f9 f90d 	bl	8000b08 <__aeabi_dcmpeq>
 80078ee:	2800      	cmp	r0, #0
 80078f0:	f43f aebb 	beq.w	800766a <_dtoa_r+0x472>
 80078f4:	e6f0      	b.n	80076d8 <_dtoa_r+0x4e0>
 80078f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80078f8:	2a00      	cmp	r2, #0
 80078fa:	f000 80db 	beq.w	8007ab4 <_dtoa_r+0x8bc>
 80078fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007900:	2a01      	cmp	r2, #1
 8007902:	f300 80bf 	bgt.w	8007a84 <_dtoa_r+0x88c>
 8007906:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007908:	2a00      	cmp	r2, #0
 800790a:	f000 80b7 	beq.w	8007a7c <_dtoa_r+0x884>
 800790e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007912:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007914:	4646      	mov	r6, r8
 8007916:	9a08      	ldr	r2, [sp, #32]
 8007918:	2101      	movs	r1, #1
 800791a:	441a      	add	r2, r3
 800791c:	4658      	mov	r0, fp
 800791e:	4498      	add	r8, r3
 8007920:	9208      	str	r2, [sp, #32]
 8007922:	f000 fc21 	bl	8008168 <__i2b>
 8007926:	4605      	mov	r5, r0
 8007928:	b15e      	cbz	r6, 8007942 <_dtoa_r+0x74a>
 800792a:	9b08      	ldr	r3, [sp, #32]
 800792c:	2b00      	cmp	r3, #0
 800792e:	dd08      	ble.n	8007942 <_dtoa_r+0x74a>
 8007930:	42b3      	cmp	r3, r6
 8007932:	9a08      	ldr	r2, [sp, #32]
 8007934:	bfa8      	it	ge
 8007936:	4633      	movge	r3, r6
 8007938:	eba8 0803 	sub.w	r8, r8, r3
 800793c:	1af6      	subs	r6, r6, r3
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	9308      	str	r3, [sp, #32]
 8007942:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007944:	b1f3      	cbz	r3, 8007984 <_dtoa_r+0x78c>
 8007946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 80b7 	beq.w	8007abc <_dtoa_r+0x8c4>
 800794e:	b18c      	cbz	r4, 8007974 <_dtoa_r+0x77c>
 8007950:	4629      	mov	r1, r5
 8007952:	4622      	mov	r2, r4
 8007954:	4658      	mov	r0, fp
 8007956:	f000 fcc7 	bl	80082e8 <__pow5mult>
 800795a:	464a      	mov	r2, r9
 800795c:	4601      	mov	r1, r0
 800795e:	4605      	mov	r5, r0
 8007960:	4658      	mov	r0, fp
 8007962:	f000 fc17 	bl	8008194 <__multiply>
 8007966:	4649      	mov	r1, r9
 8007968:	9004      	str	r0, [sp, #16]
 800796a:	4658      	mov	r0, fp
 800796c:	f000 fb48 	bl	8008000 <_Bfree>
 8007970:	9b04      	ldr	r3, [sp, #16]
 8007972:	4699      	mov	r9, r3
 8007974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007976:	1b1a      	subs	r2, r3, r4
 8007978:	d004      	beq.n	8007984 <_dtoa_r+0x78c>
 800797a:	4649      	mov	r1, r9
 800797c:	4658      	mov	r0, fp
 800797e:	f000 fcb3 	bl	80082e8 <__pow5mult>
 8007982:	4681      	mov	r9, r0
 8007984:	2101      	movs	r1, #1
 8007986:	4658      	mov	r0, fp
 8007988:	f000 fbee 	bl	8008168 <__i2b>
 800798c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800798e:	4604      	mov	r4, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 81cf 	beq.w	8007d34 <_dtoa_r+0xb3c>
 8007996:	461a      	mov	r2, r3
 8007998:	4601      	mov	r1, r0
 800799a:	4658      	mov	r0, fp
 800799c:	f000 fca4 	bl	80082e8 <__pow5mult>
 80079a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	4604      	mov	r4, r0
 80079a6:	f300 8095 	bgt.w	8007ad4 <_dtoa_r+0x8dc>
 80079aa:	9b02      	ldr	r3, [sp, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f040 8087 	bne.w	8007ac0 <_dtoa_r+0x8c8>
 80079b2:	9b03      	ldr	r3, [sp, #12]
 80079b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f040 8089 	bne.w	8007ad0 <_dtoa_r+0x8d8>
 80079be:	9b03      	ldr	r3, [sp, #12]
 80079c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079c4:	0d1b      	lsrs	r3, r3, #20
 80079c6:	051b      	lsls	r3, r3, #20
 80079c8:	b12b      	cbz	r3, 80079d6 <_dtoa_r+0x7de>
 80079ca:	9b08      	ldr	r3, [sp, #32]
 80079cc:	3301      	adds	r3, #1
 80079ce:	9308      	str	r3, [sp, #32]
 80079d0:	f108 0801 	add.w	r8, r8, #1
 80079d4:	2301      	movs	r3, #1
 80079d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80079d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 81b0 	beq.w	8007d40 <_dtoa_r+0xb48>
 80079e0:	6923      	ldr	r3, [r4, #16]
 80079e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079e6:	6918      	ldr	r0, [r3, #16]
 80079e8:	f000 fb72 	bl	80080d0 <__hi0bits>
 80079ec:	f1c0 0020 	rsb	r0, r0, #32
 80079f0:	9b08      	ldr	r3, [sp, #32]
 80079f2:	4418      	add	r0, r3
 80079f4:	f010 001f 	ands.w	r0, r0, #31
 80079f8:	d077      	beq.n	8007aea <_dtoa_r+0x8f2>
 80079fa:	f1c0 0320 	rsb	r3, r0, #32
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	dd6b      	ble.n	8007ada <_dtoa_r+0x8e2>
 8007a02:	9b08      	ldr	r3, [sp, #32]
 8007a04:	f1c0 001c 	rsb	r0, r0, #28
 8007a08:	4403      	add	r3, r0
 8007a0a:	4480      	add	r8, r0
 8007a0c:	4406      	add	r6, r0
 8007a0e:	9308      	str	r3, [sp, #32]
 8007a10:	f1b8 0f00 	cmp.w	r8, #0
 8007a14:	dd05      	ble.n	8007a22 <_dtoa_r+0x82a>
 8007a16:	4649      	mov	r1, r9
 8007a18:	4642      	mov	r2, r8
 8007a1a:	4658      	mov	r0, fp
 8007a1c:	f000 fcbe 	bl	800839c <__lshift>
 8007a20:	4681      	mov	r9, r0
 8007a22:	9b08      	ldr	r3, [sp, #32]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	dd05      	ble.n	8007a34 <_dtoa_r+0x83c>
 8007a28:	4621      	mov	r1, r4
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	4658      	mov	r0, fp
 8007a2e:	f000 fcb5 	bl	800839c <__lshift>
 8007a32:	4604      	mov	r4, r0
 8007a34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d059      	beq.n	8007aee <_dtoa_r+0x8f6>
 8007a3a:	4621      	mov	r1, r4
 8007a3c:	4648      	mov	r0, r9
 8007a3e:	f000 fd19 	bl	8008474 <__mcmp>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	da53      	bge.n	8007aee <_dtoa_r+0x8f6>
 8007a46:	1e7b      	subs	r3, r7, #1
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	220a      	movs	r2, #10
 8007a50:	4658      	mov	r0, fp
 8007a52:	f000 faf7 	bl	8008044 <__multadd>
 8007a56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a58:	4681      	mov	r9, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 8172 	beq.w	8007d44 <_dtoa_r+0xb4c>
 8007a60:	2300      	movs	r3, #0
 8007a62:	4629      	mov	r1, r5
 8007a64:	220a      	movs	r2, #10
 8007a66:	4658      	mov	r0, fp
 8007a68:	f000 faec 	bl	8008044 <__multadd>
 8007a6c:	9b00      	ldr	r3, [sp, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	4605      	mov	r5, r0
 8007a72:	dc67      	bgt.n	8007b44 <_dtoa_r+0x94c>
 8007a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	dc41      	bgt.n	8007afe <_dtoa_r+0x906>
 8007a7a:	e063      	b.n	8007b44 <_dtoa_r+0x94c>
 8007a7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a82:	e746      	b.n	8007912 <_dtoa_r+0x71a>
 8007a84:	9b07      	ldr	r3, [sp, #28]
 8007a86:	1e5c      	subs	r4, r3, #1
 8007a88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a8a:	42a3      	cmp	r3, r4
 8007a8c:	bfbf      	itttt	lt
 8007a8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007a90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007a92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007a94:	1ae3      	sublt	r3, r4, r3
 8007a96:	bfb4      	ite	lt
 8007a98:	18d2      	addlt	r2, r2, r3
 8007a9a:	1b1c      	subge	r4, r3, r4
 8007a9c:	9b07      	ldr	r3, [sp, #28]
 8007a9e:	bfbc      	itt	lt
 8007aa0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007aa2:	2400      	movlt	r4, #0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	bfb5      	itete	lt
 8007aa8:	eba8 0603 	sublt.w	r6, r8, r3
 8007aac:	9b07      	ldrge	r3, [sp, #28]
 8007aae:	2300      	movlt	r3, #0
 8007ab0:	4646      	movge	r6, r8
 8007ab2:	e730      	b.n	8007916 <_dtoa_r+0x71e>
 8007ab4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ab6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007ab8:	4646      	mov	r6, r8
 8007aba:	e735      	b.n	8007928 <_dtoa_r+0x730>
 8007abc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007abe:	e75c      	b.n	800797a <_dtoa_r+0x782>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	e788      	b.n	80079d6 <_dtoa_r+0x7de>
 8007ac4:	3fe00000 	.word	0x3fe00000
 8007ac8:	40240000 	.word	0x40240000
 8007acc:	40140000 	.word	0x40140000
 8007ad0:	9b02      	ldr	r3, [sp, #8]
 8007ad2:	e780      	b.n	80079d6 <_dtoa_r+0x7de>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ad8:	e782      	b.n	80079e0 <_dtoa_r+0x7e8>
 8007ada:	d099      	beq.n	8007a10 <_dtoa_r+0x818>
 8007adc:	9a08      	ldr	r2, [sp, #32]
 8007ade:	331c      	adds	r3, #28
 8007ae0:	441a      	add	r2, r3
 8007ae2:	4498      	add	r8, r3
 8007ae4:	441e      	add	r6, r3
 8007ae6:	9208      	str	r2, [sp, #32]
 8007ae8:	e792      	b.n	8007a10 <_dtoa_r+0x818>
 8007aea:	4603      	mov	r3, r0
 8007aec:	e7f6      	b.n	8007adc <_dtoa_r+0x8e4>
 8007aee:	9b07      	ldr	r3, [sp, #28]
 8007af0:	9704      	str	r7, [sp, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	dc20      	bgt.n	8007b38 <_dtoa_r+0x940>
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	dd1e      	ble.n	8007b3c <_dtoa_r+0x944>
 8007afe:	9b00      	ldr	r3, [sp, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f47f aec0 	bne.w	8007886 <_dtoa_r+0x68e>
 8007b06:	4621      	mov	r1, r4
 8007b08:	2205      	movs	r2, #5
 8007b0a:	4658      	mov	r0, fp
 8007b0c:	f000 fa9a 	bl	8008044 <__multadd>
 8007b10:	4601      	mov	r1, r0
 8007b12:	4604      	mov	r4, r0
 8007b14:	4648      	mov	r0, r9
 8007b16:	f000 fcad 	bl	8008474 <__mcmp>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	f77f aeb3 	ble.w	8007886 <_dtoa_r+0x68e>
 8007b20:	4656      	mov	r6, sl
 8007b22:	2331      	movs	r3, #49	@ 0x31
 8007b24:	f806 3b01 	strb.w	r3, [r6], #1
 8007b28:	9b04      	ldr	r3, [sp, #16]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	9304      	str	r3, [sp, #16]
 8007b2e:	e6ae      	b.n	800788e <_dtoa_r+0x696>
 8007b30:	9c07      	ldr	r4, [sp, #28]
 8007b32:	9704      	str	r7, [sp, #16]
 8007b34:	4625      	mov	r5, r4
 8007b36:	e7f3      	b.n	8007b20 <_dtoa_r+0x928>
 8007b38:	9b07      	ldr	r3, [sp, #28]
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 8104 	beq.w	8007d4c <_dtoa_r+0xb54>
 8007b44:	2e00      	cmp	r6, #0
 8007b46:	dd05      	ble.n	8007b54 <_dtoa_r+0x95c>
 8007b48:	4629      	mov	r1, r5
 8007b4a:	4632      	mov	r2, r6
 8007b4c:	4658      	mov	r0, fp
 8007b4e:	f000 fc25 	bl	800839c <__lshift>
 8007b52:	4605      	mov	r5, r0
 8007b54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d05a      	beq.n	8007c10 <_dtoa_r+0xa18>
 8007b5a:	6869      	ldr	r1, [r5, #4]
 8007b5c:	4658      	mov	r0, fp
 8007b5e:	f000 fa0f 	bl	8007f80 <_Balloc>
 8007b62:	4606      	mov	r6, r0
 8007b64:	b928      	cbnz	r0, 8007b72 <_dtoa_r+0x97a>
 8007b66:	4b84      	ldr	r3, [pc, #528]	@ (8007d78 <_dtoa_r+0xb80>)
 8007b68:	4602      	mov	r2, r0
 8007b6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b6e:	f7ff bb5a 	b.w	8007226 <_dtoa_r+0x2e>
 8007b72:	692a      	ldr	r2, [r5, #16]
 8007b74:	3202      	adds	r2, #2
 8007b76:	0092      	lsls	r2, r2, #2
 8007b78:	f105 010c 	add.w	r1, r5, #12
 8007b7c:	300c      	adds	r0, #12
 8007b7e:	f000 ffaf 	bl	8008ae0 <memcpy>
 8007b82:	2201      	movs	r2, #1
 8007b84:	4631      	mov	r1, r6
 8007b86:	4658      	mov	r0, fp
 8007b88:	f000 fc08 	bl	800839c <__lshift>
 8007b8c:	f10a 0301 	add.w	r3, sl, #1
 8007b90:	9307      	str	r3, [sp, #28]
 8007b92:	9b00      	ldr	r3, [sp, #0]
 8007b94:	4453      	add	r3, sl
 8007b96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b98:	9b02      	ldr	r3, [sp, #8]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	462f      	mov	r7, r5
 8007ba0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	9b07      	ldr	r3, [sp, #28]
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	4648      	mov	r0, r9
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	f7ff fa9a 	bl	80070e6 <quorem>
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	9002      	str	r0, [sp, #8]
 8007bb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007bba:	4648      	mov	r0, r9
 8007bbc:	f000 fc5a 	bl	8008474 <__mcmp>
 8007bc0:	462a      	mov	r2, r5
 8007bc2:	9008      	str	r0, [sp, #32]
 8007bc4:	4621      	mov	r1, r4
 8007bc6:	4658      	mov	r0, fp
 8007bc8:	f000 fc70 	bl	80084ac <__mdiff>
 8007bcc:	68c2      	ldr	r2, [r0, #12]
 8007bce:	4606      	mov	r6, r0
 8007bd0:	bb02      	cbnz	r2, 8007c14 <_dtoa_r+0xa1c>
 8007bd2:	4601      	mov	r1, r0
 8007bd4:	4648      	mov	r0, r9
 8007bd6:	f000 fc4d 	bl	8008474 <__mcmp>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	4631      	mov	r1, r6
 8007bde:	4658      	mov	r0, fp
 8007be0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007be2:	f000 fa0d 	bl	8008000 <_Bfree>
 8007be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007be8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bea:	9e07      	ldr	r6, [sp, #28]
 8007bec:	ea43 0102 	orr.w	r1, r3, r2
 8007bf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bf2:	4319      	orrs	r1, r3
 8007bf4:	d110      	bne.n	8007c18 <_dtoa_r+0xa20>
 8007bf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007bfa:	d029      	beq.n	8007c50 <_dtoa_r+0xa58>
 8007bfc:	9b08      	ldr	r3, [sp, #32]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	dd02      	ble.n	8007c08 <_dtoa_r+0xa10>
 8007c02:	9b02      	ldr	r3, [sp, #8]
 8007c04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007c08:	9b00      	ldr	r3, [sp, #0]
 8007c0a:	f883 8000 	strb.w	r8, [r3]
 8007c0e:	e63f      	b.n	8007890 <_dtoa_r+0x698>
 8007c10:	4628      	mov	r0, r5
 8007c12:	e7bb      	b.n	8007b8c <_dtoa_r+0x994>
 8007c14:	2201      	movs	r2, #1
 8007c16:	e7e1      	b.n	8007bdc <_dtoa_r+0x9e4>
 8007c18:	9b08      	ldr	r3, [sp, #32]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	db04      	blt.n	8007c28 <_dtoa_r+0xa30>
 8007c1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c20:	430b      	orrs	r3, r1
 8007c22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c24:	430b      	orrs	r3, r1
 8007c26:	d120      	bne.n	8007c6a <_dtoa_r+0xa72>
 8007c28:	2a00      	cmp	r2, #0
 8007c2a:	dded      	ble.n	8007c08 <_dtoa_r+0xa10>
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	2201      	movs	r2, #1
 8007c30:	4658      	mov	r0, fp
 8007c32:	f000 fbb3 	bl	800839c <__lshift>
 8007c36:	4621      	mov	r1, r4
 8007c38:	4681      	mov	r9, r0
 8007c3a:	f000 fc1b 	bl	8008474 <__mcmp>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	dc03      	bgt.n	8007c4a <_dtoa_r+0xa52>
 8007c42:	d1e1      	bne.n	8007c08 <_dtoa_r+0xa10>
 8007c44:	f018 0f01 	tst.w	r8, #1
 8007c48:	d0de      	beq.n	8007c08 <_dtoa_r+0xa10>
 8007c4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c4e:	d1d8      	bne.n	8007c02 <_dtoa_r+0xa0a>
 8007c50:	9a00      	ldr	r2, [sp, #0]
 8007c52:	2339      	movs	r3, #57	@ 0x39
 8007c54:	7013      	strb	r3, [r2, #0]
 8007c56:	4633      	mov	r3, r6
 8007c58:	461e      	mov	r6, r3
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c60:	2a39      	cmp	r2, #57	@ 0x39
 8007c62:	d052      	beq.n	8007d0a <_dtoa_r+0xb12>
 8007c64:	3201      	adds	r2, #1
 8007c66:	701a      	strb	r2, [r3, #0]
 8007c68:	e612      	b.n	8007890 <_dtoa_r+0x698>
 8007c6a:	2a00      	cmp	r2, #0
 8007c6c:	dd07      	ble.n	8007c7e <_dtoa_r+0xa86>
 8007c6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c72:	d0ed      	beq.n	8007c50 <_dtoa_r+0xa58>
 8007c74:	9a00      	ldr	r2, [sp, #0]
 8007c76:	f108 0301 	add.w	r3, r8, #1
 8007c7a:	7013      	strb	r3, [r2, #0]
 8007c7c:	e608      	b.n	8007890 <_dtoa_r+0x698>
 8007c7e:	9b07      	ldr	r3, [sp, #28]
 8007c80:	9a07      	ldr	r2, [sp, #28]
 8007c82:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007c86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d028      	beq.n	8007cde <_dtoa_r+0xae6>
 8007c8c:	4649      	mov	r1, r9
 8007c8e:	2300      	movs	r3, #0
 8007c90:	220a      	movs	r2, #10
 8007c92:	4658      	mov	r0, fp
 8007c94:	f000 f9d6 	bl	8008044 <__multadd>
 8007c98:	42af      	cmp	r7, r5
 8007c9a:	4681      	mov	r9, r0
 8007c9c:	f04f 0300 	mov.w	r3, #0
 8007ca0:	f04f 020a 	mov.w	r2, #10
 8007ca4:	4639      	mov	r1, r7
 8007ca6:	4658      	mov	r0, fp
 8007ca8:	d107      	bne.n	8007cba <_dtoa_r+0xac2>
 8007caa:	f000 f9cb 	bl	8008044 <__multadd>
 8007cae:	4607      	mov	r7, r0
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	9b07      	ldr	r3, [sp, #28]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	9307      	str	r3, [sp, #28]
 8007cb8:	e774      	b.n	8007ba4 <_dtoa_r+0x9ac>
 8007cba:	f000 f9c3 	bl	8008044 <__multadd>
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	220a      	movs	r2, #10
 8007cc6:	4658      	mov	r0, fp
 8007cc8:	f000 f9bc 	bl	8008044 <__multadd>
 8007ccc:	4605      	mov	r5, r0
 8007cce:	e7f0      	b.n	8007cb2 <_dtoa_r+0xaba>
 8007cd0:	9b00      	ldr	r3, [sp, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	bfcc      	ite	gt
 8007cd6:	461e      	movgt	r6, r3
 8007cd8:	2601      	movle	r6, #1
 8007cda:	4456      	add	r6, sl
 8007cdc:	2700      	movs	r7, #0
 8007cde:	4649      	mov	r1, r9
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	4658      	mov	r0, fp
 8007ce4:	f000 fb5a 	bl	800839c <__lshift>
 8007ce8:	4621      	mov	r1, r4
 8007cea:	4681      	mov	r9, r0
 8007cec:	f000 fbc2 	bl	8008474 <__mcmp>
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	dcb0      	bgt.n	8007c56 <_dtoa_r+0xa5e>
 8007cf4:	d102      	bne.n	8007cfc <_dtoa_r+0xb04>
 8007cf6:	f018 0f01 	tst.w	r8, #1
 8007cfa:	d1ac      	bne.n	8007c56 <_dtoa_r+0xa5e>
 8007cfc:	4633      	mov	r3, r6
 8007cfe:	461e      	mov	r6, r3
 8007d00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d04:	2a30      	cmp	r2, #48	@ 0x30
 8007d06:	d0fa      	beq.n	8007cfe <_dtoa_r+0xb06>
 8007d08:	e5c2      	b.n	8007890 <_dtoa_r+0x698>
 8007d0a:	459a      	cmp	sl, r3
 8007d0c:	d1a4      	bne.n	8007c58 <_dtoa_r+0xa60>
 8007d0e:	9b04      	ldr	r3, [sp, #16]
 8007d10:	3301      	adds	r3, #1
 8007d12:	9304      	str	r3, [sp, #16]
 8007d14:	2331      	movs	r3, #49	@ 0x31
 8007d16:	f88a 3000 	strb.w	r3, [sl]
 8007d1a:	e5b9      	b.n	8007890 <_dtoa_r+0x698>
 8007d1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d1e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007d7c <_dtoa_r+0xb84>
 8007d22:	b11b      	cbz	r3, 8007d2c <_dtoa_r+0xb34>
 8007d24:	f10a 0308 	add.w	r3, sl, #8
 8007d28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	4650      	mov	r0, sl
 8007d2e:	b019      	add	sp, #100	@ 0x64
 8007d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	f77f ae37 	ble.w	80079aa <_dtoa_r+0x7b2>
 8007d3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d40:	2001      	movs	r0, #1
 8007d42:	e655      	b.n	80079f0 <_dtoa_r+0x7f8>
 8007d44:	9b00      	ldr	r3, [sp, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f77f aed6 	ble.w	8007af8 <_dtoa_r+0x900>
 8007d4c:	4656      	mov	r6, sl
 8007d4e:	4621      	mov	r1, r4
 8007d50:	4648      	mov	r0, r9
 8007d52:	f7ff f9c8 	bl	80070e6 <quorem>
 8007d56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d5a:	f806 8b01 	strb.w	r8, [r6], #1
 8007d5e:	9b00      	ldr	r3, [sp, #0]
 8007d60:	eba6 020a 	sub.w	r2, r6, sl
 8007d64:	4293      	cmp	r3, r2
 8007d66:	ddb3      	ble.n	8007cd0 <_dtoa_r+0xad8>
 8007d68:	4649      	mov	r1, r9
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	220a      	movs	r2, #10
 8007d6e:	4658      	mov	r0, fp
 8007d70:	f000 f968 	bl	8008044 <__multadd>
 8007d74:	4681      	mov	r9, r0
 8007d76:	e7ea      	b.n	8007d4e <_dtoa_r+0xb56>
 8007d78:	080092cc 	.word	0x080092cc
 8007d7c:	08009250 	.word	0x08009250

08007d80 <_free_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4605      	mov	r5, r0
 8007d84:	2900      	cmp	r1, #0
 8007d86:	d041      	beq.n	8007e0c <_free_r+0x8c>
 8007d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d8c:	1f0c      	subs	r4, r1, #4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	bfb8      	it	lt
 8007d92:	18e4      	addlt	r4, r4, r3
 8007d94:	f000 f8e8 	bl	8007f68 <__malloc_lock>
 8007d98:	4a1d      	ldr	r2, [pc, #116]	@ (8007e10 <_free_r+0x90>)
 8007d9a:	6813      	ldr	r3, [r2, #0]
 8007d9c:	b933      	cbnz	r3, 8007dac <_free_r+0x2c>
 8007d9e:	6063      	str	r3, [r4, #4]
 8007da0:	6014      	str	r4, [r2, #0]
 8007da2:	4628      	mov	r0, r5
 8007da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007da8:	f000 b8e4 	b.w	8007f74 <__malloc_unlock>
 8007dac:	42a3      	cmp	r3, r4
 8007dae:	d908      	bls.n	8007dc2 <_free_r+0x42>
 8007db0:	6820      	ldr	r0, [r4, #0]
 8007db2:	1821      	adds	r1, r4, r0
 8007db4:	428b      	cmp	r3, r1
 8007db6:	bf01      	itttt	eq
 8007db8:	6819      	ldreq	r1, [r3, #0]
 8007dba:	685b      	ldreq	r3, [r3, #4]
 8007dbc:	1809      	addeq	r1, r1, r0
 8007dbe:	6021      	streq	r1, [r4, #0]
 8007dc0:	e7ed      	b.n	8007d9e <_free_r+0x1e>
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	b10b      	cbz	r3, 8007dcc <_free_r+0x4c>
 8007dc8:	42a3      	cmp	r3, r4
 8007dca:	d9fa      	bls.n	8007dc2 <_free_r+0x42>
 8007dcc:	6811      	ldr	r1, [r2, #0]
 8007dce:	1850      	adds	r0, r2, r1
 8007dd0:	42a0      	cmp	r0, r4
 8007dd2:	d10b      	bne.n	8007dec <_free_r+0x6c>
 8007dd4:	6820      	ldr	r0, [r4, #0]
 8007dd6:	4401      	add	r1, r0
 8007dd8:	1850      	adds	r0, r2, r1
 8007dda:	4283      	cmp	r3, r0
 8007ddc:	6011      	str	r1, [r2, #0]
 8007dde:	d1e0      	bne.n	8007da2 <_free_r+0x22>
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	6053      	str	r3, [r2, #4]
 8007de6:	4408      	add	r0, r1
 8007de8:	6010      	str	r0, [r2, #0]
 8007dea:	e7da      	b.n	8007da2 <_free_r+0x22>
 8007dec:	d902      	bls.n	8007df4 <_free_r+0x74>
 8007dee:	230c      	movs	r3, #12
 8007df0:	602b      	str	r3, [r5, #0]
 8007df2:	e7d6      	b.n	8007da2 <_free_r+0x22>
 8007df4:	6820      	ldr	r0, [r4, #0]
 8007df6:	1821      	adds	r1, r4, r0
 8007df8:	428b      	cmp	r3, r1
 8007dfa:	bf04      	itt	eq
 8007dfc:	6819      	ldreq	r1, [r3, #0]
 8007dfe:	685b      	ldreq	r3, [r3, #4]
 8007e00:	6063      	str	r3, [r4, #4]
 8007e02:	bf04      	itt	eq
 8007e04:	1809      	addeq	r1, r1, r0
 8007e06:	6021      	streq	r1, [r4, #0]
 8007e08:	6054      	str	r4, [r2, #4]
 8007e0a:	e7ca      	b.n	8007da2 <_free_r+0x22>
 8007e0c:	bd38      	pop	{r3, r4, r5, pc}
 8007e0e:	bf00      	nop
 8007e10:	20000548 	.word	0x20000548

08007e14 <malloc>:
 8007e14:	4b02      	ldr	r3, [pc, #8]	@ (8007e20 <malloc+0xc>)
 8007e16:	4601      	mov	r1, r0
 8007e18:	6818      	ldr	r0, [r3, #0]
 8007e1a:	f000 b825 	b.w	8007e68 <_malloc_r>
 8007e1e:	bf00      	nop
 8007e20:	20000018 	.word	0x20000018

08007e24 <sbrk_aligned>:
 8007e24:	b570      	push	{r4, r5, r6, lr}
 8007e26:	4e0f      	ldr	r6, [pc, #60]	@ (8007e64 <sbrk_aligned+0x40>)
 8007e28:	460c      	mov	r4, r1
 8007e2a:	6831      	ldr	r1, [r6, #0]
 8007e2c:	4605      	mov	r5, r0
 8007e2e:	b911      	cbnz	r1, 8007e36 <sbrk_aligned+0x12>
 8007e30:	f000 fe46 	bl	8008ac0 <_sbrk_r>
 8007e34:	6030      	str	r0, [r6, #0]
 8007e36:	4621      	mov	r1, r4
 8007e38:	4628      	mov	r0, r5
 8007e3a:	f000 fe41 	bl	8008ac0 <_sbrk_r>
 8007e3e:	1c43      	adds	r3, r0, #1
 8007e40:	d103      	bne.n	8007e4a <sbrk_aligned+0x26>
 8007e42:	f04f 34ff 	mov.w	r4, #4294967295
 8007e46:	4620      	mov	r0, r4
 8007e48:	bd70      	pop	{r4, r5, r6, pc}
 8007e4a:	1cc4      	adds	r4, r0, #3
 8007e4c:	f024 0403 	bic.w	r4, r4, #3
 8007e50:	42a0      	cmp	r0, r4
 8007e52:	d0f8      	beq.n	8007e46 <sbrk_aligned+0x22>
 8007e54:	1a21      	subs	r1, r4, r0
 8007e56:	4628      	mov	r0, r5
 8007e58:	f000 fe32 	bl	8008ac0 <_sbrk_r>
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d1f2      	bne.n	8007e46 <sbrk_aligned+0x22>
 8007e60:	e7ef      	b.n	8007e42 <sbrk_aligned+0x1e>
 8007e62:	bf00      	nop
 8007e64:	20000544 	.word	0x20000544

08007e68 <_malloc_r>:
 8007e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e6c:	1ccd      	adds	r5, r1, #3
 8007e6e:	f025 0503 	bic.w	r5, r5, #3
 8007e72:	3508      	adds	r5, #8
 8007e74:	2d0c      	cmp	r5, #12
 8007e76:	bf38      	it	cc
 8007e78:	250c      	movcc	r5, #12
 8007e7a:	2d00      	cmp	r5, #0
 8007e7c:	4606      	mov	r6, r0
 8007e7e:	db01      	blt.n	8007e84 <_malloc_r+0x1c>
 8007e80:	42a9      	cmp	r1, r5
 8007e82:	d904      	bls.n	8007e8e <_malloc_r+0x26>
 8007e84:	230c      	movs	r3, #12
 8007e86:	6033      	str	r3, [r6, #0]
 8007e88:	2000      	movs	r0, #0
 8007e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f64 <_malloc_r+0xfc>
 8007e92:	f000 f869 	bl	8007f68 <__malloc_lock>
 8007e96:	f8d8 3000 	ldr.w	r3, [r8]
 8007e9a:	461c      	mov	r4, r3
 8007e9c:	bb44      	cbnz	r4, 8007ef0 <_malloc_r+0x88>
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f7ff ffbf 	bl	8007e24 <sbrk_aligned>
 8007ea6:	1c43      	adds	r3, r0, #1
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	d158      	bne.n	8007f5e <_malloc_r+0xf6>
 8007eac:	f8d8 4000 	ldr.w	r4, [r8]
 8007eb0:	4627      	mov	r7, r4
 8007eb2:	2f00      	cmp	r7, #0
 8007eb4:	d143      	bne.n	8007f3e <_malloc_r+0xd6>
 8007eb6:	2c00      	cmp	r4, #0
 8007eb8:	d04b      	beq.n	8007f52 <_malloc_r+0xea>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	4639      	mov	r1, r7
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	eb04 0903 	add.w	r9, r4, r3
 8007ec4:	f000 fdfc 	bl	8008ac0 <_sbrk_r>
 8007ec8:	4581      	cmp	r9, r0
 8007eca:	d142      	bne.n	8007f52 <_malloc_r+0xea>
 8007ecc:	6821      	ldr	r1, [r4, #0]
 8007ece:	1a6d      	subs	r5, r5, r1
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f7ff ffa6 	bl	8007e24 <sbrk_aligned>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d03a      	beq.n	8007f52 <_malloc_r+0xea>
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	442b      	add	r3, r5
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	bb62      	cbnz	r2, 8007f44 <_malloc_r+0xdc>
 8007eea:	f8c8 7000 	str.w	r7, [r8]
 8007eee:	e00f      	b.n	8007f10 <_malloc_r+0xa8>
 8007ef0:	6822      	ldr	r2, [r4, #0]
 8007ef2:	1b52      	subs	r2, r2, r5
 8007ef4:	d420      	bmi.n	8007f38 <_malloc_r+0xd0>
 8007ef6:	2a0b      	cmp	r2, #11
 8007ef8:	d917      	bls.n	8007f2a <_malloc_r+0xc2>
 8007efa:	1961      	adds	r1, r4, r5
 8007efc:	42a3      	cmp	r3, r4
 8007efe:	6025      	str	r5, [r4, #0]
 8007f00:	bf18      	it	ne
 8007f02:	6059      	strne	r1, [r3, #4]
 8007f04:	6863      	ldr	r3, [r4, #4]
 8007f06:	bf08      	it	eq
 8007f08:	f8c8 1000 	streq.w	r1, [r8]
 8007f0c:	5162      	str	r2, [r4, r5]
 8007f0e:	604b      	str	r3, [r1, #4]
 8007f10:	4630      	mov	r0, r6
 8007f12:	f000 f82f 	bl	8007f74 <__malloc_unlock>
 8007f16:	f104 000b 	add.w	r0, r4, #11
 8007f1a:	1d23      	adds	r3, r4, #4
 8007f1c:	f020 0007 	bic.w	r0, r0, #7
 8007f20:	1ac2      	subs	r2, r0, r3
 8007f22:	bf1c      	itt	ne
 8007f24:	1a1b      	subne	r3, r3, r0
 8007f26:	50a3      	strne	r3, [r4, r2]
 8007f28:	e7af      	b.n	8007e8a <_malloc_r+0x22>
 8007f2a:	6862      	ldr	r2, [r4, #4]
 8007f2c:	42a3      	cmp	r3, r4
 8007f2e:	bf0c      	ite	eq
 8007f30:	f8c8 2000 	streq.w	r2, [r8]
 8007f34:	605a      	strne	r2, [r3, #4]
 8007f36:	e7eb      	b.n	8007f10 <_malloc_r+0xa8>
 8007f38:	4623      	mov	r3, r4
 8007f3a:	6864      	ldr	r4, [r4, #4]
 8007f3c:	e7ae      	b.n	8007e9c <_malloc_r+0x34>
 8007f3e:	463c      	mov	r4, r7
 8007f40:	687f      	ldr	r7, [r7, #4]
 8007f42:	e7b6      	b.n	8007eb2 <_malloc_r+0x4a>
 8007f44:	461a      	mov	r2, r3
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	42a3      	cmp	r3, r4
 8007f4a:	d1fb      	bne.n	8007f44 <_malloc_r+0xdc>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	6053      	str	r3, [r2, #4]
 8007f50:	e7de      	b.n	8007f10 <_malloc_r+0xa8>
 8007f52:	230c      	movs	r3, #12
 8007f54:	6033      	str	r3, [r6, #0]
 8007f56:	4630      	mov	r0, r6
 8007f58:	f000 f80c 	bl	8007f74 <__malloc_unlock>
 8007f5c:	e794      	b.n	8007e88 <_malloc_r+0x20>
 8007f5e:	6005      	str	r5, [r0, #0]
 8007f60:	e7d6      	b.n	8007f10 <_malloc_r+0xa8>
 8007f62:	bf00      	nop
 8007f64:	20000548 	.word	0x20000548

08007f68 <__malloc_lock>:
 8007f68:	4801      	ldr	r0, [pc, #4]	@ (8007f70 <__malloc_lock+0x8>)
 8007f6a:	f7ff b8ba 	b.w	80070e2 <__retarget_lock_acquire_recursive>
 8007f6e:	bf00      	nop
 8007f70:	20000540 	.word	0x20000540

08007f74 <__malloc_unlock>:
 8007f74:	4801      	ldr	r0, [pc, #4]	@ (8007f7c <__malloc_unlock+0x8>)
 8007f76:	f7ff b8b5 	b.w	80070e4 <__retarget_lock_release_recursive>
 8007f7a:	bf00      	nop
 8007f7c:	20000540 	.word	0x20000540

08007f80 <_Balloc>:
 8007f80:	b570      	push	{r4, r5, r6, lr}
 8007f82:	69c6      	ldr	r6, [r0, #28]
 8007f84:	4604      	mov	r4, r0
 8007f86:	460d      	mov	r5, r1
 8007f88:	b976      	cbnz	r6, 8007fa8 <_Balloc+0x28>
 8007f8a:	2010      	movs	r0, #16
 8007f8c:	f7ff ff42 	bl	8007e14 <malloc>
 8007f90:	4602      	mov	r2, r0
 8007f92:	61e0      	str	r0, [r4, #28]
 8007f94:	b920      	cbnz	r0, 8007fa0 <_Balloc+0x20>
 8007f96:	4b18      	ldr	r3, [pc, #96]	@ (8007ff8 <_Balloc+0x78>)
 8007f98:	4818      	ldr	r0, [pc, #96]	@ (8007ffc <_Balloc+0x7c>)
 8007f9a:	216b      	movs	r1, #107	@ 0x6b
 8007f9c:	f000 fdae 	bl	8008afc <__assert_func>
 8007fa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fa4:	6006      	str	r6, [r0, #0]
 8007fa6:	60c6      	str	r6, [r0, #12]
 8007fa8:	69e6      	ldr	r6, [r4, #28]
 8007faa:	68f3      	ldr	r3, [r6, #12]
 8007fac:	b183      	cbz	r3, 8007fd0 <_Balloc+0x50>
 8007fae:	69e3      	ldr	r3, [r4, #28]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fb6:	b9b8      	cbnz	r0, 8007fe8 <_Balloc+0x68>
 8007fb8:	2101      	movs	r1, #1
 8007fba:	fa01 f605 	lsl.w	r6, r1, r5
 8007fbe:	1d72      	adds	r2, r6, #5
 8007fc0:	0092      	lsls	r2, r2, #2
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f000 fdb8 	bl	8008b38 <_calloc_r>
 8007fc8:	b160      	cbz	r0, 8007fe4 <_Balloc+0x64>
 8007fca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fce:	e00e      	b.n	8007fee <_Balloc+0x6e>
 8007fd0:	2221      	movs	r2, #33	@ 0x21
 8007fd2:	2104      	movs	r1, #4
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f000 fdaf 	bl	8008b38 <_calloc_r>
 8007fda:	69e3      	ldr	r3, [r4, #28]
 8007fdc:	60f0      	str	r0, [r6, #12]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e4      	bne.n	8007fae <_Balloc+0x2e>
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	bd70      	pop	{r4, r5, r6, pc}
 8007fe8:	6802      	ldr	r2, [r0, #0]
 8007fea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ff4:	e7f7      	b.n	8007fe6 <_Balloc+0x66>
 8007ff6:	bf00      	nop
 8007ff8:	0800925d 	.word	0x0800925d
 8007ffc:	080092dd 	.word	0x080092dd

08008000 <_Bfree>:
 8008000:	b570      	push	{r4, r5, r6, lr}
 8008002:	69c6      	ldr	r6, [r0, #28]
 8008004:	4605      	mov	r5, r0
 8008006:	460c      	mov	r4, r1
 8008008:	b976      	cbnz	r6, 8008028 <_Bfree+0x28>
 800800a:	2010      	movs	r0, #16
 800800c:	f7ff ff02 	bl	8007e14 <malloc>
 8008010:	4602      	mov	r2, r0
 8008012:	61e8      	str	r0, [r5, #28]
 8008014:	b920      	cbnz	r0, 8008020 <_Bfree+0x20>
 8008016:	4b09      	ldr	r3, [pc, #36]	@ (800803c <_Bfree+0x3c>)
 8008018:	4809      	ldr	r0, [pc, #36]	@ (8008040 <_Bfree+0x40>)
 800801a:	218f      	movs	r1, #143	@ 0x8f
 800801c:	f000 fd6e 	bl	8008afc <__assert_func>
 8008020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008024:	6006      	str	r6, [r0, #0]
 8008026:	60c6      	str	r6, [r0, #12]
 8008028:	b13c      	cbz	r4, 800803a <_Bfree+0x3a>
 800802a:	69eb      	ldr	r3, [r5, #28]
 800802c:	6862      	ldr	r2, [r4, #4]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008034:	6021      	str	r1, [r4, #0]
 8008036:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800803a:	bd70      	pop	{r4, r5, r6, pc}
 800803c:	0800925d 	.word	0x0800925d
 8008040:	080092dd 	.word	0x080092dd

08008044 <__multadd>:
 8008044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008048:	690d      	ldr	r5, [r1, #16]
 800804a:	4607      	mov	r7, r0
 800804c:	460c      	mov	r4, r1
 800804e:	461e      	mov	r6, r3
 8008050:	f101 0c14 	add.w	ip, r1, #20
 8008054:	2000      	movs	r0, #0
 8008056:	f8dc 3000 	ldr.w	r3, [ip]
 800805a:	b299      	uxth	r1, r3
 800805c:	fb02 6101 	mla	r1, r2, r1, r6
 8008060:	0c1e      	lsrs	r6, r3, #16
 8008062:	0c0b      	lsrs	r3, r1, #16
 8008064:	fb02 3306 	mla	r3, r2, r6, r3
 8008068:	b289      	uxth	r1, r1
 800806a:	3001      	adds	r0, #1
 800806c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008070:	4285      	cmp	r5, r0
 8008072:	f84c 1b04 	str.w	r1, [ip], #4
 8008076:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800807a:	dcec      	bgt.n	8008056 <__multadd+0x12>
 800807c:	b30e      	cbz	r6, 80080c2 <__multadd+0x7e>
 800807e:	68a3      	ldr	r3, [r4, #8]
 8008080:	42ab      	cmp	r3, r5
 8008082:	dc19      	bgt.n	80080b8 <__multadd+0x74>
 8008084:	6861      	ldr	r1, [r4, #4]
 8008086:	4638      	mov	r0, r7
 8008088:	3101      	adds	r1, #1
 800808a:	f7ff ff79 	bl	8007f80 <_Balloc>
 800808e:	4680      	mov	r8, r0
 8008090:	b928      	cbnz	r0, 800809e <__multadd+0x5a>
 8008092:	4602      	mov	r2, r0
 8008094:	4b0c      	ldr	r3, [pc, #48]	@ (80080c8 <__multadd+0x84>)
 8008096:	480d      	ldr	r0, [pc, #52]	@ (80080cc <__multadd+0x88>)
 8008098:	21ba      	movs	r1, #186	@ 0xba
 800809a:	f000 fd2f 	bl	8008afc <__assert_func>
 800809e:	6922      	ldr	r2, [r4, #16]
 80080a0:	3202      	adds	r2, #2
 80080a2:	f104 010c 	add.w	r1, r4, #12
 80080a6:	0092      	lsls	r2, r2, #2
 80080a8:	300c      	adds	r0, #12
 80080aa:	f000 fd19 	bl	8008ae0 <memcpy>
 80080ae:	4621      	mov	r1, r4
 80080b0:	4638      	mov	r0, r7
 80080b2:	f7ff ffa5 	bl	8008000 <_Bfree>
 80080b6:	4644      	mov	r4, r8
 80080b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080bc:	3501      	adds	r5, #1
 80080be:	615e      	str	r6, [r3, #20]
 80080c0:	6125      	str	r5, [r4, #16]
 80080c2:	4620      	mov	r0, r4
 80080c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c8:	080092cc 	.word	0x080092cc
 80080cc:	080092dd 	.word	0x080092dd

080080d0 <__hi0bits>:
 80080d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80080d4:	4603      	mov	r3, r0
 80080d6:	bf36      	itet	cc
 80080d8:	0403      	lslcc	r3, r0, #16
 80080da:	2000      	movcs	r0, #0
 80080dc:	2010      	movcc	r0, #16
 80080de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080e2:	bf3c      	itt	cc
 80080e4:	021b      	lslcc	r3, r3, #8
 80080e6:	3008      	addcc	r0, #8
 80080e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080ec:	bf3c      	itt	cc
 80080ee:	011b      	lslcc	r3, r3, #4
 80080f0:	3004      	addcc	r0, #4
 80080f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080f6:	bf3c      	itt	cc
 80080f8:	009b      	lslcc	r3, r3, #2
 80080fa:	3002      	addcc	r0, #2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	db05      	blt.n	800810c <__hi0bits+0x3c>
 8008100:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008104:	f100 0001 	add.w	r0, r0, #1
 8008108:	bf08      	it	eq
 800810a:	2020      	moveq	r0, #32
 800810c:	4770      	bx	lr

0800810e <__lo0bits>:
 800810e:	6803      	ldr	r3, [r0, #0]
 8008110:	4602      	mov	r2, r0
 8008112:	f013 0007 	ands.w	r0, r3, #7
 8008116:	d00b      	beq.n	8008130 <__lo0bits+0x22>
 8008118:	07d9      	lsls	r1, r3, #31
 800811a:	d421      	bmi.n	8008160 <__lo0bits+0x52>
 800811c:	0798      	lsls	r0, r3, #30
 800811e:	bf49      	itett	mi
 8008120:	085b      	lsrmi	r3, r3, #1
 8008122:	089b      	lsrpl	r3, r3, #2
 8008124:	2001      	movmi	r0, #1
 8008126:	6013      	strmi	r3, [r2, #0]
 8008128:	bf5c      	itt	pl
 800812a:	6013      	strpl	r3, [r2, #0]
 800812c:	2002      	movpl	r0, #2
 800812e:	4770      	bx	lr
 8008130:	b299      	uxth	r1, r3
 8008132:	b909      	cbnz	r1, 8008138 <__lo0bits+0x2a>
 8008134:	0c1b      	lsrs	r3, r3, #16
 8008136:	2010      	movs	r0, #16
 8008138:	b2d9      	uxtb	r1, r3
 800813a:	b909      	cbnz	r1, 8008140 <__lo0bits+0x32>
 800813c:	3008      	adds	r0, #8
 800813e:	0a1b      	lsrs	r3, r3, #8
 8008140:	0719      	lsls	r1, r3, #28
 8008142:	bf04      	itt	eq
 8008144:	091b      	lsreq	r3, r3, #4
 8008146:	3004      	addeq	r0, #4
 8008148:	0799      	lsls	r1, r3, #30
 800814a:	bf04      	itt	eq
 800814c:	089b      	lsreq	r3, r3, #2
 800814e:	3002      	addeq	r0, #2
 8008150:	07d9      	lsls	r1, r3, #31
 8008152:	d403      	bmi.n	800815c <__lo0bits+0x4e>
 8008154:	085b      	lsrs	r3, r3, #1
 8008156:	f100 0001 	add.w	r0, r0, #1
 800815a:	d003      	beq.n	8008164 <__lo0bits+0x56>
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	4770      	bx	lr
 8008160:	2000      	movs	r0, #0
 8008162:	4770      	bx	lr
 8008164:	2020      	movs	r0, #32
 8008166:	4770      	bx	lr

08008168 <__i2b>:
 8008168:	b510      	push	{r4, lr}
 800816a:	460c      	mov	r4, r1
 800816c:	2101      	movs	r1, #1
 800816e:	f7ff ff07 	bl	8007f80 <_Balloc>
 8008172:	4602      	mov	r2, r0
 8008174:	b928      	cbnz	r0, 8008182 <__i2b+0x1a>
 8008176:	4b05      	ldr	r3, [pc, #20]	@ (800818c <__i2b+0x24>)
 8008178:	4805      	ldr	r0, [pc, #20]	@ (8008190 <__i2b+0x28>)
 800817a:	f240 1145 	movw	r1, #325	@ 0x145
 800817e:	f000 fcbd 	bl	8008afc <__assert_func>
 8008182:	2301      	movs	r3, #1
 8008184:	6144      	str	r4, [r0, #20]
 8008186:	6103      	str	r3, [r0, #16]
 8008188:	bd10      	pop	{r4, pc}
 800818a:	bf00      	nop
 800818c:	080092cc 	.word	0x080092cc
 8008190:	080092dd 	.word	0x080092dd

08008194 <__multiply>:
 8008194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008198:	4614      	mov	r4, r2
 800819a:	690a      	ldr	r2, [r1, #16]
 800819c:	6923      	ldr	r3, [r4, #16]
 800819e:	429a      	cmp	r2, r3
 80081a0:	bfa8      	it	ge
 80081a2:	4623      	movge	r3, r4
 80081a4:	460f      	mov	r7, r1
 80081a6:	bfa4      	itt	ge
 80081a8:	460c      	movge	r4, r1
 80081aa:	461f      	movge	r7, r3
 80081ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80081b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80081b4:	68a3      	ldr	r3, [r4, #8]
 80081b6:	6861      	ldr	r1, [r4, #4]
 80081b8:	eb0a 0609 	add.w	r6, sl, r9
 80081bc:	42b3      	cmp	r3, r6
 80081be:	b085      	sub	sp, #20
 80081c0:	bfb8      	it	lt
 80081c2:	3101      	addlt	r1, #1
 80081c4:	f7ff fedc 	bl	8007f80 <_Balloc>
 80081c8:	b930      	cbnz	r0, 80081d8 <__multiply+0x44>
 80081ca:	4602      	mov	r2, r0
 80081cc:	4b44      	ldr	r3, [pc, #272]	@ (80082e0 <__multiply+0x14c>)
 80081ce:	4845      	ldr	r0, [pc, #276]	@ (80082e4 <__multiply+0x150>)
 80081d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80081d4:	f000 fc92 	bl	8008afc <__assert_func>
 80081d8:	f100 0514 	add.w	r5, r0, #20
 80081dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081e0:	462b      	mov	r3, r5
 80081e2:	2200      	movs	r2, #0
 80081e4:	4543      	cmp	r3, r8
 80081e6:	d321      	bcc.n	800822c <__multiply+0x98>
 80081e8:	f107 0114 	add.w	r1, r7, #20
 80081ec:	f104 0214 	add.w	r2, r4, #20
 80081f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80081f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80081f8:	9302      	str	r3, [sp, #8]
 80081fa:	1b13      	subs	r3, r2, r4
 80081fc:	3b15      	subs	r3, #21
 80081fe:	f023 0303 	bic.w	r3, r3, #3
 8008202:	3304      	adds	r3, #4
 8008204:	f104 0715 	add.w	r7, r4, #21
 8008208:	42ba      	cmp	r2, r7
 800820a:	bf38      	it	cc
 800820c:	2304      	movcc	r3, #4
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	9b02      	ldr	r3, [sp, #8]
 8008212:	9103      	str	r1, [sp, #12]
 8008214:	428b      	cmp	r3, r1
 8008216:	d80c      	bhi.n	8008232 <__multiply+0x9e>
 8008218:	2e00      	cmp	r6, #0
 800821a:	dd03      	ble.n	8008224 <__multiply+0x90>
 800821c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008220:	2b00      	cmp	r3, #0
 8008222:	d05b      	beq.n	80082dc <__multiply+0x148>
 8008224:	6106      	str	r6, [r0, #16]
 8008226:	b005      	add	sp, #20
 8008228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800822c:	f843 2b04 	str.w	r2, [r3], #4
 8008230:	e7d8      	b.n	80081e4 <__multiply+0x50>
 8008232:	f8b1 a000 	ldrh.w	sl, [r1]
 8008236:	f1ba 0f00 	cmp.w	sl, #0
 800823a:	d024      	beq.n	8008286 <__multiply+0xf2>
 800823c:	f104 0e14 	add.w	lr, r4, #20
 8008240:	46a9      	mov	r9, r5
 8008242:	f04f 0c00 	mov.w	ip, #0
 8008246:	f85e 7b04 	ldr.w	r7, [lr], #4
 800824a:	f8d9 3000 	ldr.w	r3, [r9]
 800824e:	fa1f fb87 	uxth.w	fp, r7
 8008252:	b29b      	uxth	r3, r3
 8008254:	fb0a 330b 	mla	r3, sl, fp, r3
 8008258:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800825c:	f8d9 7000 	ldr.w	r7, [r9]
 8008260:	4463      	add	r3, ip
 8008262:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008266:	fb0a c70b 	mla	r7, sl, fp, ip
 800826a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800826e:	b29b      	uxth	r3, r3
 8008270:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008274:	4572      	cmp	r2, lr
 8008276:	f849 3b04 	str.w	r3, [r9], #4
 800827a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800827e:	d8e2      	bhi.n	8008246 <__multiply+0xb2>
 8008280:	9b01      	ldr	r3, [sp, #4]
 8008282:	f845 c003 	str.w	ip, [r5, r3]
 8008286:	9b03      	ldr	r3, [sp, #12]
 8008288:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800828c:	3104      	adds	r1, #4
 800828e:	f1b9 0f00 	cmp.w	r9, #0
 8008292:	d021      	beq.n	80082d8 <__multiply+0x144>
 8008294:	682b      	ldr	r3, [r5, #0]
 8008296:	f104 0c14 	add.w	ip, r4, #20
 800829a:	46ae      	mov	lr, r5
 800829c:	f04f 0a00 	mov.w	sl, #0
 80082a0:	f8bc b000 	ldrh.w	fp, [ip]
 80082a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80082a8:	fb09 770b 	mla	r7, r9, fp, r7
 80082ac:	4457      	add	r7, sl
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80082b4:	f84e 3b04 	str.w	r3, [lr], #4
 80082b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082c0:	f8be 3000 	ldrh.w	r3, [lr]
 80082c4:	fb09 330a 	mla	r3, r9, sl, r3
 80082c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80082cc:	4562      	cmp	r2, ip
 80082ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082d2:	d8e5      	bhi.n	80082a0 <__multiply+0x10c>
 80082d4:	9f01      	ldr	r7, [sp, #4]
 80082d6:	51eb      	str	r3, [r5, r7]
 80082d8:	3504      	adds	r5, #4
 80082da:	e799      	b.n	8008210 <__multiply+0x7c>
 80082dc:	3e01      	subs	r6, #1
 80082de:	e79b      	b.n	8008218 <__multiply+0x84>
 80082e0:	080092cc 	.word	0x080092cc
 80082e4:	080092dd 	.word	0x080092dd

080082e8 <__pow5mult>:
 80082e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082ec:	4615      	mov	r5, r2
 80082ee:	f012 0203 	ands.w	r2, r2, #3
 80082f2:	4607      	mov	r7, r0
 80082f4:	460e      	mov	r6, r1
 80082f6:	d007      	beq.n	8008308 <__pow5mult+0x20>
 80082f8:	4c25      	ldr	r4, [pc, #148]	@ (8008390 <__pow5mult+0xa8>)
 80082fa:	3a01      	subs	r2, #1
 80082fc:	2300      	movs	r3, #0
 80082fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008302:	f7ff fe9f 	bl	8008044 <__multadd>
 8008306:	4606      	mov	r6, r0
 8008308:	10ad      	asrs	r5, r5, #2
 800830a:	d03d      	beq.n	8008388 <__pow5mult+0xa0>
 800830c:	69fc      	ldr	r4, [r7, #28]
 800830e:	b97c      	cbnz	r4, 8008330 <__pow5mult+0x48>
 8008310:	2010      	movs	r0, #16
 8008312:	f7ff fd7f 	bl	8007e14 <malloc>
 8008316:	4602      	mov	r2, r0
 8008318:	61f8      	str	r0, [r7, #28]
 800831a:	b928      	cbnz	r0, 8008328 <__pow5mult+0x40>
 800831c:	4b1d      	ldr	r3, [pc, #116]	@ (8008394 <__pow5mult+0xac>)
 800831e:	481e      	ldr	r0, [pc, #120]	@ (8008398 <__pow5mult+0xb0>)
 8008320:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008324:	f000 fbea 	bl	8008afc <__assert_func>
 8008328:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800832c:	6004      	str	r4, [r0, #0]
 800832e:	60c4      	str	r4, [r0, #12]
 8008330:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008334:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008338:	b94c      	cbnz	r4, 800834e <__pow5mult+0x66>
 800833a:	f240 2171 	movw	r1, #625	@ 0x271
 800833e:	4638      	mov	r0, r7
 8008340:	f7ff ff12 	bl	8008168 <__i2b>
 8008344:	2300      	movs	r3, #0
 8008346:	f8c8 0008 	str.w	r0, [r8, #8]
 800834a:	4604      	mov	r4, r0
 800834c:	6003      	str	r3, [r0, #0]
 800834e:	f04f 0900 	mov.w	r9, #0
 8008352:	07eb      	lsls	r3, r5, #31
 8008354:	d50a      	bpl.n	800836c <__pow5mult+0x84>
 8008356:	4631      	mov	r1, r6
 8008358:	4622      	mov	r2, r4
 800835a:	4638      	mov	r0, r7
 800835c:	f7ff ff1a 	bl	8008194 <__multiply>
 8008360:	4631      	mov	r1, r6
 8008362:	4680      	mov	r8, r0
 8008364:	4638      	mov	r0, r7
 8008366:	f7ff fe4b 	bl	8008000 <_Bfree>
 800836a:	4646      	mov	r6, r8
 800836c:	106d      	asrs	r5, r5, #1
 800836e:	d00b      	beq.n	8008388 <__pow5mult+0xa0>
 8008370:	6820      	ldr	r0, [r4, #0]
 8008372:	b938      	cbnz	r0, 8008384 <__pow5mult+0x9c>
 8008374:	4622      	mov	r2, r4
 8008376:	4621      	mov	r1, r4
 8008378:	4638      	mov	r0, r7
 800837a:	f7ff ff0b 	bl	8008194 <__multiply>
 800837e:	6020      	str	r0, [r4, #0]
 8008380:	f8c0 9000 	str.w	r9, [r0]
 8008384:	4604      	mov	r4, r0
 8008386:	e7e4      	b.n	8008352 <__pow5mult+0x6a>
 8008388:	4630      	mov	r0, r6
 800838a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800838e:	bf00      	nop
 8008390:	08009338 	.word	0x08009338
 8008394:	0800925d 	.word	0x0800925d
 8008398:	080092dd 	.word	0x080092dd

0800839c <__lshift>:
 800839c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a0:	460c      	mov	r4, r1
 80083a2:	6849      	ldr	r1, [r1, #4]
 80083a4:	6923      	ldr	r3, [r4, #16]
 80083a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083aa:	68a3      	ldr	r3, [r4, #8]
 80083ac:	4607      	mov	r7, r0
 80083ae:	4691      	mov	r9, r2
 80083b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083b4:	f108 0601 	add.w	r6, r8, #1
 80083b8:	42b3      	cmp	r3, r6
 80083ba:	db0b      	blt.n	80083d4 <__lshift+0x38>
 80083bc:	4638      	mov	r0, r7
 80083be:	f7ff fddf 	bl	8007f80 <_Balloc>
 80083c2:	4605      	mov	r5, r0
 80083c4:	b948      	cbnz	r0, 80083da <__lshift+0x3e>
 80083c6:	4602      	mov	r2, r0
 80083c8:	4b28      	ldr	r3, [pc, #160]	@ (800846c <__lshift+0xd0>)
 80083ca:	4829      	ldr	r0, [pc, #164]	@ (8008470 <__lshift+0xd4>)
 80083cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80083d0:	f000 fb94 	bl	8008afc <__assert_func>
 80083d4:	3101      	adds	r1, #1
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	e7ee      	b.n	80083b8 <__lshift+0x1c>
 80083da:	2300      	movs	r3, #0
 80083dc:	f100 0114 	add.w	r1, r0, #20
 80083e0:	f100 0210 	add.w	r2, r0, #16
 80083e4:	4618      	mov	r0, r3
 80083e6:	4553      	cmp	r3, sl
 80083e8:	db33      	blt.n	8008452 <__lshift+0xb6>
 80083ea:	6920      	ldr	r0, [r4, #16]
 80083ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083f0:	f104 0314 	add.w	r3, r4, #20
 80083f4:	f019 091f 	ands.w	r9, r9, #31
 80083f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008400:	d02b      	beq.n	800845a <__lshift+0xbe>
 8008402:	f1c9 0e20 	rsb	lr, r9, #32
 8008406:	468a      	mov	sl, r1
 8008408:	2200      	movs	r2, #0
 800840a:	6818      	ldr	r0, [r3, #0]
 800840c:	fa00 f009 	lsl.w	r0, r0, r9
 8008410:	4310      	orrs	r0, r2
 8008412:	f84a 0b04 	str.w	r0, [sl], #4
 8008416:	f853 2b04 	ldr.w	r2, [r3], #4
 800841a:	459c      	cmp	ip, r3
 800841c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008420:	d8f3      	bhi.n	800840a <__lshift+0x6e>
 8008422:	ebac 0304 	sub.w	r3, ip, r4
 8008426:	3b15      	subs	r3, #21
 8008428:	f023 0303 	bic.w	r3, r3, #3
 800842c:	3304      	adds	r3, #4
 800842e:	f104 0015 	add.w	r0, r4, #21
 8008432:	4584      	cmp	ip, r0
 8008434:	bf38      	it	cc
 8008436:	2304      	movcc	r3, #4
 8008438:	50ca      	str	r2, [r1, r3]
 800843a:	b10a      	cbz	r2, 8008440 <__lshift+0xa4>
 800843c:	f108 0602 	add.w	r6, r8, #2
 8008440:	3e01      	subs	r6, #1
 8008442:	4638      	mov	r0, r7
 8008444:	612e      	str	r6, [r5, #16]
 8008446:	4621      	mov	r1, r4
 8008448:	f7ff fdda 	bl	8008000 <_Bfree>
 800844c:	4628      	mov	r0, r5
 800844e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008452:	f842 0f04 	str.w	r0, [r2, #4]!
 8008456:	3301      	adds	r3, #1
 8008458:	e7c5      	b.n	80083e6 <__lshift+0x4a>
 800845a:	3904      	subs	r1, #4
 800845c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008460:	f841 2f04 	str.w	r2, [r1, #4]!
 8008464:	459c      	cmp	ip, r3
 8008466:	d8f9      	bhi.n	800845c <__lshift+0xc0>
 8008468:	e7ea      	b.n	8008440 <__lshift+0xa4>
 800846a:	bf00      	nop
 800846c:	080092cc 	.word	0x080092cc
 8008470:	080092dd 	.word	0x080092dd

08008474 <__mcmp>:
 8008474:	690a      	ldr	r2, [r1, #16]
 8008476:	4603      	mov	r3, r0
 8008478:	6900      	ldr	r0, [r0, #16]
 800847a:	1a80      	subs	r0, r0, r2
 800847c:	b530      	push	{r4, r5, lr}
 800847e:	d10e      	bne.n	800849e <__mcmp+0x2a>
 8008480:	3314      	adds	r3, #20
 8008482:	3114      	adds	r1, #20
 8008484:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008488:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800848c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008490:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008494:	4295      	cmp	r5, r2
 8008496:	d003      	beq.n	80084a0 <__mcmp+0x2c>
 8008498:	d205      	bcs.n	80084a6 <__mcmp+0x32>
 800849a:	f04f 30ff 	mov.w	r0, #4294967295
 800849e:	bd30      	pop	{r4, r5, pc}
 80084a0:	42a3      	cmp	r3, r4
 80084a2:	d3f3      	bcc.n	800848c <__mcmp+0x18>
 80084a4:	e7fb      	b.n	800849e <__mcmp+0x2a>
 80084a6:	2001      	movs	r0, #1
 80084a8:	e7f9      	b.n	800849e <__mcmp+0x2a>
	...

080084ac <__mdiff>:
 80084ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b0:	4689      	mov	r9, r1
 80084b2:	4606      	mov	r6, r0
 80084b4:	4611      	mov	r1, r2
 80084b6:	4648      	mov	r0, r9
 80084b8:	4614      	mov	r4, r2
 80084ba:	f7ff ffdb 	bl	8008474 <__mcmp>
 80084be:	1e05      	subs	r5, r0, #0
 80084c0:	d112      	bne.n	80084e8 <__mdiff+0x3c>
 80084c2:	4629      	mov	r1, r5
 80084c4:	4630      	mov	r0, r6
 80084c6:	f7ff fd5b 	bl	8007f80 <_Balloc>
 80084ca:	4602      	mov	r2, r0
 80084cc:	b928      	cbnz	r0, 80084da <__mdiff+0x2e>
 80084ce:	4b3f      	ldr	r3, [pc, #252]	@ (80085cc <__mdiff+0x120>)
 80084d0:	f240 2137 	movw	r1, #567	@ 0x237
 80084d4:	483e      	ldr	r0, [pc, #248]	@ (80085d0 <__mdiff+0x124>)
 80084d6:	f000 fb11 	bl	8008afc <__assert_func>
 80084da:	2301      	movs	r3, #1
 80084dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084e0:	4610      	mov	r0, r2
 80084e2:	b003      	add	sp, #12
 80084e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e8:	bfbc      	itt	lt
 80084ea:	464b      	movlt	r3, r9
 80084ec:	46a1      	movlt	r9, r4
 80084ee:	4630      	mov	r0, r6
 80084f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80084f4:	bfba      	itte	lt
 80084f6:	461c      	movlt	r4, r3
 80084f8:	2501      	movlt	r5, #1
 80084fa:	2500      	movge	r5, #0
 80084fc:	f7ff fd40 	bl	8007f80 <_Balloc>
 8008500:	4602      	mov	r2, r0
 8008502:	b918      	cbnz	r0, 800850c <__mdiff+0x60>
 8008504:	4b31      	ldr	r3, [pc, #196]	@ (80085cc <__mdiff+0x120>)
 8008506:	f240 2145 	movw	r1, #581	@ 0x245
 800850a:	e7e3      	b.n	80084d4 <__mdiff+0x28>
 800850c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008510:	6926      	ldr	r6, [r4, #16]
 8008512:	60c5      	str	r5, [r0, #12]
 8008514:	f109 0310 	add.w	r3, r9, #16
 8008518:	f109 0514 	add.w	r5, r9, #20
 800851c:	f104 0e14 	add.w	lr, r4, #20
 8008520:	f100 0b14 	add.w	fp, r0, #20
 8008524:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008528:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	46d9      	mov	r9, fp
 8008530:	f04f 0c00 	mov.w	ip, #0
 8008534:	9b01      	ldr	r3, [sp, #4]
 8008536:	f85e 0b04 	ldr.w	r0, [lr], #4
 800853a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800853e:	9301      	str	r3, [sp, #4]
 8008540:	fa1f f38a 	uxth.w	r3, sl
 8008544:	4619      	mov	r1, r3
 8008546:	b283      	uxth	r3, r0
 8008548:	1acb      	subs	r3, r1, r3
 800854a:	0c00      	lsrs	r0, r0, #16
 800854c:	4463      	add	r3, ip
 800854e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008552:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008556:	b29b      	uxth	r3, r3
 8008558:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800855c:	4576      	cmp	r6, lr
 800855e:	f849 3b04 	str.w	r3, [r9], #4
 8008562:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008566:	d8e5      	bhi.n	8008534 <__mdiff+0x88>
 8008568:	1b33      	subs	r3, r6, r4
 800856a:	3b15      	subs	r3, #21
 800856c:	f023 0303 	bic.w	r3, r3, #3
 8008570:	3415      	adds	r4, #21
 8008572:	3304      	adds	r3, #4
 8008574:	42a6      	cmp	r6, r4
 8008576:	bf38      	it	cc
 8008578:	2304      	movcc	r3, #4
 800857a:	441d      	add	r5, r3
 800857c:	445b      	add	r3, fp
 800857e:	461e      	mov	r6, r3
 8008580:	462c      	mov	r4, r5
 8008582:	4544      	cmp	r4, r8
 8008584:	d30e      	bcc.n	80085a4 <__mdiff+0xf8>
 8008586:	f108 0103 	add.w	r1, r8, #3
 800858a:	1b49      	subs	r1, r1, r5
 800858c:	f021 0103 	bic.w	r1, r1, #3
 8008590:	3d03      	subs	r5, #3
 8008592:	45a8      	cmp	r8, r5
 8008594:	bf38      	it	cc
 8008596:	2100      	movcc	r1, #0
 8008598:	440b      	add	r3, r1
 800859a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800859e:	b191      	cbz	r1, 80085c6 <__mdiff+0x11a>
 80085a0:	6117      	str	r7, [r2, #16]
 80085a2:	e79d      	b.n	80084e0 <__mdiff+0x34>
 80085a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80085a8:	46e6      	mov	lr, ip
 80085aa:	0c08      	lsrs	r0, r1, #16
 80085ac:	fa1c fc81 	uxtah	ip, ip, r1
 80085b0:	4471      	add	r1, lr
 80085b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80085b6:	b289      	uxth	r1, r1
 80085b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085bc:	f846 1b04 	str.w	r1, [r6], #4
 80085c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085c4:	e7dd      	b.n	8008582 <__mdiff+0xd6>
 80085c6:	3f01      	subs	r7, #1
 80085c8:	e7e7      	b.n	800859a <__mdiff+0xee>
 80085ca:	bf00      	nop
 80085cc:	080092cc 	.word	0x080092cc
 80085d0:	080092dd 	.word	0x080092dd

080085d4 <__d2b>:
 80085d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085d8:	460f      	mov	r7, r1
 80085da:	2101      	movs	r1, #1
 80085dc:	ec59 8b10 	vmov	r8, r9, d0
 80085e0:	4616      	mov	r6, r2
 80085e2:	f7ff fccd 	bl	8007f80 <_Balloc>
 80085e6:	4604      	mov	r4, r0
 80085e8:	b930      	cbnz	r0, 80085f8 <__d2b+0x24>
 80085ea:	4602      	mov	r2, r0
 80085ec:	4b23      	ldr	r3, [pc, #140]	@ (800867c <__d2b+0xa8>)
 80085ee:	4824      	ldr	r0, [pc, #144]	@ (8008680 <__d2b+0xac>)
 80085f0:	f240 310f 	movw	r1, #783	@ 0x30f
 80085f4:	f000 fa82 	bl	8008afc <__assert_func>
 80085f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80085fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008600:	b10d      	cbz	r5, 8008606 <__d2b+0x32>
 8008602:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008606:	9301      	str	r3, [sp, #4]
 8008608:	f1b8 0300 	subs.w	r3, r8, #0
 800860c:	d023      	beq.n	8008656 <__d2b+0x82>
 800860e:	4668      	mov	r0, sp
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	f7ff fd7c 	bl	800810e <__lo0bits>
 8008616:	e9dd 1200 	ldrd	r1, r2, [sp]
 800861a:	b1d0      	cbz	r0, 8008652 <__d2b+0x7e>
 800861c:	f1c0 0320 	rsb	r3, r0, #32
 8008620:	fa02 f303 	lsl.w	r3, r2, r3
 8008624:	430b      	orrs	r3, r1
 8008626:	40c2      	lsrs	r2, r0
 8008628:	6163      	str	r3, [r4, #20]
 800862a:	9201      	str	r2, [sp, #4]
 800862c:	9b01      	ldr	r3, [sp, #4]
 800862e:	61a3      	str	r3, [r4, #24]
 8008630:	2b00      	cmp	r3, #0
 8008632:	bf0c      	ite	eq
 8008634:	2201      	moveq	r2, #1
 8008636:	2202      	movne	r2, #2
 8008638:	6122      	str	r2, [r4, #16]
 800863a:	b1a5      	cbz	r5, 8008666 <__d2b+0x92>
 800863c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008640:	4405      	add	r5, r0
 8008642:	603d      	str	r5, [r7, #0]
 8008644:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008648:	6030      	str	r0, [r6, #0]
 800864a:	4620      	mov	r0, r4
 800864c:	b003      	add	sp, #12
 800864e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008652:	6161      	str	r1, [r4, #20]
 8008654:	e7ea      	b.n	800862c <__d2b+0x58>
 8008656:	a801      	add	r0, sp, #4
 8008658:	f7ff fd59 	bl	800810e <__lo0bits>
 800865c:	9b01      	ldr	r3, [sp, #4]
 800865e:	6163      	str	r3, [r4, #20]
 8008660:	3020      	adds	r0, #32
 8008662:	2201      	movs	r2, #1
 8008664:	e7e8      	b.n	8008638 <__d2b+0x64>
 8008666:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800866a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800866e:	6038      	str	r0, [r7, #0]
 8008670:	6918      	ldr	r0, [r3, #16]
 8008672:	f7ff fd2d 	bl	80080d0 <__hi0bits>
 8008676:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800867a:	e7e5      	b.n	8008648 <__d2b+0x74>
 800867c:	080092cc 	.word	0x080092cc
 8008680:	080092dd 	.word	0x080092dd

08008684 <__ssputs_r>:
 8008684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008688:	688e      	ldr	r6, [r1, #8]
 800868a:	461f      	mov	r7, r3
 800868c:	42be      	cmp	r6, r7
 800868e:	680b      	ldr	r3, [r1, #0]
 8008690:	4682      	mov	sl, r0
 8008692:	460c      	mov	r4, r1
 8008694:	4690      	mov	r8, r2
 8008696:	d82d      	bhi.n	80086f4 <__ssputs_r+0x70>
 8008698:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800869c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80086a0:	d026      	beq.n	80086f0 <__ssputs_r+0x6c>
 80086a2:	6965      	ldr	r5, [r4, #20]
 80086a4:	6909      	ldr	r1, [r1, #16]
 80086a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086aa:	eba3 0901 	sub.w	r9, r3, r1
 80086ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086b2:	1c7b      	adds	r3, r7, #1
 80086b4:	444b      	add	r3, r9
 80086b6:	106d      	asrs	r5, r5, #1
 80086b8:	429d      	cmp	r5, r3
 80086ba:	bf38      	it	cc
 80086bc:	461d      	movcc	r5, r3
 80086be:	0553      	lsls	r3, r2, #21
 80086c0:	d527      	bpl.n	8008712 <__ssputs_r+0x8e>
 80086c2:	4629      	mov	r1, r5
 80086c4:	f7ff fbd0 	bl	8007e68 <_malloc_r>
 80086c8:	4606      	mov	r6, r0
 80086ca:	b360      	cbz	r0, 8008726 <__ssputs_r+0xa2>
 80086cc:	6921      	ldr	r1, [r4, #16]
 80086ce:	464a      	mov	r2, r9
 80086d0:	f000 fa06 	bl	8008ae0 <memcpy>
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80086da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086de:	81a3      	strh	r3, [r4, #12]
 80086e0:	6126      	str	r6, [r4, #16]
 80086e2:	6165      	str	r5, [r4, #20]
 80086e4:	444e      	add	r6, r9
 80086e6:	eba5 0509 	sub.w	r5, r5, r9
 80086ea:	6026      	str	r6, [r4, #0]
 80086ec:	60a5      	str	r5, [r4, #8]
 80086ee:	463e      	mov	r6, r7
 80086f0:	42be      	cmp	r6, r7
 80086f2:	d900      	bls.n	80086f6 <__ssputs_r+0x72>
 80086f4:	463e      	mov	r6, r7
 80086f6:	6820      	ldr	r0, [r4, #0]
 80086f8:	4632      	mov	r2, r6
 80086fa:	4641      	mov	r1, r8
 80086fc:	f000 f9c6 	bl	8008a8c <memmove>
 8008700:	68a3      	ldr	r3, [r4, #8]
 8008702:	1b9b      	subs	r3, r3, r6
 8008704:	60a3      	str	r3, [r4, #8]
 8008706:	6823      	ldr	r3, [r4, #0]
 8008708:	4433      	add	r3, r6
 800870a:	6023      	str	r3, [r4, #0]
 800870c:	2000      	movs	r0, #0
 800870e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008712:	462a      	mov	r2, r5
 8008714:	f000 fa36 	bl	8008b84 <_realloc_r>
 8008718:	4606      	mov	r6, r0
 800871a:	2800      	cmp	r0, #0
 800871c:	d1e0      	bne.n	80086e0 <__ssputs_r+0x5c>
 800871e:	6921      	ldr	r1, [r4, #16]
 8008720:	4650      	mov	r0, sl
 8008722:	f7ff fb2d 	bl	8007d80 <_free_r>
 8008726:	230c      	movs	r3, #12
 8008728:	f8ca 3000 	str.w	r3, [sl]
 800872c:	89a3      	ldrh	r3, [r4, #12]
 800872e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008732:	81a3      	strh	r3, [r4, #12]
 8008734:	f04f 30ff 	mov.w	r0, #4294967295
 8008738:	e7e9      	b.n	800870e <__ssputs_r+0x8a>
	...

0800873c <_svfiprintf_r>:
 800873c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008740:	4698      	mov	r8, r3
 8008742:	898b      	ldrh	r3, [r1, #12]
 8008744:	061b      	lsls	r3, r3, #24
 8008746:	b09d      	sub	sp, #116	@ 0x74
 8008748:	4607      	mov	r7, r0
 800874a:	460d      	mov	r5, r1
 800874c:	4614      	mov	r4, r2
 800874e:	d510      	bpl.n	8008772 <_svfiprintf_r+0x36>
 8008750:	690b      	ldr	r3, [r1, #16]
 8008752:	b973      	cbnz	r3, 8008772 <_svfiprintf_r+0x36>
 8008754:	2140      	movs	r1, #64	@ 0x40
 8008756:	f7ff fb87 	bl	8007e68 <_malloc_r>
 800875a:	6028      	str	r0, [r5, #0]
 800875c:	6128      	str	r0, [r5, #16]
 800875e:	b930      	cbnz	r0, 800876e <_svfiprintf_r+0x32>
 8008760:	230c      	movs	r3, #12
 8008762:	603b      	str	r3, [r7, #0]
 8008764:	f04f 30ff 	mov.w	r0, #4294967295
 8008768:	b01d      	add	sp, #116	@ 0x74
 800876a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800876e:	2340      	movs	r3, #64	@ 0x40
 8008770:	616b      	str	r3, [r5, #20]
 8008772:	2300      	movs	r3, #0
 8008774:	9309      	str	r3, [sp, #36]	@ 0x24
 8008776:	2320      	movs	r3, #32
 8008778:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800877c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008780:	2330      	movs	r3, #48	@ 0x30
 8008782:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008920 <_svfiprintf_r+0x1e4>
 8008786:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800878a:	f04f 0901 	mov.w	r9, #1
 800878e:	4623      	mov	r3, r4
 8008790:	469a      	mov	sl, r3
 8008792:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008796:	b10a      	cbz	r2, 800879c <_svfiprintf_r+0x60>
 8008798:	2a25      	cmp	r2, #37	@ 0x25
 800879a:	d1f9      	bne.n	8008790 <_svfiprintf_r+0x54>
 800879c:	ebba 0b04 	subs.w	fp, sl, r4
 80087a0:	d00b      	beq.n	80087ba <_svfiprintf_r+0x7e>
 80087a2:	465b      	mov	r3, fp
 80087a4:	4622      	mov	r2, r4
 80087a6:	4629      	mov	r1, r5
 80087a8:	4638      	mov	r0, r7
 80087aa:	f7ff ff6b 	bl	8008684 <__ssputs_r>
 80087ae:	3001      	adds	r0, #1
 80087b0:	f000 80a7 	beq.w	8008902 <_svfiprintf_r+0x1c6>
 80087b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087b6:	445a      	add	r2, fp
 80087b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80087ba:	f89a 3000 	ldrb.w	r3, [sl]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 809f 	beq.w	8008902 <_svfiprintf_r+0x1c6>
 80087c4:	2300      	movs	r3, #0
 80087c6:	f04f 32ff 	mov.w	r2, #4294967295
 80087ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ce:	f10a 0a01 	add.w	sl, sl, #1
 80087d2:	9304      	str	r3, [sp, #16]
 80087d4:	9307      	str	r3, [sp, #28]
 80087d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087da:	931a      	str	r3, [sp, #104]	@ 0x68
 80087dc:	4654      	mov	r4, sl
 80087de:	2205      	movs	r2, #5
 80087e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e4:	484e      	ldr	r0, [pc, #312]	@ (8008920 <_svfiprintf_r+0x1e4>)
 80087e6:	f7f7 fd13 	bl	8000210 <memchr>
 80087ea:	9a04      	ldr	r2, [sp, #16]
 80087ec:	b9d8      	cbnz	r0, 8008826 <_svfiprintf_r+0xea>
 80087ee:	06d0      	lsls	r0, r2, #27
 80087f0:	bf44      	itt	mi
 80087f2:	2320      	movmi	r3, #32
 80087f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087f8:	0711      	lsls	r1, r2, #28
 80087fa:	bf44      	itt	mi
 80087fc:	232b      	movmi	r3, #43	@ 0x2b
 80087fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008802:	f89a 3000 	ldrb.w	r3, [sl]
 8008806:	2b2a      	cmp	r3, #42	@ 0x2a
 8008808:	d015      	beq.n	8008836 <_svfiprintf_r+0xfa>
 800880a:	9a07      	ldr	r2, [sp, #28]
 800880c:	4654      	mov	r4, sl
 800880e:	2000      	movs	r0, #0
 8008810:	f04f 0c0a 	mov.w	ip, #10
 8008814:	4621      	mov	r1, r4
 8008816:	f811 3b01 	ldrb.w	r3, [r1], #1
 800881a:	3b30      	subs	r3, #48	@ 0x30
 800881c:	2b09      	cmp	r3, #9
 800881e:	d94b      	bls.n	80088b8 <_svfiprintf_r+0x17c>
 8008820:	b1b0      	cbz	r0, 8008850 <_svfiprintf_r+0x114>
 8008822:	9207      	str	r2, [sp, #28]
 8008824:	e014      	b.n	8008850 <_svfiprintf_r+0x114>
 8008826:	eba0 0308 	sub.w	r3, r0, r8
 800882a:	fa09 f303 	lsl.w	r3, r9, r3
 800882e:	4313      	orrs	r3, r2
 8008830:	9304      	str	r3, [sp, #16]
 8008832:	46a2      	mov	sl, r4
 8008834:	e7d2      	b.n	80087dc <_svfiprintf_r+0xa0>
 8008836:	9b03      	ldr	r3, [sp, #12]
 8008838:	1d19      	adds	r1, r3, #4
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	9103      	str	r1, [sp, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	bfbb      	ittet	lt
 8008842:	425b      	neglt	r3, r3
 8008844:	f042 0202 	orrlt.w	r2, r2, #2
 8008848:	9307      	strge	r3, [sp, #28]
 800884a:	9307      	strlt	r3, [sp, #28]
 800884c:	bfb8      	it	lt
 800884e:	9204      	strlt	r2, [sp, #16]
 8008850:	7823      	ldrb	r3, [r4, #0]
 8008852:	2b2e      	cmp	r3, #46	@ 0x2e
 8008854:	d10a      	bne.n	800886c <_svfiprintf_r+0x130>
 8008856:	7863      	ldrb	r3, [r4, #1]
 8008858:	2b2a      	cmp	r3, #42	@ 0x2a
 800885a:	d132      	bne.n	80088c2 <_svfiprintf_r+0x186>
 800885c:	9b03      	ldr	r3, [sp, #12]
 800885e:	1d1a      	adds	r2, r3, #4
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	9203      	str	r2, [sp, #12]
 8008864:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008868:	3402      	adds	r4, #2
 800886a:	9305      	str	r3, [sp, #20]
 800886c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008930 <_svfiprintf_r+0x1f4>
 8008870:	7821      	ldrb	r1, [r4, #0]
 8008872:	2203      	movs	r2, #3
 8008874:	4650      	mov	r0, sl
 8008876:	f7f7 fccb 	bl	8000210 <memchr>
 800887a:	b138      	cbz	r0, 800888c <_svfiprintf_r+0x150>
 800887c:	9b04      	ldr	r3, [sp, #16]
 800887e:	eba0 000a 	sub.w	r0, r0, sl
 8008882:	2240      	movs	r2, #64	@ 0x40
 8008884:	4082      	lsls	r2, r0
 8008886:	4313      	orrs	r3, r2
 8008888:	3401      	adds	r4, #1
 800888a:	9304      	str	r3, [sp, #16]
 800888c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008890:	4824      	ldr	r0, [pc, #144]	@ (8008924 <_svfiprintf_r+0x1e8>)
 8008892:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008896:	2206      	movs	r2, #6
 8008898:	f7f7 fcba 	bl	8000210 <memchr>
 800889c:	2800      	cmp	r0, #0
 800889e:	d036      	beq.n	800890e <_svfiprintf_r+0x1d2>
 80088a0:	4b21      	ldr	r3, [pc, #132]	@ (8008928 <_svfiprintf_r+0x1ec>)
 80088a2:	bb1b      	cbnz	r3, 80088ec <_svfiprintf_r+0x1b0>
 80088a4:	9b03      	ldr	r3, [sp, #12]
 80088a6:	3307      	adds	r3, #7
 80088a8:	f023 0307 	bic.w	r3, r3, #7
 80088ac:	3308      	adds	r3, #8
 80088ae:	9303      	str	r3, [sp, #12]
 80088b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088b2:	4433      	add	r3, r6
 80088b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088b6:	e76a      	b.n	800878e <_svfiprintf_r+0x52>
 80088b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80088bc:	460c      	mov	r4, r1
 80088be:	2001      	movs	r0, #1
 80088c0:	e7a8      	b.n	8008814 <_svfiprintf_r+0xd8>
 80088c2:	2300      	movs	r3, #0
 80088c4:	3401      	adds	r4, #1
 80088c6:	9305      	str	r3, [sp, #20]
 80088c8:	4619      	mov	r1, r3
 80088ca:	f04f 0c0a 	mov.w	ip, #10
 80088ce:	4620      	mov	r0, r4
 80088d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088d4:	3a30      	subs	r2, #48	@ 0x30
 80088d6:	2a09      	cmp	r2, #9
 80088d8:	d903      	bls.n	80088e2 <_svfiprintf_r+0x1a6>
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0c6      	beq.n	800886c <_svfiprintf_r+0x130>
 80088de:	9105      	str	r1, [sp, #20]
 80088e0:	e7c4      	b.n	800886c <_svfiprintf_r+0x130>
 80088e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80088e6:	4604      	mov	r4, r0
 80088e8:	2301      	movs	r3, #1
 80088ea:	e7f0      	b.n	80088ce <_svfiprintf_r+0x192>
 80088ec:	ab03      	add	r3, sp, #12
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	462a      	mov	r2, r5
 80088f2:	4b0e      	ldr	r3, [pc, #56]	@ (800892c <_svfiprintf_r+0x1f0>)
 80088f4:	a904      	add	r1, sp, #16
 80088f6:	4638      	mov	r0, r7
 80088f8:	f7fd fe98 	bl	800662c <_printf_float>
 80088fc:	1c42      	adds	r2, r0, #1
 80088fe:	4606      	mov	r6, r0
 8008900:	d1d6      	bne.n	80088b0 <_svfiprintf_r+0x174>
 8008902:	89ab      	ldrh	r3, [r5, #12]
 8008904:	065b      	lsls	r3, r3, #25
 8008906:	f53f af2d 	bmi.w	8008764 <_svfiprintf_r+0x28>
 800890a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800890c:	e72c      	b.n	8008768 <_svfiprintf_r+0x2c>
 800890e:	ab03      	add	r3, sp, #12
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	462a      	mov	r2, r5
 8008914:	4b05      	ldr	r3, [pc, #20]	@ (800892c <_svfiprintf_r+0x1f0>)
 8008916:	a904      	add	r1, sp, #16
 8008918:	4638      	mov	r0, r7
 800891a:	f7fe f91f 	bl	8006b5c <_printf_i>
 800891e:	e7ed      	b.n	80088fc <_svfiprintf_r+0x1c0>
 8008920:	08009438 	.word	0x08009438
 8008924:	08009442 	.word	0x08009442
 8008928:	0800662d 	.word	0x0800662d
 800892c:	08008685 	.word	0x08008685
 8008930:	0800943e 	.word	0x0800943e

08008934 <__sflush_r>:
 8008934:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893c:	0716      	lsls	r6, r2, #28
 800893e:	4605      	mov	r5, r0
 8008940:	460c      	mov	r4, r1
 8008942:	d454      	bmi.n	80089ee <__sflush_r+0xba>
 8008944:	684b      	ldr	r3, [r1, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	dc02      	bgt.n	8008950 <__sflush_r+0x1c>
 800894a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800894c:	2b00      	cmp	r3, #0
 800894e:	dd48      	ble.n	80089e2 <__sflush_r+0xae>
 8008950:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008952:	2e00      	cmp	r6, #0
 8008954:	d045      	beq.n	80089e2 <__sflush_r+0xae>
 8008956:	2300      	movs	r3, #0
 8008958:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800895c:	682f      	ldr	r7, [r5, #0]
 800895e:	6a21      	ldr	r1, [r4, #32]
 8008960:	602b      	str	r3, [r5, #0]
 8008962:	d030      	beq.n	80089c6 <__sflush_r+0x92>
 8008964:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	0759      	lsls	r1, r3, #29
 800896a:	d505      	bpl.n	8008978 <__sflush_r+0x44>
 800896c:	6863      	ldr	r3, [r4, #4]
 800896e:	1ad2      	subs	r2, r2, r3
 8008970:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008972:	b10b      	cbz	r3, 8008978 <__sflush_r+0x44>
 8008974:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008976:	1ad2      	subs	r2, r2, r3
 8008978:	2300      	movs	r3, #0
 800897a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800897c:	6a21      	ldr	r1, [r4, #32]
 800897e:	4628      	mov	r0, r5
 8008980:	47b0      	blx	r6
 8008982:	1c43      	adds	r3, r0, #1
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	d106      	bne.n	8008996 <__sflush_r+0x62>
 8008988:	6829      	ldr	r1, [r5, #0]
 800898a:	291d      	cmp	r1, #29
 800898c:	d82b      	bhi.n	80089e6 <__sflush_r+0xb2>
 800898e:	4a2a      	ldr	r2, [pc, #168]	@ (8008a38 <__sflush_r+0x104>)
 8008990:	410a      	asrs	r2, r1
 8008992:	07d6      	lsls	r6, r2, #31
 8008994:	d427      	bmi.n	80089e6 <__sflush_r+0xb2>
 8008996:	2200      	movs	r2, #0
 8008998:	6062      	str	r2, [r4, #4]
 800899a:	04d9      	lsls	r1, r3, #19
 800899c:	6922      	ldr	r2, [r4, #16]
 800899e:	6022      	str	r2, [r4, #0]
 80089a0:	d504      	bpl.n	80089ac <__sflush_r+0x78>
 80089a2:	1c42      	adds	r2, r0, #1
 80089a4:	d101      	bne.n	80089aa <__sflush_r+0x76>
 80089a6:	682b      	ldr	r3, [r5, #0]
 80089a8:	b903      	cbnz	r3, 80089ac <__sflush_r+0x78>
 80089aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80089ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089ae:	602f      	str	r7, [r5, #0]
 80089b0:	b1b9      	cbz	r1, 80089e2 <__sflush_r+0xae>
 80089b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089b6:	4299      	cmp	r1, r3
 80089b8:	d002      	beq.n	80089c0 <__sflush_r+0x8c>
 80089ba:	4628      	mov	r0, r5
 80089bc:	f7ff f9e0 	bl	8007d80 <_free_r>
 80089c0:	2300      	movs	r3, #0
 80089c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80089c4:	e00d      	b.n	80089e2 <__sflush_r+0xae>
 80089c6:	2301      	movs	r3, #1
 80089c8:	4628      	mov	r0, r5
 80089ca:	47b0      	blx	r6
 80089cc:	4602      	mov	r2, r0
 80089ce:	1c50      	adds	r0, r2, #1
 80089d0:	d1c9      	bne.n	8008966 <__sflush_r+0x32>
 80089d2:	682b      	ldr	r3, [r5, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0c6      	beq.n	8008966 <__sflush_r+0x32>
 80089d8:	2b1d      	cmp	r3, #29
 80089da:	d001      	beq.n	80089e0 <__sflush_r+0xac>
 80089dc:	2b16      	cmp	r3, #22
 80089de:	d11e      	bne.n	8008a1e <__sflush_r+0xea>
 80089e0:	602f      	str	r7, [r5, #0]
 80089e2:	2000      	movs	r0, #0
 80089e4:	e022      	b.n	8008a2c <__sflush_r+0xf8>
 80089e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089ea:	b21b      	sxth	r3, r3
 80089ec:	e01b      	b.n	8008a26 <__sflush_r+0xf2>
 80089ee:	690f      	ldr	r7, [r1, #16]
 80089f0:	2f00      	cmp	r7, #0
 80089f2:	d0f6      	beq.n	80089e2 <__sflush_r+0xae>
 80089f4:	0793      	lsls	r3, r2, #30
 80089f6:	680e      	ldr	r6, [r1, #0]
 80089f8:	bf08      	it	eq
 80089fa:	694b      	ldreq	r3, [r1, #20]
 80089fc:	600f      	str	r7, [r1, #0]
 80089fe:	bf18      	it	ne
 8008a00:	2300      	movne	r3, #0
 8008a02:	eba6 0807 	sub.w	r8, r6, r7
 8008a06:	608b      	str	r3, [r1, #8]
 8008a08:	f1b8 0f00 	cmp.w	r8, #0
 8008a0c:	dde9      	ble.n	80089e2 <__sflush_r+0xae>
 8008a0e:	6a21      	ldr	r1, [r4, #32]
 8008a10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008a12:	4643      	mov	r3, r8
 8008a14:	463a      	mov	r2, r7
 8008a16:	4628      	mov	r0, r5
 8008a18:	47b0      	blx	r6
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	dc08      	bgt.n	8008a30 <__sflush_r+0xfc>
 8008a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a26:	81a3      	strh	r3, [r4, #12]
 8008a28:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a30:	4407      	add	r7, r0
 8008a32:	eba8 0800 	sub.w	r8, r8, r0
 8008a36:	e7e7      	b.n	8008a08 <__sflush_r+0xd4>
 8008a38:	dfbffffe 	.word	0xdfbffffe

08008a3c <_fflush_r>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	690b      	ldr	r3, [r1, #16]
 8008a40:	4605      	mov	r5, r0
 8008a42:	460c      	mov	r4, r1
 8008a44:	b913      	cbnz	r3, 8008a4c <_fflush_r+0x10>
 8008a46:	2500      	movs	r5, #0
 8008a48:	4628      	mov	r0, r5
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	b118      	cbz	r0, 8008a56 <_fflush_r+0x1a>
 8008a4e:	6a03      	ldr	r3, [r0, #32]
 8008a50:	b90b      	cbnz	r3, 8008a56 <_fflush_r+0x1a>
 8008a52:	f7fe fa2f 	bl	8006eb4 <__sinit>
 8008a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0f3      	beq.n	8008a46 <_fflush_r+0xa>
 8008a5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a60:	07d0      	lsls	r0, r2, #31
 8008a62:	d404      	bmi.n	8008a6e <_fflush_r+0x32>
 8008a64:	0599      	lsls	r1, r3, #22
 8008a66:	d402      	bmi.n	8008a6e <_fflush_r+0x32>
 8008a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a6a:	f7fe fb3a 	bl	80070e2 <__retarget_lock_acquire_recursive>
 8008a6e:	4628      	mov	r0, r5
 8008a70:	4621      	mov	r1, r4
 8008a72:	f7ff ff5f 	bl	8008934 <__sflush_r>
 8008a76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a78:	07da      	lsls	r2, r3, #31
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	d4e4      	bmi.n	8008a48 <_fflush_r+0xc>
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	059b      	lsls	r3, r3, #22
 8008a82:	d4e1      	bmi.n	8008a48 <_fflush_r+0xc>
 8008a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a86:	f7fe fb2d 	bl	80070e4 <__retarget_lock_release_recursive>
 8008a8a:	e7dd      	b.n	8008a48 <_fflush_r+0xc>

08008a8c <memmove>:
 8008a8c:	4288      	cmp	r0, r1
 8008a8e:	b510      	push	{r4, lr}
 8008a90:	eb01 0402 	add.w	r4, r1, r2
 8008a94:	d902      	bls.n	8008a9c <memmove+0x10>
 8008a96:	4284      	cmp	r4, r0
 8008a98:	4623      	mov	r3, r4
 8008a9a:	d807      	bhi.n	8008aac <memmove+0x20>
 8008a9c:	1e43      	subs	r3, r0, #1
 8008a9e:	42a1      	cmp	r1, r4
 8008aa0:	d008      	beq.n	8008ab4 <memmove+0x28>
 8008aa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008aaa:	e7f8      	b.n	8008a9e <memmove+0x12>
 8008aac:	4402      	add	r2, r0
 8008aae:	4601      	mov	r1, r0
 8008ab0:	428a      	cmp	r2, r1
 8008ab2:	d100      	bne.n	8008ab6 <memmove+0x2a>
 8008ab4:	bd10      	pop	{r4, pc}
 8008ab6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008aba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008abe:	e7f7      	b.n	8008ab0 <memmove+0x24>

08008ac0 <_sbrk_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4d06      	ldr	r5, [pc, #24]	@ (8008adc <_sbrk_r+0x1c>)
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	4608      	mov	r0, r1
 8008aca:	602b      	str	r3, [r5, #0]
 8008acc:	f7f9 fb18 	bl	8002100 <_sbrk>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d102      	bne.n	8008ada <_sbrk_r+0x1a>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	b103      	cbz	r3, 8008ada <_sbrk_r+0x1a>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	2000053c 	.word	0x2000053c

08008ae0 <memcpy>:
 8008ae0:	440a      	add	r2, r1
 8008ae2:	4291      	cmp	r1, r2
 8008ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ae8:	d100      	bne.n	8008aec <memcpy+0xc>
 8008aea:	4770      	bx	lr
 8008aec:	b510      	push	{r4, lr}
 8008aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008af6:	4291      	cmp	r1, r2
 8008af8:	d1f9      	bne.n	8008aee <memcpy+0xe>
 8008afa:	bd10      	pop	{r4, pc}

08008afc <__assert_func>:
 8008afc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008afe:	4614      	mov	r4, r2
 8008b00:	461a      	mov	r2, r3
 8008b02:	4b09      	ldr	r3, [pc, #36]	@ (8008b28 <__assert_func+0x2c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4605      	mov	r5, r0
 8008b08:	68d8      	ldr	r0, [r3, #12]
 8008b0a:	b954      	cbnz	r4, 8008b22 <__assert_func+0x26>
 8008b0c:	4b07      	ldr	r3, [pc, #28]	@ (8008b2c <__assert_func+0x30>)
 8008b0e:	461c      	mov	r4, r3
 8008b10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b14:	9100      	str	r1, [sp, #0]
 8008b16:	462b      	mov	r3, r5
 8008b18:	4905      	ldr	r1, [pc, #20]	@ (8008b30 <__assert_func+0x34>)
 8008b1a:	f000 f86f 	bl	8008bfc <fiprintf>
 8008b1e:	f000 f87f 	bl	8008c20 <abort>
 8008b22:	4b04      	ldr	r3, [pc, #16]	@ (8008b34 <__assert_func+0x38>)
 8008b24:	e7f4      	b.n	8008b10 <__assert_func+0x14>
 8008b26:	bf00      	nop
 8008b28:	20000018 	.word	0x20000018
 8008b2c:	0800948e 	.word	0x0800948e
 8008b30:	08009460 	.word	0x08009460
 8008b34:	08009453 	.word	0x08009453

08008b38 <_calloc_r>:
 8008b38:	b570      	push	{r4, r5, r6, lr}
 8008b3a:	fba1 5402 	umull	r5, r4, r1, r2
 8008b3e:	b93c      	cbnz	r4, 8008b50 <_calloc_r+0x18>
 8008b40:	4629      	mov	r1, r5
 8008b42:	f7ff f991 	bl	8007e68 <_malloc_r>
 8008b46:	4606      	mov	r6, r0
 8008b48:	b928      	cbnz	r0, 8008b56 <_calloc_r+0x1e>
 8008b4a:	2600      	movs	r6, #0
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	bd70      	pop	{r4, r5, r6, pc}
 8008b50:	220c      	movs	r2, #12
 8008b52:	6002      	str	r2, [r0, #0]
 8008b54:	e7f9      	b.n	8008b4a <_calloc_r+0x12>
 8008b56:	462a      	mov	r2, r5
 8008b58:	4621      	mov	r1, r4
 8008b5a:	f7fe fa44 	bl	8006fe6 <memset>
 8008b5e:	e7f5      	b.n	8008b4c <_calloc_r+0x14>

08008b60 <__ascii_mbtowc>:
 8008b60:	b082      	sub	sp, #8
 8008b62:	b901      	cbnz	r1, 8008b66 <__ascii_mbtowc+0x6>
 8008b64:	a901      	add	r1, sp, #4
 8008b66:	b142      	cbz	r2, 8008b7a <__ascii_mbtowc+0x1a>
 8008b68:	b14b      	cbz	r3, 8008b7e <__ascii_mbtowc+0x1e>
 8008b6a:	7813      	ldrb	r3, [r2, #0]
 8008b6c:	600b      	str	r3, [r1, #0]
 8008b6e:	7812      	ldrb	r2, [r2, #0]
 8008b70:	1e10      	subs	r0, r2, #0
 8008b72:	bf18      	it	ne
 8008b74:	2001      	movne	r0, #1
 8008b76:	b002      	add	sp, #8
 8008b78:	4770      	bx	lr
 8008b7a:	4610      	mov	r0, r2
 8008b7c:	e7fb      	b.n	8008b76 <__ascii_mbtowc+0x16>
 8008b7e:	f06f 0001 	mvn.w	r0, #1
 8008b82:	e7f8      	b.n	8008b76 <__ascii_mbtowc+0x16>

08008b84 <_realloc_r>:
 8008b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b88:	4680      	mov	r8, r0
 8008b8a:	4615      	mov	r5, r2
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	b921      	cbnz	r1, 8008b9a <_realloc_r+0x16>
 8008b90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b94:	4611      	mov	r1, r2
 8008b96:	f7ff b967 	b.w	8007e68 <_malloc_r>
 8008b9a:	b92a      	cbnz	r2, 8008ba8 <_realloc_r+0x24>
 8008b9c:	f7ff f8f0 	bl	8007d80 <_free_r>
 8008ba0:	2400      	movs	r4, #0
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ba8:	f000 f841 	bl	8008c2e <_malloc_usable_size_r>
 8008bac:	4285      	cmp	r5, r0
 8008bae:	4606      	mov	r6, r0
 8008bb0:	d802      	bhi.n	8008bb8 <_realloc_r+0x34>
 8008bb2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008bb6:	d8f4      	bhi.n	8008ba2 <_realloc_r+0x1e>
 8008bb8:	4629      	mov	r1, r5
 8008bba:	4640      	mov	r0, r8
 8008bbc:	f7ff f954 	bl	8007e68 <_malloc_r>
 8008bc0:	4607      	mov	r7, r0
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	d0ec      	beq.n	8008ba0 <_realloc_r+0x1c>
 8008bc6:	42b5      	cmp	r5, r6
 8008bc8:	462a      	mov	r2, r5
 8008bca:	4621      	mov	r1, r4
 8008bcc:	bf28      	it	cs
 8008bce:	4632      	movcs	r2, r6
 8008bd0:	f7ff ff86 	bl	8008ae0 <memcpy>
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	f7ff f8d2 	bl	8007d80 <_free_r>
 8008bdc:	463c      	mov	r4, r7
 8008bde:	e7e0      	b.n	8008ba2 <_realloc_r+0x1e>

08008be0 <__ascii_wctomb>:
 8008be0:	4603      	mov	r3, r0
 8008be2:	4608      	mov	r0, r1
 8008be4:	b141      	cbz	r1, 8008bf8 <__ascii_wctomb+0x18>
 8008be6:	2aff      	cmp	r2, #255	@ 0xff
 8008be8:	d904      	bls.n	8008bf4 <__ascii_wctomb+0x14>
 8008bea:	228a      	movs	r2, #138	@ 0x8a
 8008bec:	601a      	str	r2, [r3, #0]
 8008bee:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf2:	4770      	bx	lr
 8008bf4:	700a      	strb	r2, [r1, #0]
 8008bf6:	2001      	movs	r0, #1
 8008bf8:	4770      	bx	lr
	...

08008bfc <fiprintf>:
 8008bfc:	b40e      	push	{r1, r2, r3}
 8008bfe:	b503      	push	{r0, r1, lr}
 8008c00:	4601      	mov	r1, r0
 8008c02:	ab03      	add	r3, sp, #12
 8008c04:	4805      	ldr	r0, [pc, #20]	@ (8008c1c <fiprintf+0x20>)
 8008c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c0a:	6800      	ldr	r0, [r0, #0]
 8008c0c:	9301      	str	r3, [sp, #4]
 8008c0e:	f000 f83f 	bl	8008c90 <_vfiprintf_r>
 8008c12:	b002      	add	sp, #8
 8008c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c18:	b003      	add	sp, #12
 8008c1a:	4770      	bx	lr
 8008c1c:	20000018 	.word	0x20000018

08008c20 <abort>:
 8008c20:	b508      	push	{r3, lr}
 8008c22:	2006      	movs	r0, #6
 8008c24:	f000 fa08 	bl	8009038 <raise>
 8008c28:	2001      	movs	r0, #1
 8008c2a:	f7f9 f9f1 	bl	8002010 <_exit>

08008c2e <_malloc_usable_size_r>:
 8008c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c32:	1f18      	subs	r0, r3, #4
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	bfbc      	itt	lt
 8008c38:	580b      	ldrlt	r3, [r1, r0]
 8008c3a:	18c0      	addlt	r0, r0, r3
 8008c3c:	4770      	bx	lr

08008c3e <__sfputc_r>:
 8008c3e:	6893      	ldr	r3, [r2, #8]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	b410      	push	{r4}
 8008c46:	6093      	str	r3, [r2, #8]
 8008c48:	da08      	bge.n	8008c5c <__sfputc_r+0x1e>
 8008c4a:	6994      	ldr	r4, [r2, #24]
 8008c4c:	42a3      	cmp	r3, r4
 8008c4e:	db01      	blt.n	8008c54 <__sfputc_r+0x16>
 8008c50:	290a      	cmp	r1, #10
 8008c52:	d103      	bne.n	8008c5c <__sfputc_r+0x1e>
 8008c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c58:	f000 b932 	b.w	8008ec0 <__swbuf_r>
 8008c5c:	6813      	ldr	r3, [r2, #0]
 8008c5e:	1c58      	adds	r0, r3, #1
 8008c60:	6010      	str	r0, [r2, #0]
 8008c62:	7019      	strb	r1, [r3, #0]
 8008c64:	4608      	mov	r0, r1
 8008c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <__sfputs_r>:
 8008c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6e:	4606      	mov	r6, r0
 8008c70:	460f      	mov	r7, r1
 8008c72:	4614      	mov	r4, r2
 8008c74:	18d5      	adds	r5, r2, r3
 8008c76:	42ac      	cmp	r4, r5
 8008c78:	d101      	bne.n	8008c7e <__sfputs_r+0x12>
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	e007      	b.n	8008c8e <__sfputs_r+0x22>
 8008c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c82:	463a      	mov	r2, r7
 8008c84:	4630      	mov	r0, r6
 8008c86:	f7ff ffda 	bl	8008c3e <__sfputc_r>
 8008c8a:	1c43      	adds	r3, r0, #1
 8008c8c:	d1f3      	bne.n	8008c76 <__sfputs_r+0xa>
 8008c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c90 <_vfiprintf_r>:
 8008c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c94:	460d      	mov	r5, r1
 8008c96:	b09d      	sub	sp, #116	@ 0x74
 8008c98:	4614      	mov	r4, r2
 8008c9a:	4698      	mov	r8, r3
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	b118      	cbz	r0, 8008ca8 <_vfiprintf_r+0x18>
 8008ca0:	6a03      	ldr	r3, [r0, #32]
 8008ca2:	b90b      	cbnz	r3, 8008ca8 <_vfiprintf_r+0x18>
 8008ca4:	f7fe f906 	bl	8006eb4 <__sinit>
 8008ca8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008caa:	07d9      	lsls	r1, r3, #31
 8008cac:	d405      	bmi.n	8008cba <_vfiprintf_r+0x2a>
 8008cae:	89ab      	ldrh	r3, [r5, #12]
 8008cb0:	059a      	lsls	r2, r3, #22
 8008cb2:	d402      	bmi.n	8008cba <_vfiprintf_r+0x2a>
 8008cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cb6:	f7fe fa14 	bl	80070e2 <__retarget_lock_acquire_recursive>
 8008cba:	89ab      	ldrh	r3, [r5, #12]
 8008cbc:	071b      	lsls	r3, r3, #28
 8008cbe:	d501      	bpl.n	8008cc4 <_vfiprintf_r+0x34>
 8008cc0:	692b      	ldr	r3, [r5, #16]
 8008cc2:	b99b      	cbnz	r3, 8008cec <_vfiprintf_r+0x5c>
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	f000 f938 	bl	8008f3c <__swsetup_r>
 8008ccc:	b170      	cbz	r0, 8008cec <_vfiprintf_r+0x5c>
 8008cce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cd0:	07dc      	lsls	r4, r3, #31
 8008cd2:	d504      	bpl.n	8008cde <_vfiprintf_r+0x4e>
 8008cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd8:	b01d      	add	sp, #116	@ 0x74
 8008cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cde:	89ab      	ldrh	r3, [r5, #12]
 8008ce0:	0598      	lsls	r0, r3, #22
 8008ce2:	d4f7      	bmi.n	8008cd4 <_vfiprintf_r+0x44>
 8008ce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ce6:	f7fe f9fd 	bl	80070e4 <__retarget_lock_release_recursive>
 8008cea:	e7f3      	b.n	8008cd4 <_vfiprintf_r+0x44>
 8008cec:	2300      	movs	r3, #0
 8008cee:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cf0:	2320      	movs	r3, #32
 8008cf2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cfa:	2330      	movs	r3, #48	@ 0x30
 8008cfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008eac <_vfiprintf_r+0x21c>
 8008d00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d04:	f04f 0901 	mov.w	r9, #1
 8008d08:	4623      	mov	r3, r4
 8008d0a:	469a      	mov	sl, r3
 8008d0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d10:	b10a      	cbz	r2, 8008d16 <_vfiprintf_r+0x86>
 8008d12:	2a25      	cmp	r2, #37	@ 0x25
 8008d14:	d1f9      	bne.n	8008d0a <_vfiprintf_r+0x7a>
 8008d16:	ebba 0b04 	subs.w	fp, sl, r4
 8008d1a:	d00b      	beq.n	8008d34 <_vfiprintf_r+0xa4>
 8008d1c:	465b      	mov	r3, fp
 8008d1e:	4622      	mov	r2, r4
 8008d20:	4629      	mov	r1, r5
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7ff ffa2 	bl	8008c6c <__sfputs_r>
 8008d28:	3001      	adds	r0, #1
 8008d2a:	f000 80a7 	beq.w	8008e7c <_vfiprintf_r+0x1ec>
 8008d2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d30:	445a      	add	r2, fp
 8008d32:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d34:	f89a 3000 	ldrb.w	r3, [sl]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 809f 	beq.w	8008e7c <_vfiprintf_r+0x1ec>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	f04f 32ff 	mov.w	r2, #4294967295
 8008d44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d48:	f10a 0a01 	add.w	sl, sl, #1
 8008d4c:	9304      	str	r3, [sp, #16]
 8008d4e:	9307      	str	r3, [sp, #28]
 8008d50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d54:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d56:	4654      	mov	r4, sl
 8008d58:	2205      	movs	r2, #5
 8008d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d5e:	4853      	ldr	r0, [pc, #332]	@ (8008eac <_vfiprintf_r+0x21c>)
 8008d60:	f7f7 fa56 	bl	8000210 <memchr>
 8008d64:	9a04      	ldr	r2, [sp, #16]
 8008d66:	b9d8      	cbnz	r0, 8008da0 <_vfiprintf_r+0x110>
 8008d68:	06d1      	lsls	r1, r2, #27
 8008d6a:	bf44      	itt	mi
 8008d6c:	2320      	movmi	r3, #32
 8008d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d72:	0713      	lsls	r3, r2, #28
 8008d74:	bf44      	itt	mi
 8008d76:	232b      	movmi	r3, #43	@ 0x2b
 8008d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d80:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d82:	d015      	beq.n	8008db0 <_vfiprintf_r+0x120>
 8008d84:	9a07      	ldr	r2, [sp, #28]
 8008d86:	4654      	mov	r4, sl
 8008d88:	2000      	movs	r0, #0
 8008d8a:	f04f 0c0a 	mov.w	ip, #10
 8008d8e:	4621      	mov	r1, r4
 8008d90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d94:	3b30      	subs	r3, #48	@ 0x30
 8008d96:	2b09      	cmp	r3, #9
 8008d98:	d94b      	bls.n	8008e32 <_vfiprintf_r+0x1a2>
 8008d9a:	b1b0      	cbz	r0, 8008dca <_vfiprintf_r+0x13a>
 8008d9c:	9207      	str	r2, [sp, #28]
 8008d9e:	e014      	b.n	8008dca <_vfiprintf_r+0x13a>
 8008da0:	eba0 0308 	sub.w	r3, r0, r8
 8008da4:	fa09 f303 	lsl.w	r3, r9, r3
 8008da8:	4313      	orrs	r3, r2
 8008daa:	9304      	str	r3, [sp, #16]
 8008dac:	46a2      	mov	sl, r4
 8008dae:	e7d2      	b.n	8008d56 <_vfiprintf_r+0xc6>
 8008db0:	9b03      	ldr	r3, [sp, #12]
 8008db2:	1d19      	adds	r1, r3, #4
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	9103      	str	r1, [sp, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	bfbb      	ittet	lt
 8008dbc:	425b      	neglt	r3, r3
 8008dbe:	f042 0202 	orrlt.w	r2, r2, #2
 8008dc2:	9307      	strge	r3, [sp, #28]
 8008dc4:	9307      	strlt	r3, [sp, #28]
 8008dc6:	bfb8      	it	lt
 8008dc8:	9204      	strlt	r2, [sp, #16]
 8008dca:	7823      	ldrb	r3, [r4, #0]
 8008dcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dce:	d10a      	bne.n	8008de6 <_vfiprintf_r+0x156>
 8008dd0:	7863      	ldrb	r3, [r4, #1]
 8008dd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dd4:	d132      	bne.n	8008e3c <_vfiprintf_r+0x1ac>
 8008dd6:	9b03      	ldr	r3, [sp, #12]
 8008dd8:	1d1a      	adds	r2, r3, #4
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	9203      	str	r2, [sp, #12]
 8008dde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008de2:	3402      	adds	r4, #2
 8008de4:	9305      	str	r3, [sp, #20]
 8008de6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ebc <_vfiprintf_r+0x22c>
 8008dea:	7821      	ldrb	r1, [r4, #0]
 8008dec:	2203      	movs	r2, #3
 8008dee:	4650      	mov	r0, sl
 8008df0:	f7f7 fa0e 	bl	8000210 <memchr>
 8008df4:	b138      	cbz	r0, 8008e06 <_vfiprintf_r+0x176>
 8008df6:	9b04      	ldr	r3, [sp, #16]
 8008df8:	eba0 000a 	sub.w	r0, r0, sl
 8008dfc:	2240      	movs	r2, #64	@ 0x40
 8008dfe:	4082      	lsls	r2, r0
 8008e00:	4313      	orrs	r3, r2
 8008e02:	3401      	adds	r4, #1
 8008e04:	9304      	str	r3, [sp, #16]
 8008e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e0a:	4829      	ldr	r0, [pc, #164]	@ (8008eb0 <_vfiprintf_r+0x220>)
 8008e0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e10:	2206      	movs	r2, #6
 8008e12:	f7f7 f9fd 	bl	8000210 <memchr>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d03f      	beq.n	8008e9a <_vfiprintf_r+0x20a>
 8008e1a:	4b26      	ldr	r3, [pc, #152]	@ (8008eb4 <_vfiprintf_r+0x224>)
 8008e1c:	bb1b      	cbnz	r3, 8008e66 <_vfiprintf_r+0x1d6>
 8008e1e:	9b03      	ldr	r3, [sp, #12]
 8008e20:	3307      	adds	r3, #7
 8008e22:	f023 0307 	bic.w	r3, r3, #7
 8008e26:	3308      	adds	r3, #8
 8008e28:	9303      	str	r3, [sp, #12]
 8008e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e2c:	443b      	add	r3, r7
 8008e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e30:	e76a      	b.n	8008d08 <_vfiprintf_r+0x78>
 8008e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e36:	460c      	mov	r4, r1
 8008e38:	2001      	movs	r0, #1
 8008e3a:	e7a8      	b.n	8008d8e <_vfiprintf_r+0xfe>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	3401      	adds	r4, #1
 8008e40:	9305      	str	r3, [sp, #20]
 8008e42:	4619      	mov	r1, r3
 8008e44:	f04f 0c0a 	mov.w	ip, #10
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e4e:	3a30      	subs	r2, #48	@ 0x30
 8008e50:	2a09      	cmp	r2, #9
 8008e52:	d903      	bls.n	8008e5c <_vfiprintf_r+0x1cc>
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0c6      	beq.n	8008de6 <_vfiprintf_r+0x156>
 8008e58:	9105      	str	r1, [sp, #20]
 8008e5a:	e7c4      	b.n	8008de6 <_vfiprintf_r+0x156>
 8008e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e60:	4604      	mov	r4, r0
 8008e62:	2301      	movs	r3, #1
 8008e64:	e7f0      	b.n	8008e48 <_vfiprintf_r+0x1b8>
 8008e66:	ab03      	add	r3, sp, #12
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	462a      	mov	r2, r5
 8008e6c:	4b12      	ldr	r3, [pc, #72]	@ (8008eb8 <_vfiprintf_r+0x228>)
 8008e6e:	a904      	add	r1, sp, #16
 8008e70:	4630      	mov	r0, r6
 8008e72:	f7fd fbdb 	bl	800662c <_printf_float>
 8008e76:	4607      	mov	r7, r0
 8008e78:	1c78      	adds	r0, r7, #1
 8008e7a:	d1d6      	bne.n	8008e2a <_vfiprintf_r+0x19a>
 8008e7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e7e:	07d9      	lsls	r1, r3, #31
 8008e80:	d405      	bmi.n	8008e8e <_vfiprintf_r+0x1fe>
 8008e82:	89ab      	ldrh	r3, [r5, #12]
 8008e84:	059a      	lsls	r2, r3, #22
 8008e86:	d402      	bmi.n	8008e8e <_vfiprintf_r+0x1fe>
 8008e88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e8a:	f7fe f92b 	bl	80070e4 <__retarget_lock_release_recursive>
 8008e8e:	89ab      	ldrh	r3, [r5, #12]
 8008e90:	065b      	lsls	r3, r3, #25
 8008e92:	f53f af1f 	bmi.w	8008cd4 <_vfiprintf_r+0x44>
 8008e96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e98:	e71e      	b.n	8008cd8 <_vfiprintf_r+0x48>
 8008e9a:	ab03      	add	r3, sp, #12
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	462a      	mov	r2, r5
 8008ea0:	4b05      	ldr	r3, [pc, #20]	@ (8008eb8 <_vfiprintf_r+0x228>)
 8008ea2:	a904      	add	r1, sp, #16
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f7fd fe59 	bl	8006b5c <_printf_i>
 8008eaa:	e7e4      	b.n	8008e76 <_vfiprintf_r+0x1e6>
 8008eac:	08009438 	.word	0x08009438
 8008eb0:	08009442 	.word	0x08009442
 8008eb4:	0800662d 	.word	0x0800662d
 8008eb8:	08008c6d 	.word	0x08008c6d
 8008ebc:	0800943e 	.word	0x0800943e

08008ec0 <__swbuf_r>:
 8008ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec2:	460e      	mov	r6, r1
 8008ec4:	4614      	mov	r4, r2
 8008ec6:	4605      	mov	r5, r0
 8008ec8:	b118      	cbz	r0, 8008ed2 <__swbuf_r+0x12>
 8008eca:	6a03      	ldr	r3, [r0, #32]
 8008ecc:	b90b      	cbnz	r3, 8008ed2 <__swbuf_r+0x12>
 8008ece:	f7fd fff1 	bl	8006eb4 <__sinit>
 8008ed2:	69a3      	ldr	r3, [r4, #24]
 8008ed4:	60a3      	str	r3, [r4, #8]
 8008ed6:	89a3      	ldrh	r3, [r4, #12]
 8008ed8:	071a      	lsls	r2, r3, #28
 8008eda:	d501      	bpl.n	8008ee0 <__swbuf_r+0x20>
 8008edc:	6923      	ldr	r3, [r4, #16]
 8008ede:	b943      	cbnz	r3, 8008ef2 <__swbuf_r+0x32>
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f000 f82a 	bl	8008f3c <__swsetup_r>
 8008ee8:	b118      	cbz	r0, 8008ef2 <__swbuf_r+0x32>
 8008eea:	f04f 37ff 	mov.w	r7, #4294967295
 8008eee:	4638      	mov	r0, r7
 8008ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	6922      	ldr	r2, [r4, #16]
 8008ef6:	1a98      	subs	r0, r3, r2
 8008ef8:	6963      	ldr	r3, [r4, #20]
 8008efa:	b2f6      	uxtb	r6, r6
 8008efc:	4283      	cmp	r3, r0
 8008efe:	4637      	mov	r7, r6
 8008f00:	dc05      	bgt.n	8008f0e <__swbuf_r+0x4e>
 8008f02:	4621      	mov	r1, r4
 8008f04:	4628      	mov	r0, r5
 8008f06:	f7ff fd99 	bl	8008a3c <_fflush_r>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d1ed      	bne.n	8008eea <__swbuf_r+0x2a>
 8008f0e:	68a3      	ldr	r3, [r4, #8]
 8008f10:	3b01      	subs	r3, #1
 8008f12:	60a3      	str	r3, [r4, #8]
 8008f14:	6823      	ldr	r3, [r4, #0]
 8008f16:	1c5a      	adds	r2, r3, #1
 8008f18:	6022      	str	r2, [r4, #0]
 8008f1a:	701e      	strb	r6, [r3, #0]
 8008f1c:	6962      	ldr	r2, [r4, #20]
 8008f1e:	1c43      	adds	r3, r0, #1
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d004      	beq.n	8008f2e <__swbuf_r+0x6e>
 8008f24:	89a3      	ldrh	r3, [r4, #12]
 8008f26:	07db      	lsls	r3, r3, #31
 8008f28:	d5e1      	bpl.n	8008eee <__swbuf_r+0x2e>
 8008f2a:	2e0a      	cmp	r6, #10
 8008f2c:	d1df      	bne.n	8008eee <__swbuf_r+0x2e>
 8008f2e:	4621      	mov	r1, r4
 8008f30:	4628      	mov	r0, r5
 8008f32:	f7ff fd83 	bl	8008a3c <_fflush_r>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d0d9      	beq.n	8008eee <__swbuf_r+0x2e>
 8008f3a:	e7d6      	b.n	8008eea <__swbuf_r+0x2a>

08008f3c <__swsetup_r>:
 8008f3c:	b538      	push	{r3, r4, r5, lr}
 8008f3e:	4b29      	ldr	r3, [pc, #164]	@ (8008fe4 <__swsetup_r+0xa8>)
 8008f40:	4605      	mov	r5, r0
 8008f42:	6818      	ldr	r0, [r3, #0]
 8008f44:	460c      	mov	r4, r1
 8008f46:	b118      	cbz	r0, 8008f50 <__swsetup_r+0x14>
 8008f48:	6a03      	ldr	r3, [r0, #32]
 8008f4a:	b90b      	cbnz	r3, 8008f50 <__swsetup_r+0x14>
 8008f4c:	f7fd ffb2 	bl	8006eb4 <__sinit>
 8008f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f54:	0719      	lsls	r1, r3, #28
 8008f56:	d422      	bmi.n	8008f9e <__swsetup_r+0x62>
 8008f58:	06da      	lsls	r2, r3, #27
 8008f5a:	d407      	bmi.n	8008f6c <__swsetup_r+0x30>
 8008f5c:	2209      	movs	r2, #9
 8008f5e:	602a      	str	r2, [r5, #0]
 8008f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f64:	81a3      	strh	r3, [r4, #12]
 8008f66:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6a:	e033      	b.n	8008fd4 <__swsetup_r+0x98>
 8008f6c:	0758      	lsls	r0, r3, #29
 8008f6e:	d512      	bpl.n	8008f96 <__swsetup_r+0x5a>
 8008f70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f72:	b141      	cbz	r1, 8008f86 <__swsetup_r+0x4a>
 8008f74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f78:	4299      	cmp	r1, r3
 8008f7a:	d002      	beq.n	8008f82 <__swsetup_r+0x46>
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	f7fe feff 	bl	8007d80 <_free_r>
 8008f82:	2300      	movs	r3, #0
 8008f84:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f86:	89a3      	ldrh	r3, [r4, #12]
 8008f88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f8c:	81a3      	strh	r3, [r4, #12]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	6063      	str	r3, [r4, #4]
 8008f92:	6923      	ldr	r3, [r4, #16]
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	f043 0308 	orr.w	r3, r3, #8
 8008f9c:	81a3      	strh	r3, [r4, #12]
 8008f9e:	6923      	ldr	r3, [r4, #16]
 8008fa0:	b94b      	cbnz	r3, 8008fb6 <__swsetup_r+0x7a>
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fac:	d003      	beq.n	8008fb6 <__swsetup_r+0x7a>
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	f000 f883 	bl	80090bc <__smakebuf_r>
 8008fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fba:	f013 0201 	ands.w	r2, r3, #1
 8008fbe:	d00a      	beq.n	8008fd6 <__swsetup_r+0x9a>
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	60a2      	str	r2, [r4, #8]
 8008fc4:	6962      	ldr	r2, [r4, #20]
 8008fc6:	4252      	negs	r2, r2
 8008fc8:	61a2      	str	r2, [r4, #24]
 8008fca:	6922      	ldr	r2, [r4, #16]
 8008fcc:	b942      	cbnz	r2, 8008fe0 <__swsetup_r+0xa4>
 8008fce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008fd2:	d1c5      	bne.n	8008f60 <__swsetup_r+0x24>
 8008fd4:	bd38      	pop	{r3, r4, r5, pc}
 8008fd6:	0799      	lsls	r1, r3, #30
 8008fd8:	bf58      	it	pl
 8008fda:	6962      	ldrpl	r2, [r4, #20]
 8008fdc:	60a2      	str	r2, [r4, #8]
 8008fde:	e7f4      	b.n	8008fca <__swsetup_r+0x8e>
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	e7f7      	b.n	8008fd4 <__swsetup_r+0x98>
 8008fe4:	20000018 	.word	0x20000018

08008fe8 <_raise_r>:
 8008fe8:	291f      	cmp	r1, #31
 8008fea:	b538      	push	{r3, r4, r5, lr}
 8008fec:	4605      	mov	r5, r0
 8008fee:	460c      	mov	r4, r1
 8008ff0:	d904      	bls.n	8008ffc <_raise_r+0x14>
 8008ff2:	2316      	movs	r3, #22
 8008ff4:	6003      	str	r3, [r0, #0]
 8008ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8008ffa:	bd38      	pop	{r3, r4, r5, pc}
 8008ffc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008ffe:	b112      	cbz	r2, 8009006 <_raise_r+0x1e>
 8009000:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009004:	b94b      	cbnz	r3, 800901a <_raise_r+0x32>
 8009006:	4628      	mov	r0, r5
 8009008:	f000 f830 	bl	800906c <_getpid_r>
 800900c:	4622      	mov	r2, r4
 800900e:	4601      	mov	r1, r0
 8009010:	4628      	mov	r0, r5
 8009012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009016:	f000 b817 	b.w	8009048 <_kill_r>
 800901a:	2b01      	cmp	r3, #1
 800901c:	d00a      	beq.n	8009034 <_raise_r+0x4c>
 800901e:	1c59      	adds	r1, r3, #1
 8009020:	d103      	bne.n	800902a <_raise_r+0x42>
 8009022:	2316      	movs	r3, #22
 8009024:	6003      	str	r3, [r0, #0]
 8009026:	2001      	movs	r0, #1
 8009028:	e7e7      	b.n	8008ffa <_raise_r+0x12>
 800902a:	2100      	movs	r1, #0
 800902c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009030:	4620      	mov	r0, r4
 8009032:	4798      	blx	r3
 8009034:	2000      	movs	r0, #0
 8009036:	e7e0      	b.n	8008ffa <_raise_r+0x12>

08009038 <raise>:
 8009038:	4b02      	ldr	r3, [pc, #8]	@ (8009044 <raise+0xc>)
 800903a:	4601      	mov	r1, r0
 800903c:	6818      	ldr	r0, [r3, #0]
 800903e:	f7ff bfd3 	b.w	8008fe8 <_raise_r>
 8009042:	bf00      	nop
 8009044:	20000018 	.word	0x20000018

08009048 <_kill_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	4d07      	ldr	r5, [pc, #28]	@ (8009068 <_kill_r+0x20>)
 800904c:	2300      	movs	r3, #0
 800904e:	4604      	mov	r4, r0
 8009050:	4608      	mov	r0, r1
 8009052:	4611      	mov	r1, r2
 8009054:	602b      	str	r3, [r5, #0]
 8009056:	f7f8 ffcb 	bl	8001ff0 <_kill>
 800905a:	1c43      	adds	r3, r0, #1
 800905c:	d102      	bne.n	8009064 <_kill_r+0x1c>
 800905e:	682b      	ldr	r3, [r5, #0]
 8009060:	b103      	cbz	r3, 8009064 <_kill_r+0x1c>
 8009062:	6023      	str	r3, [r4, #0]
 8009064:	bd38      	pop	{r3, r4, r5, pc}
 8009066:	bf00      	nop
 8009068:	2000053c 	.word	0x2000053c

0800906c <_getpid_r>:
 800906c:	f7f8 bfb8 	b.w	8001fe0 <_getpid>

08009070 <__swhatbuf_r>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	460c      	mov	r4, r1
 8009074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009078:	2900      	cmp	r1, #0
 800907a:	b096      	sub	sp, #88	@ 0x58
 800907c:	4615      	mov	r5, r2
 800907e:	461e      	mov	r6, r3
 8009080:	da0d      	bge.n	800909e <__swhatbuf_r+0x2e>
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009088:	f04f 0100 	mov.w	r1, #0
 800908c:	bf14      	ite	ne
 800908e:	2340      	movne	r3, #64	@ 0x40
 8009090:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009094:	2000      	movs	r0, #0
 8009096:	6031      	str	r1, [r6, #0]
 8009098:	602b      	str	r3, [r5, #0]
 800909a:	b016      	add	sp, #88	@ 0x58
 800909c:	bd70      	pop	{r4, r5, r6, pc}
 800909e:	466a      	mov	r2, sp
 80090a0:	f000 f848 	bl	8009134 <_fstat_r>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	dbec      	blt.n	8009082 <__swhatbuf_r+0x12>
 80090a8:	9901      	ldr	r1, [sp, #4]
 80090aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090b2:	4259      	negs	r1, r3
 80090b4:	4159      	adcs	r1, r3
 80090b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090ba:	e7eb      	b.n	8009094 <__swhatbuf_r+0x24>

080090bc <__smakebuf_r>:
 80090bc:	898b      	ldrh	r3, [r1, #12]
 80090be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090c0:	079d      	lsls	r5, r3, #30
 80090c2:	4606      	mov	r6, r0
 80090c4:	460c      	mov	r4, r1
 80090c6:	d507      	bpl.n	80090d8 <__smakebuf_r+0x1c>
 80090c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	6123      	str	r3, [r4, #16]
 80090d0:	2301      	movs	r3, #1
 80090d2:	6163      	str	r3, [r4, #20]
 80090d4:	b003      	add	sp, #12
 80090d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090d8:	ab01      	add	r3, sp, #4
 80090da:	466a      	mov	r2, sp
 80090dc:	f7ff ffc8 	bl	8009070 <__swhatbuf_r>
 80090e0:	9f00      	ldr	r7, [sp, #0]
 80090e2:	4605      	mov	r5, r0
 80090e4:	4639      	mov	r1, r7
 80090e6:	4630      	mov	r0, r6
 80090e8:	f7fe febe 	bl	8007e68 <_malloc_r>
 80090ec:	b948      	cbnz	r0, 8009102 <__smakebuf_r+0x46>
 80090ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090f2:	059a      	lsls	r2, r3, #22
 80090f4:	d4ee      	bmi.n	80090d4 <__smakebuf_r+0x18>
 80090f6:	f023 0303 	bic.w	r3, r3, #3
 80090fa:	f043 0302 	orr.w	r3, r3, #2
 80090fe:	81a3      	strh	r3, [r4, #12]
 8009100:	e7e2      	b.n	80090c8 <__smakebuf_r+0xc>
 8009102:	89a3      	ldrh	r3, [r4, #12]
 8009104:	6020      	str	r0, [r4, #0]
 8009106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800910a:	81a3      	strh	r3, [r4, #12]
 800910c:	9b01      	ldr	r3, [sp, #4]
 800910e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009112:	b15b      	cbz	r3, 800912c <__smakebuf_r+0x70>
 8009114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009118:	4630      	mov	r0, r6
 800911a:	f000 f81d 	bl	8009158 <_isatty_r>
 800911e:	b128      	cbz	r0, 800912c <__smakebuf_r+0x70>
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	f023 0303 	bic.w	r3, r3, #3
 8009126:	f043 0301 	orr.w	r3, r3, #1
 800912a:	81a3      	strh	r3, [r4, #12]
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	431d      	orrs	r5, r3
 8009130:	81a5      	strh	r5, [r4, #12]
 8009132:	e7cf      	b.n	80090d4 <__smakebuf_r+0x18>

08009134 <_fstat_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4d07      	ldr	r5, [pc, #28]	@ (8009154 <_fstat_r+0x20>)
 8009138:	2300      	movs	r3, #0
 800913a:	4604      	mov	r4, r0
 800913c:	4608      	mov	r0, r1
 800913e:	4611      	mov	r1, r2
 8009140:	602b      	str	r3, [r5, #0]
 8009142:	f7f8 ffb5 	bl	80020b0 <_fstat>
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	d102      	bne.n	8009150 <_fstat_r+0x1c>
 800914a:	682b      	ldr	r3, [r5, #0]
 800914c:	b103      	cbz	r3, 8009150 <_fstat_r+0x1c>
 800914e:	6023      	str	r3, [r4, #0]
 8009150:	bd38      	pop	{r3, r4, r5, pc}
 8009152:	bf00      	nop
 8009154:	2000053c 	.word	0x2000053c

08009158 <_isatty_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4d06      	ldr	r5, [pc, #24]	@ (8009174 <_isatty_r+0x1c>)
 800915c:	2300      	movs	r3, #0
 800915e:	4604      	mov	r4, r0
 8009160:	4608      	mov	r0, r1
 8009162:	602b      	str	r3, [r5, #0]
 8009164:	f7f8 ffb4 	bl	80020d0 <_isatty>
 8009168:	1c43      	adds	r3, r0, #1
 800916a:	d102      	bne.n	8009172 <_isatty_r+0x1a>
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	b103      	cbz	r3, 8009172 <_isatty_r+0x1a>
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	2000053c 	.word	0x2000053c

08009178 <_init>:
 8009178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917a:	bf00      	nop
 800917c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800917e:	bc08      	pop	{r3}
 8009180:	469e      	mov	lr, r3
 8009182:	4770      	bx	lr

08009184 <_fini>:
 8009184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009186:	bf00      	nop
 8009188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800918a:	bc08      	pop	{r3}
 800918c:	469e      	mov	lr, r3
 800918e:	4770      	bx	lr
